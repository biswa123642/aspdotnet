---
ID: "e6a1d0dc-ed6b-4389-9f3a-a6f92caddb3b"
Parent: "a128db73-5665-48cc-aec4-6f9ad6d1486a"
Template: "962b53c4-f93b-4df9-9821-415c867b8903"
Path: "/sitecore/media library/Themes/OneWeb/Default/SXA Base Theme/scripts/mediaelement-and-player"
SharedFields:
- ID: "06d5295c-ed2f-4a54-9bf2-26228d113318"
  Hint: __Icon
  Value: "-/media/E6A1D0DCED6B43899F3AA6F92CADDB3B.ashx?h=16&thn=1&w=16"
- ID: "40e50ed9-ba07-4702-992e-a912738d32dc"
  Hint: Blob
  BlobID: "0c19737b-a03c-40c1-b894-c49b457da995"
  Value: LyohCiAqIE1lZGlhRWxlbWVudC5qcwogKiBodHRwOi8vd3d3Lm1lZGlhZWxlbWVudGpzLmNvbS8KICoKICogV3JhcHBlciB0aGF0IG1pbWljcyBuYXRpdmUgSFRNTDUgTWVkaWFFbGVtZW50IChhdWRpbyBhbmQgdmlkZW8pCiAqIHVzaW5nIGEgdmFyaWV0eSBvZiB0ZWNobm9sb2dpZXMgKHB1cmUgSmF2YVNjcmlwdCwgRmxhc2gsIGlmcmFtZSkKICoKICogQ29weXJpZ2h0IDIwMTAtMjAxNywgSm9obiBEeWVyIChodHRwOi8vai5obi8pCiAqIExpY2Vuc2U6IE1JVAogKgogKi8oZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBlKHQsIG4sIHIpIHsgZnVuY3Rpb24gcyhvLCB1KSB7IGlmICghbltvXSkgeyBpZiAoIXRbb10pIHsgdmFyIGEgPSB0eXBlb2YgcmVxdWlyZSA9PSAiZnVuY3Rpb24iICYmIHJlcXVpcmU7IGlmICghdSAmJiBhKSByZXR1cm4gYShvLCAhMCk7IGlmIChpKSByZXR1cm4gaShvLCAhMCk7IHZhciBmID0gbmV3IEVycm9yKCJDYW5ub3QgZmluZCBtb2R1bGUgJyIgKyBvICsgIiciKTsgdGhyb3cgZi5jb2RlID0gIk1PRFVMRV9OT1RfRk9VTkQiLCBmIH0gdmFyIGwgPSBuW29dID0geyBleHBvcnRzOiB7fSB9OyB0W29dWzBdLmNhbGwobC5leHBvcnRzLCBmdW5jdGlvbiAoZSkgeyB2YXIgbiA9IHRbb11bMV1bZV07IHJldHVybiBzKG4gPyBuIDogZSkgfSwgbCwgbC5leHBvcnRzLCBlLCB0LCBuLCByKSB9IHJldHVybiBuW29dLmV4cG9ydHMgfSB2YXIgaSA9IHR5cGVvZiByZXF1aXJlID09ICJmdW5jdGlvbiIgJiYgcmVxdWlyZTsgZm9yICh2YXIgbyA9IDA7IG8gPCByLmxlbmd0aDsgbysrKXMocltvXSk7IHJldHVybiBzIH0gcmV0dXJuIGUgfSkoKSh7DQogICAgIDE6IFtmdW5jdGlvbiAoX2RlcmVxXywgbW9kdWxlLCBleHBvcnRzKSB7CgogICAgIH0sIHt9XSwgMjogW2Z1bmN0aW9uIChfZGVyZXFfLCBtb2R1bGUsIGV4cG9ydHMpIHsKICAgICAgICAgKGZ1bmN0aW9uIChnbG9iYWwpIHsKICAgICAgICAgICAgIHZhciB0b3BMZXZlbCA9IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDoKICAgICAgICAgICAgICAgICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHt9CiAgICAgICAgICAgICB2YXIgbWluRG9jID0gX2RlcmVxXygxKTsKCiAgICAgICAgICAgICB2YXIgZG9jY3k7CgogICAgICAgICAgICAgaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICAgICAgICAgICBkb2NjeSA9IGRvY3VtZW50OwogICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICBkb2NjeSA9IHRvcExldmVsWydfX0dMT0JBTF9ET0NVTUVOVF9DQUNIRUA0J107CgogICAgICAgICAgICAgICAgIGlmICghZG9jY3kpIHsKICAgICAgICAgICAgICAgICAgICAgZG9jY3kgPSB0b3BMZXZlbFsnX19HTE9CQUxfRE9DVU1FTlRfQ0FDSEVANCddID0gbWluRG9jOwogICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGRvY2N5OwoKICAgICAgICAgfSkuY2FsbCh0aGlzLCB0eXBlb2YgZ2xvYmFsICE9PSAidW5kZWZpbmVkIiA/IGdsb2JhbCA6IHR5cGVvZiBzZWxmICE9PSAidW5kZWZpbmVkIiA/IHNlbGYgOiB0eXBlb2Ygd2luZG93ICE9PSAidW5kZWZpbmVkIiA/IHdpbmRvdyA6IHt9KQogICAgIH0sIHsgIjEiOiAxIH1dLCAzOiBbZnVuY3Rpb24gKF9kZXJlcV8sIG1vZHVsZSwgZXhwb3J0cykgewogICAgICAgICAoZnVuY3Rpb24gKGdsb2JhbCkgewogICAgICAgICAgICAgdmFyIHdpbjsKCiAgICAgICAgICAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gInVuZGVmaW5lZCIpIHsKICAgICAgICAgICAgICAgICB3aW4gPSB3aW5kb3c7CiAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBnbG9iYWwgIT09ICJ1bmRlZmluZWQiKSB7CiAgICAgICAgICAgICAgICAgd2luID0gZ2xvYmFsOwogICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygc2VsZiAhPT0gInVuZGVmaW5lZCIpIHsKICAgICAgICAgICAgICAgICB3aW4gPSBzZWxmOwogICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICB3aW4gPSB7fTsKICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IHdpbjsKCiAgICAgICAgIH0pLmNhbGwodGhpcywgdHlwZW9mIGdsb2JhbCAhPT0gInVuZGVmaW5lZCIgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gInVuZGVmaW5lZCIgPyBzZWxmIDogdHlwZW9mIHdpbmRvdyAhPT0gInVuZGVmaW5lZCIgPyB3aW5kb3cgOiB7fSkKICAgICB9LCB7fV0sIDQ6IFtmdW5jdGlvbiAoX2RlcmVxXywgbW9kdWxlLCBleHBvcnRzKSB7CiAgICAgICAgIChmdW5jdGlvbiAocm9vdCkgewoKICAgICAgICAgICAgIC8vIFN0b3JlIHNldFRpbWVvdXQgcmVmZXJlbmNlIHNvIHByb21pc2UtcG9seWZpbGwgd2lsbCBiZSB1bmFmZmVjdGVkIGJ5CiAgICAgICAgICAgICAvLyBvdGhlciBjb2RlIG1vZGlmeWluZyBzZXRUaW1lb3V0IChsaWtlIHNpbm9uLnVzZUZha2VUaW1lcnMoKSkKICAgICAgICAgICAgIHZhciBzZXRUaW1lb3V0RnVuYyA9IHNldFRpbWVvdXQ7CgogICAgICAgICAgICAgZnVuY3Rpb24gbm9vcCgpIHsgfQoKICAgICAgICAgICAgIC8vIFBvbHlmaWxsIGZvciBGdW5jdGlvbi5wcm90b3R5cGUuYmluZAogICAgICAgICAgICAgZnVuY3Rpb24gYmluZChmbiwgdGhpc0FyZykgewogICAgICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgIGZuLmFwcGx5KHRoaXNBcmcsIGFyZ3VtZW50cyk7CiAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICBmdW5jdGlvbiBQcm9taXNlKGZuKSB7CiAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzICE9PSAnb2JqZWN0JykgdGhyb3cgbmV3IFR5cGVFcnJvcignUHJvbWlzZXMgbXVzdCBiZSBjb25zdHJ1Y3RlZCB2aWEgbmV3Jyk7CiAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykgdGhyb3cgbmV3IFR5cGVFcnJvcignbm90IGEgZnVuY3Rpb24nKTsKICAgICAgICAgICAgICAgICB0aGlzLl9zdGF0ZSA9IDA7CiAgICAgICAgICAgICAgICAgdGhpcy5faGFuZGxlZCA9IGZhbHNlOwogICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlID0gdW5kZWZpbmVkOwogICAgICAgICAgICAgICAgIHRoaXMuX2RlZmVycmVkcyA9IFtdOwoKICAgICAgICAgICAgICAgICBkb1Jlc29sdmUoZm4sIHRoaXMpOwogICAgICAgICAgICAgfQoKICAgICAgICAgICAgIGZ1bmN0aW9uIGhhbmRsZShzZWxmLCBkZWZlcnJlZCkgewogICAgICAgICAgICAgICAgIHdoaWxlIChzZWxmLl9zdGF0ZSA9PT0gMykgewogICAgICAgICAgICAgICAgICAgICBzZWxmID0gc2VsZi5fdmFsdWU7CiAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgIGlmIChzZWxmLl9zdGF0ZSA9PT0gMCkgewogICAgICAgICAgICAgICAgICAgICBzZWxmLl9kZWZlcnJlZHMucHVzaChkZWZlcnJlZCk7CiAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgc2VsZi5faGFuZGxlZCA9IHRydWU7CiAgICAgICAgICAgICAgICAgUHJvbWlzZS5faW1tZWRpYXRlRm4oZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICB2YXIgY2IgPSBzZWxmLl9zdGF0ZSA9PT0gMSA/IGRlZmVycmVkLm9uRnVsZmlsbGVkIDogZGVmZXJyZWQub25SZWplY3RlZDsKICAgICAgICAgICAgICAgICAgICAgaWYgKGNiID09PSBudWxsKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAoc2VsZi5fc3RhdGUgPT09IDEgPyByZXNvbHZlIDogcmVqZWN0KShkZWZlcnJlZC5wcm9taXNlLCBzZWxmLl92YWx1ZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgdmFyIHJldDsKICAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgIHJldCA9IGNiKHNlbGYuX3ZhbHVlKTsKICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGRlZmVycmVkLnByb21pc2UsIGUpOwogICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoZGVmZXJyZWQucHJvbWlzZSwgcmV0KTsKICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICBmdW5jdGlvbiByZXNvbHZlKHNlbGYsIG5ld1ZhbHVlKSB7CiAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgLy8gUHJvbWlzZSBSZXNvbHV0aW9uIFByb2NlZHVyZTogaHR0cHM6Ly9naXRodWIuY29tL3Byb21pc2VzLWFwbHVzL3Byb21pc2VzLXNwZWMjdGhlLXByb21pc2UtcmVzb2x1dGlvbi1wcm9jZWR1cmUKICAgICAgICAgICAgICAgICAgICAgaWYgKG5ld1ZhbHVlID09PSBzZWxmKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdBIHByb21pc2UgY2Fubm90IGJlIHJlc29sdmVkIHdpdGggaXRzZWxmLicpOwogICAgICAgICAgICAgICAgICAgICBpZiAobmV3VmFsdWUgJiYgKHR5cGVvZiBuZXdWYWx1ZSA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIG5ld1ZhbHVlID09PSAnZnVuY3Rpb24nKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRoZW4gPSBuZXdWYWx1ZS50aGVuOwogICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5ld1ZhbHVlIGluc3RhbmNlb2YgUHJvbWlzZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX3N0YXRlID0gMzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl92YWx1ZSA9IG5ld1ZhbHVlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsZShzZWxmKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB0aGVuID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9SZXNvbHZlKGJpbmQodGhlbiwgbmV3VmFsdWUpLCBzZWxmKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgc2VsZi5fc3RhdGUgPSAxOwogICAgICAgICAgICAgICAgICAgICBzZWxmLl92YWx1ZSA9IG5ld1ZhbHVlOwogICAgICAgICAgICAgICAgICAgICBmaW5hbGUoc2VsZik7CiAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICAgICAgICAgICByZWplY3Qoc2VsZiwgZSk7CiAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgfQoKICAgICAgICAgICAgIGZ1bmN0aW9uIHJlamVjdChzZWxmLCBuZXdWYWx1ZSkgewogICAgICAgICAgICAgICAgIHNlbGYuX3N0YXRlID0gMjsKICAgICAgICAgICAgICAgICBzZWxmLl92YWx1ZSA9IG5ld1ZhbHVlOwogICAgICAgICAgICAgICAgIGZpbmFsZShzZWxmKTsKICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICBmdW5jdGlvbiBmaW5hbGUoc2VsZikgewogICAgICAgICAgICAgICAgIGlmIChzZWxmLl9zdGF0ZSA9PT0gMiAmJiBzZWxmLl9kZWZlcnJlZHMubGVuZ3RoID09PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgIFByb21pc2UuX2ltbWVkaWF0ZUZuKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc2VsZi5faGFuZGxlZCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIFByb21pc2UuX3VuaGFuZGxlZFJlamVjdGlvbkZuKHNlbGYuX3ZhbHVlKTsKICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gc2VsZi5fZGVmZXJyZWRzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgIGhhbmRsZShzZWxmLCBzZWxmLl9kZWZlcnJlZHNbaV0pOwogICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICBzZWxmLl9kZWZlcnJlZHMgPSBudWxsOwogICAgICAgICAgICAgfQoKICAgICAgICAgICAgIGZ1bmN0aW9uIEhhbmRsZXIob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQsIHByb21pc2UpIHsKICAgICAgICAgICAgICAgICB0aGlzLm9uRnVsZmlsbGVkID0gdHlwZW9mIG9uRnVsZmlsbGVkID09PSAnZnVuY3Rpb24nID8gb25GdWxmaWxsZWQgOiBudWxsOwogICAgICAgICAgICAgICAgIHRoaXMub25SZWplY3RlZCA9IHR5cGVvZiBvblJlamVjdGVkID09PSAnZnVuY3Rpb24nID8gb25SZWplY3RlZCA6IG51bGw7CiAgICAgICAgICAgICAgICAgdGhpcy5wcm9taXNlID0gcHJvbWlzZTsKICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAvKioKICAgICAgICAgICAgICAqIFRha2UgYSBwb3RlbnRpYWxseSBtaXNiZWhhdmluZyByZXNvbHZlciBmdW5jdGlvbiBhbmQgbWFrZSBzdXJlCiAgICAgICAgICAgICAgKiBvbkZ1bGZpbGxlZCBhbmQgb25SZWplY3RlZCBhcmUgb25seSBjYWxsZWQgb25jZS4KICAgICAgICAgICAgICAqCiAgICAgICAgICAgICAgKiBNYWtlcyBubyBndWFyYW50ZWVzIGFib3V0IGFzeW5jaHJvbnkuCiAgICAgICAgICAgICAgKi8KICAgICAgICAgICAgIGZ1bmN0aW9uIGRvUmVzb2x2ZShmbiwgc2VsZikgewogICAgICAgICAgICAgICAgIHZhciBkb25lID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgZm4oZnVuY3Rpb24gKHZhbHVlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZG9uZSkgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgICAgICAgZG9uZSA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKHNlbGYsIHZhbHVlKTsKICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKHJlYXNvbikgewogICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRvbmUpIHJldHVybjsKICAgICAgICAgICAgICAgICAgICAgICAgIGRvbmUgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHNlbGYsIHJlYXNvbik7CiAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGV4KSB7CiAgICAgICAgICAgICAgICAgICAgIGlmIChkb25lKSByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgIGRvbmUgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICByZWplY3Qoc2VsZiwgZXgpOwogICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICBQcm9taXNlLnByb3RvdHlwZVsnY2F0Y2gnXSA9IGZ1bmN0aW9uIChvblJlamVjdGVkKSB7CiAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudGhlbihudWxsLCBvblJlamVjdGVkKTsKICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgUHJvbWlzZS5wcm90b3R5cGUudGhlbiA9IGZ1bmN0aW9uIChvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkgewogICAgICAgICAgICAgICAgIHZhciBwcm9tID0gbmV3ICh0aGlzLmNvbnN0cnVjdG9yKShub29wKTsKCiAgICAgICAgICAgICAgICAgaGFuZGxlKHRoaXMsIG5ldyBIYW5kbGVyKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkLCBwcm9tKSk7CiAgICAgICAgICAgICAgICAgcmV0dXJuIHByb207CiAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgIFByb21pc2UuYWxsID0gZnVuY3Rpb24gKGFycikgewogICAgICAgICAgICAgICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJyKTsKCiAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICAgICAgICAgICAgICAgaWYgKGFyZ3MubGVuZ3RoID09PSAwKSByZXR1cm4gcmVzb2x2ZShbXSk7CiAgICAgICAgICAgICAgICAgICAgIHZhciByZW1haW5pbmcgPSBhcmdzLmxlbmd0aDsKCiAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHJlcyhpLCB2YWwpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbCAmJiAodHlwZW9mIHZhbCA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIHZhbCA9PT0gJ2Z1bmN0aW9uJykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRoZW4gPSB2YWwudGhlbjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGVuID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGVuLmNhbGwodmFsLCBmdW5jdGlvbiAodmFsKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzKGksIHZhbCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCByZWplY3QpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZ3NbaV0gPSB2YWw7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKC0tcmVtYWluaW5nID09PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoYXJncyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXgpOwogICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHJlcyhpLCBhcmdzW2ldKTsKICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICBQcm9taXNlLnJlc29sdmUgPSBmdW5jdGlvbiAodmFsdWUpIHsKICAgICAgICAgICAgICAgICBpZiAodmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZS5jb25zdHJ1Y3RvciA9PT0gUHJvbWlzZSkgewogICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7CiAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHsKICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSh2YWx1ZSk7CiAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgIFByb21pc2UucmVqZWN0ID0gZnVuY3Rpb24gKHZhbHVlKSB7CiAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KHZhbHVlKTsKICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgUHJvbWlzZS5yYWNlID0gZnVuY3Rpb24gKHZhbHVlcykgewogICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7CiAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB2YWx1ZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlc1tpXS50aGVuKHJlc29sdmUsIHJlamVjdCk7CiAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgLy8gVXNlIHBvbHlmaWxsIGZvciBzZXRJbW1lZGlhdGUgZm9yIHBlcmZvcm1hbmNlIGdhaW5zCiAgICAgICAgICAgICBQcm9taXNlLl9pbW1lZGlhdGVGbiA9ICh0eXBlb2Ygc2V0SW1tZWRpYXRlID09PSAnZnVuY3Rpb24nICYmIGZ1bmN0aW9uIChmbikgeyBzZXRJbW1lZGlhdGUoZm4pOyB9KSB8fAogICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChmbikgewogICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0RnVuYyhmbiwgMCk7CiAgICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICBQcm9taXNlLl91bmhhbmRsZWRSZWplY3Rpb25GbiA9IGZ1bmN0aW9uIF91bmhhbmRsZWRSZWplY3Rpb25GbihlcnIpIHsKICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmIGNvbnNvbGUpIHsKICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdQb3NzaWJsZSBVbmhhbmRsZWQgUHJvbWlzZSBSZWplY3Rpb246JywgZXJyKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1jb25zb2xlCiAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAvKioKICAgICAgICAgICAgICAqIFNldCB0aGUgaW1tZWRpYXRlIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgY2FsbGJhY2tzCiAgICAgICAgICAgICAgKiBAcGFyYW0gZm4ge2Z1bmN0aW9ufSBGdW5jdGlvbiB0byBleGVjdXRlCiAgICAgICAgICAgICAgKiBAZGVwcmVjYXRlZAogICAgICAgICAgICAgICovCiAgICAgICAgICAgICBQcm9taXNlLl9zZXRJbW1lZGlhdGVGbiA9IGZ1bmN0aW9uIF9zZXRJbW1lZGlhdGVGbihmbikgewogICAgICAgICAgICAgICAgIFByb21pc2UuX2ltbWVkaWF0ZUZuID0gZm47CiAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgIC8qKgogICAgICAgICAgICAgICogQ2hhbmdlIHRoZSBmdW5jdGlvbiB0byBleGVjdXRlIG9uIHVuaGFuZGxlZCByZWplY3Rpb24KICAgICAgICAgICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGZuIEZ1bmN0aW9uIHRvIGV4ZWN1dGUgb24gdW5oYW5kbGVkIHJlamVjdGlvbgogICAgICAgICAgICAgICogQGRlcHJlY2F0ZWQKICAgICAgICAgICAgICAqLwogICAgICAgICAgICAgUHJvbWlzZS5fc2V0VW5oYW5kbGVkUmVqZWN0aW9uRm4gPSBmdW5jdGlvbiBfc2V0VW5oYW5kbGVkUmVqZWN0aW9uRm4oZm4pIHsKICAgICAgICAgICAgICAgICBQcm9taXNlLl91bmhhbmRsZWRSZWplY3Rpb25GbiA9IGZuOwogICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHsKICAgICAgICAgICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IFByb21pc2U7CiAgICAgICAgICAgICB9IGVsc2UgaWYgKCFyb290LlByb21pc2UpIHsKICAgICAgICAgICAgICAgICByb290LlByb21pc2UgPSBQcm9taXNlOwogICAgICAgICAgICAgfQoKICAgICAgICAgfSkodGhpcyk7CgogICAgIH0sIHt9XSwgNTogW2Z1bmN0aW9uIChfZGVyZXFfLCBtb2R1bGUsIGV4cG9ydHMpIHsKICAgICAgICAgJ3VzZSBzdHJpY3QnOwoKICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogICAgICAgICAgICAgdmFsdWU6IHRydWUKICAgICAgICAgfSk7CgogICAgICAgICB2YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OwoKICAgICAgICAgdmFyIF9tZWpzID0gX2RlcmVxXyg3KTsKCiAgICAgICAgIHZhciBfbWVqczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9tZWpzKTsKCiAgICAgICAgIHZhciBfZW4gPSBfZGVyZXFfKDE1KTsKCiAgICAgICAgIHZhciBfZ2VuZXJhbCA9IF9kZXJlcV8oMjcpOwoKICAgICAgICAgZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCiAgICAgICAgIHZhciBpMThuID0geyBsYW5nOiAnZW4nLCBlbjogX2VuLkVOIH07CgogICAgICAgICBpMThuLmxhbmd1YWdlID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHsKICAgICAgICAgICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldOwogICAgICAgICAgICAgfQoKICAgICAgICAgICAgIGlmIChhcmdzICE9PSBudWxsICYmIGFyZ3MgIT09IHVuZGVmaW5lZCAmJiBhcmdzLmxlbmd0aCkgewoKICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGFyZ3NbMF0gIT09ICdzdHJpbmcnKSB7CiAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0xhbmd1YWdlIGNvZGUgbXVzdCBiZSBhIHN0cmluZyB2YWx1ZScpOwogICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgaWYgKCEvXlthLXpdezIsM30oKFwtfF8pW2Etel17Mn0pPyQvaS50ZXN0KGFyZ3NbMF0pKSB7CiAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0xhbmd1YWdlIGNvZGUgbXVzdCBoYXZlIGZvcm1hdCAyLTMgbGV0dGVycyBhbmQuIG9wdGlvbmFsbHksIGh5cGhlbiwgdW5kZXJzY29yZSBmb2xsb3dlZCBieSAyIG1vcmUgbGV0dGVycycpOwogICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgaTE4bi5sYW5nID0gYXJnc1swXTsKCiAgICAgICAgICAgICAgICAgaWYgKGkxOG5bYXJnc1swXV0gPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgICAgICBhcmdzWzFdID0gYXJnc1sxXSAhPT0gbnVsbCAmJiBhcmdzWzFdICE9PSB1bmRlZmluZWQgJiYgX3R5cGVvZihhcmdzWzFdKSA9PT0gJ29iamVjdCcgPyBhcmdzWzFdIDoge307CiAgICAgICAgICAgICAgICAgICAgIGkxOG5bYXJnc1swXV0gPSAhKDAsIF9nZW5lcmFsLmlzT2JqZWN0RW1wdHkpKGFyZ3NbMV0pID8gYXJnc1sxXSA6IF9lbi5FTjsKICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGFyZ3NbMV0gIT09IG51bGwgJiYgYXJnc1sxXSAhPT0gdW5kZWZpbmVkICYmIF90eXBlb2YoYXJnc1sxXSkgPT09ICdvYmplY3QnKSB7CiAgICAgICAgICAgICAgICAgICAgIGkxOG5bYXJnc1swXV0gPSBhcmdzWzFdOwogICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICByZXR1cm4gaTE4bi5sYW5nOwogICAgICAgICB9OwoKICAgICAgICAgaTE4bi50ID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHsKICAgICAgICAgICAgIHZhciBwbHVyYWxQYXJhbSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogbnVsbDsKCgogICAgICAgICAgICAgaWYgKHR5cGVvZiBtZXNzYWdlID09PSAnc3RyaW5nJyAmJiBtZXNzYWdlLmxlbmd0aCkgewoKICAgICAgICAgICAgICAgICB2YXIgc3RyID0gdm9pZCAwLAogICAgICAgICAgICAgICAgICAgICBwbHVyYWxGb3JtID0gdm9pZCAwOwoKICAgICAgICAgICAgICAgICB2YXIgbGFuZ3VhZ2UgPSBpMThuLmxhbmd1YWdlKCk7CgogICAgICAgICAgICAgICAgIHZhciBfcGx1cmFsID0gZnVuY3Rpb24gX3BsdXJhbChpbnB1dCwgbnVtYmVyLCBmb3JtKSB7CgogICAgICAgICAgICAgICAgICAgICBpZiAoKHR5cGVvZiBpbnB1dCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoaW5wdXQpKSAhPT0gJ29iamVjdCcgfHwgdHlwZW9mIG51bWJlciAhPT0gJ251bWJlcicgfHwgdHlwZW9mIGZvcm0gIT09ICdudW1iZXInKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW5wdXQ7CiAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgIHZhciBfcGx1cmFsRm9ybXMgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW2Z1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA8PSAxID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzFdOwogICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoYXJndW1lbnRzLmxlbmd0aCA8PSAwID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzBdKSA9PT0gMSA/IGFyZ3VtZW50cy5sZW5ndGggPD0gMSA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1sxXSA6IGFyZ3VtZW50cy5sZW5ndGggPD0gMiA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1syXTsKICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGFyZ3VtZW50cy5sZW5ndGggPD0gMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXSkgPT09IDAgfHwgKGFyZ3VtZW50cy5sZW5ndGggPD0gMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXSkgPT09IDEgPyBhcmd1bWVudHMubGVuZ3RoIDw9IDEgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMV0gOiBhcmd1bWVudHMubGVuZ3RoIDw9IDIgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMl07CiAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChhcmd1bWVudHMubGVuZ3RoIDw9IDAgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMF0pICUgMTAgPT09IDEgJiYgKGFyZ3VtZW50cy5sZW5ndGggPD0gMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXSkgJSAxMDAgIT09IDExKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoIDw9IDEgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMV07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICgoYXJndW1lbnRzLmxlbmd0aCA8PSAwID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzBdKSAhPT0gMCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA8PSAyID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzJdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoIDw9IDMgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbM107CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoYXJndW1lbnRzLmxlbmd0aCA8PSAwID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzBdKSA9PT0gMSB8fCAoYXJndW1lbnRzLmxlbmd0aCA8PSAwID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzBdKSA9PT0gMTEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPD0gMSA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1sxXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKChhcmd1bWVudHMubGVuZ3RoIDw9IDAgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMF0pID09PSAyIHx8IChhcmd1bWVudHMubGVuZ3RoIDw9IDAgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMF0pID09PSAxMikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA8PSAyID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzJdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoKGFyZ3VtZW50cy5sZW5ndGggPD0gMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXSkgPiAyICYmIChhcmd1bWVudHMubGVuZ3RoIDw9IDAgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMF0pIDwgMjApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPD0gMyA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1szXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA8PSA0ID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzRdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoKGFyZ3VtZW50cy5sZW5ndGggPD0gMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXSkgPT09IDEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPD0gMSA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1sxXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKChhcmd1bWVudHMubGVuZ3RoIDw9IDAgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMF0pID09PSAwIHx8IChhcmd1bWVudHMubGVuZ3RoIDw9IDAgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMF0pICUgMTAwID4gMCAmJiAoYXJndW1lbnRzLmxlbmd0aCA8PSAwID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzBdKSAlIDEwMCA8IDIwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoIDw9IDIgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMl07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPD0gMyA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1szXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChhcmd1bWVudHMubGVuZ3RoIDw9IDAgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMF0pICUgMTAgPT09IDEgJiYgKGFyZ3VtZW50cy5sZW5ndGggPD0gMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXSkgJSAxMDAgIT09IDExKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoIDw9IDEgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMV07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICgoYXJndW1lbnRzLmxlbmd0aCA8PSAwID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzBdKSAlIDEwID49IDIgJiYgKChhcmd1bWVudHMubGVuZ3RoIDw9IDAgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMF0pICUgMTAwIDwgMTAgfHwgKGFyZ3VtZW50cy5sZW5ndGggPD0gMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXSkgJSAxMDAgPj0gMjApKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoIDw9IDIgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMl07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChhcmd1bWVudHMubGVuZ3RoIDw9IDAgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMF0pICUgMTAgPT09IDEgJiYgKGFyZ3VtZW50cy5sZW5ndGggPD0gMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXSkgJSAxMDAgIT09IDExKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoIDw9IDEgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMV07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICgoYXJndW1lbnRzLmxlbmd0aCA8PSAwID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzBdKSAlIDEwID49IDIgJiYgKGFyZ3VtZW50cy5sZW5ndGggPD0gMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXSkgJSAxMCA8PSA0ICYmICgoYXJndW1lbnRzLmxlbmd0aCA8PSAwID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzBdKSAlIDEwMCA8IDEwIHx8IChhcmd1bWVudHMubGVuZ3RoIDw9IDAgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMF0pICUgMTAwID49IDIwKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA8PSAyID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzJdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoIDw9IDMgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbM107CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoYXJndW1lbnRzLmxlbmd0aCA8PSAwID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzBdKSA9PT0gMSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA8PSAxID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzFdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoKGFyZ3VtZW50cy5sZW5ndGggPD0gMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXSkgPj0gMiAmJiAoYXJndW1lbnRzLmxlbmd0aCA8PSAwID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzBdKSA8PSA0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoIDw9IDIgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMl07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPD0gMyA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1szXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChhcmd1bWVudHMubGVuZ3RoIDw9IDAgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMF0pID09PSAxKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoIDw9IDEgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMV07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICgoYXJndW1lbnRzLmxlbmd0aCA8PSAwID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzBdKSAlIDEwID49IDIgJiYgKGFyZ3VtZW50cy5sZW5ndGggPD0gMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXSkgJSAxMCA8PSA0ICYmICgoYXJndW1lbnRzLmxlbmd0aCA8PSAwID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzBdKSAlIDEwMCA8IDEwIHx8IChhcmd1bWVudHMubGVuZ3RoIDw9IDAgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMF0pICUgMTAwID49IDIwKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA8PSAyID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzJdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoIDw9IDMgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbM107CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoYXJndW1lbnRzLmxlbmd0aCA8PSAwID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzBdKSAlIDEwMCA9PT0gMSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA8PSAyID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzJdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoKGFyZ3VtZW50cy5sZW5ndGggPD0gMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXSkgJSAxMDAgPT09IDIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPD0gMyA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1szXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKChhcmd1bWVudHMubGVuZ3RoIDw9IDAgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMF0pICUgMTAwID09PSAzIHx8IChhcmd1bWVudHMubGVuZ3RoIDw9IDAgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMF0pICUgMTAwID09PSA0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoIDw9IDQgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbNF07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPD0gMSA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1sxXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChhcmd1bWVudHMubGVuZ3RoIDw9IDAgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMF0pID09PSAxKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoIDw9IDEgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMV07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICgoYXJndW1lbnRzLmxlbmd0aCA8PSAwID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzBdKSA9PT0gMikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA8PSAyID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzJdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoKGFyZ3VtZW50cy5sZW5ndGggPD0gMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXSkgPiAyICYmIChhcmd1bWVudHMubGVuZ3RoIDw9IDAgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMF0pIDwgNykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA8PSAzID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzNdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoKGFyZ3VtZW50cy5sZW5ndGggPD0gMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXSkgPiA2ICYmIChhcmd1bWVudHMubGVuZ3RoIDw9IDAgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMF0pIDwgMTEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPD0gNCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1s0XTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA8PSA1ID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzVdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoKGFyZ3VtZW50cy5sZW5ndGggPD0gMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXSkgPT09IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPD0gMSA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1sxXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKChhcmd1bWVudHMubGVuZ3RoIDw9IDAgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMF0pID09PSAxKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoIDw9IDIgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMl07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICgoYXJndW1lbnRzLmxlbmd0aCA8PSAwID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzBdKSA9PT0gMikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA8PSAzID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzNdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoKGFyZ3VtZW50cy5sZW5ndGggPD0gMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXSkgJSAxMDAgPj0gMyAmJiAoYXJndW1lbnRzLmxlbmd0aCA8PSAwID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzBdKSAlIDEwMCA8PSAxMCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA8PSA0ID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzRdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoKGFyZ3VtZW50cy5sZW5ndGggPD0gMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXSkgJSAxMDAgPj0gMTEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPD0gNSA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1s1XTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA8PSA2ID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzZdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoKGFyZ3VtZW50cy5sZW5ndGggPD0gMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXSkgPT09IDEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPD0gMSA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1sxXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKChhcmd1bWVudHMubGVuZ3RoIDw9IDAgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMF0pID09PSAwIHx8IChhcmd1bWVudHMubGVuZ3RoIDw9IDAgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMF0pICUgMTAwID4gMSAmJiAoYXJndW1lbnRzLmxlbmd0aCA8PSAwID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzBdKSAlIDEwMCA8IDExKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoIDw9IDIgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMl07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICgoYXJndW1lbnRzLmxlbmd0aCA8PSAwID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzBdKSAlIDEwMCA+IDEwICYmIChhcmd1bWVudHMubGVuZ3RoIDw9IDAgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMF0pICUgMTAwIDwgMjApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPD0gMyA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1szXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA8PSA0ID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzRdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoKGFyZ3VtZW50cy5sZW5ndGggPD0gMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXSkgJSAxMCA9PT0gMSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA8PSAxID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzFdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoKGFyZ3VtZW50cy5sZW5ndGggPD0gMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXSkgJSAxMCA9PT0gMikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA8PSAyID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzJdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoIDw9IDMgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbM107CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoYXJndW1lbnRzLmxlbmd0aCA8PSAwID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzBdKSAhPT0gMTEgJiYgKGFyZ3VtZW50cy5sZW5ndGggPD0gMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXSkgJSAxMCA9PT0gMSA/IGFyZ3VtZW50cy5sZW5ndGggPD0gMSA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1sxXSA6IGFyZ3VtZW50cy5sZW5ndGggPD0gMiA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1syXTsKICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoKGFyZ3VtZW50cy5sZW5ndGggPD0gMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXSkgPT09IDEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPD0gMSA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1sxXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKChhcmd1bWVudHMubGVuZ3RoIDw9IDAgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMF0pICUgMTAgPj0gMiAmJiAoYXJndW1lbnRzLmxlbmd0aCA8PSAwID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzBdKSAlIDEwIDw9IDQgJiYgKChhcmd1bWVudHMubGVuZ3RoIDw9IDAgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMF0pICUgMTAwIDwgMTAgfHwgKGFyZ3VtZW50cy5sZW5ndGggPD0gMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXSkgJSAxMDAgPj0gMjApKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoIDw9IDIgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMl07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPD0gMyA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1szXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChhcmd1bWVudHMubGVuZ3RoIDw9IDAgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMF0pID09PSAxKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoIDw9IDEgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMV07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICgoYXJndW1lbnRzLmxlbmd0aCA8PSAwID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzBdKSA9PT0gMikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA8PSAyID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzJdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoKGFyZ3VtZW50cy5sZW5ndGggPD0gMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXSkgIT09IDggJiYgKGFyZ3VtZW50cy5sZW5ndGggPD0gMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXSkgIT09IDExKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoIDw9IDMgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbM107CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPD0gNCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1s0XTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChhcmd1bWVudHMubGVuZ3RoIDw9IDAgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMF0pID09PSAwID8gYXJndW1lbnRzLmxlbmd0aCA8PSAxID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzFdIDogYXJndW1lbnRzLmxlbmd0aCA8PSAyID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzJdOwogICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoYXJndW1lbnRzLmxlbmd0aCA8PSAwID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzBdKSA9PT0gMSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA8PSAxID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzFdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoKGFyZ3VtZW50cy5sZW5ndGggPD0gMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXSkgPT09IDIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPD0gMiA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1syXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKChhcmd1bWVudHMubGVuZ3RoIDw9IDAgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMF0pID09PSAzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoIDw9IDMgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbM107CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPD0gNCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1s0XTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChhcmd1bWVudHMubGVuZ3RoIDw9IDAgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMF0pID09PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoIDw9IDEgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMV07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICgoYXJndW1lbnRzLmxlbmd0aCA8PSAwID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzBdKSA9PT0gMSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA8PSAyID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzJdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhcmd1bWVudHMubGVuZ3RoIDw9IDMgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbM107CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgfV07CiAgICAgICAgICAgICAgICAgICAgIH0oKTsKCiAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfcGx1cmFsRm9ybXNbZm9ybV0uYXBwbHkobnVsbCwgW251bWJlcl0uY29uY2F0KGlucHV0KSk7CiAgICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICAgaWYgKGkxOG5bbGFuZ3VhZ2VdICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgICAgICAgc3RyID0gaTE4bltsYW5ndWFnZV1bbWVzc2FnZV07CiAgICAgICAgICAgICAgICAgICAgIGlmIChwbHVyYWxQYXJhbSAhPT0gbnVsbCAmJiB0eXBlb2YgcGx1cmFsUGFyYW0gPT09ICdudW1iZXInKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICBwbHVyYWxGb3JtID0gaTE4bltsYW5ndWFnZV1bJ21lanMucGx1cmFsLWZvcm0nXTsKICAgICAgICAgICAgICAgICAgICAgICAgIHN0ciA9IF9wbHVyYWwuYXBwbHkobnVsbCwgW3N0ciwgcGx1cmFsUGFyYW0sIHBsdXJhbEZvcm1dKTsKICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgaWYgKCFzdHIgJiYgaTE4bi5lbikgewogICAgICAgICAgICAgICAgICAgICBzdHIgPSBpMThuLmVuW21lc3NhZ2VdOwogICAgICAgICAgICAgICAgICAgICBpZiAocGx1cmFsUGFyYW0gIT09IG51bGwgJiYgdHlwZW9mIHBsdXJhbFBhcmFtID09PSAnbnVtYmVyJykgewogICAgICAgICAgICAgICAgICAgICAgICAgcGx1cmFsRm9ybSA9IGkxOG4uZW5bJ21lanMucGx1cmFsLWZvcm0nXTsKICAgICAgICAgICAgICAgICAgICAgICAgIHN0ciA9IF9wbHVyYWwuYXBwbHkobnVsbCwgW3N0ciwgcGx1cmFsUGFyYW0sIHBsdXJhbEZvcm1dKTsKICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgc3RyID0gc3RyIHx8IG1lc3NhZ2U7CgogICAgICAgICAgICAgICAgIGlmIChwbHVyYWxQYXJhbSAhPT0gbnVsbCAmJiB0eXBlb2YgcGx1cmFsUGFyYW0gPT09ICdudW1iZXInKSB7CiAgICAgICAgICAgICAgICAgICAgIHN0ciA9IHN0ci5yZXBsYWNlKCclMScsIHBsdXJhbFBhcmFtKTsKICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgIHJldHVybiAoMCwgX2dlbmVyYWwuZXNjYXBlSFRNTCkoc3RyKTsKICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICByZXR1cm4gbWVzc2FnZTsKICAgICAgICAgfTsKCiAgICAgICAgIF9tZWpzMi5kZWZhdWx0LmkxOG4gPSBpMThuOwoKICAgICAgICAgaWYgKHR5cGVvZiBtZWpzTDEwbiAhPT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICAgICAgIF9tZWpzMi5kZWZhdWx0LmkxOG4ubGFuZ3VhZ2UobWVqc0wxMG4ubGFuZ3VhZ2UsIG1lanNMMTBuLnN0cmluZ3MpOwogICAgICAgICB9CgogICAgICAgICBleHBvcnRzLmRlZmF1bHQgPSBpMThuOwoKICAgICB9LCB7ICIxNSI6IDE1LCAiMjciOiAyNywgIjciOiA3IH1dLCA2OiBbZnVuY3Rpb24gKF9kZXJlcV8sIG1vZHVsZSwgZXhwb3J0cykgewogICAgICAgICAndXNlIHN0cmljdCc7CgogICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgICAgICAgICAgICB2YWx1ZTogdHJ1ZQogICAgICAgICB9KTsKCiAgICAgICAgIHZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAic3ltYm9sIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IHR5cGVvZiBvYmo7IH07CgogICAgICAgICB2YXIgX3dpbmRvdyA9IF9kZXJlcV8oMyk7CgogICAgICAgICB2YXIgX3dpbmRvdzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93aW5kb3cpOwoKICAgICAgICAgdmFyIF9kb2N1bWVudCA9IF9kZXJlcV8oMik7CgogICAgICAgICB2YXIgX2RvY3VtZW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RvY3VtZW50KTsKCiAgICAgICAgIHZhciBfbWVqcyA9IF9kZXJlcV8oNyk7CgogICAgICAgICB2YXIgX21lanMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbWVqcyk7CgogICAgICAgICB2YXIgX2dlbmVyYWwgPSBfZGVyZXFfKDI3KTsKCiAgICAgICAgIHZhciBfbWVkaWEyID0gX2RlcmVxXygyOCk7CgogICAgICAgICB2YXIgX3JlbmRlcmVyID0gX2RlcmVxXyg4KTsKCiAgICAgICAgIHZhciBfY29uc3RhbnRzID0gX2RlcmVxXygyNSk7CgogICAgICAgICBmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKICAgICAgICAgZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgogICAgICAgICB2YXIgTWVkaWFFbGVtZW50ID0gZnVuY3Rpb24gTWVkaWFFbGVtZW50KGlkT3JOb2RlLCBvcHRpb25zLCBzb3VyY2VzKSB7CiAgICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBNZWRpYUVsZW1lbnQpOwoKICAgICAgICAgICAgIHZhciB0ID0gdGhpczsKCiAgICAgICAgICAgICBzb3VyY2VzID0gQXJyYXkuaXNBcnJheShzb3VyY2VzKSA/IHNvdXJjZXMgOiBudWxsOwoKICAgICAgICAgICAgIHQuZGVmYXVsdHMgPSB7CiAgICAgICAgICAgICAgICAgcmVuZGVyZXJzOiBbXSwKCiAgICAgICAgICAgICAgICAgZmFrZU5vZGVOYW1lOiAnbWVkaWFlbGVtZW50d3JhcHBlcicsCgogICAgICAgICAgICAgICAgIHBsdWdpblBhdGg6ICdidWlsZC8nLAoKICAgICAgICAgICAgICAgICBzaGltU2NyaXB0QWNjZXNzOiAnc2FtZURvbWFpbicKICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24odC5kZWZhdWx0cywgb3B0aW9ucyk7CgogICAgICAgICAgICAgdC5tZWRpYUVsZW1lbnQgPSBfZG9jdW1lbnQyLmRlZmF1bHQuY3JlYXRlRWxlbWVudChvcHRpb25zLmZha2VOb2RlTmFtZSk7CgogICAgICAgICAgICAgdmFyIGlkID0gaWRPck5vZGUsCiAgICAgICAgICAgICAgICAgZXJyb3IgPSBmYWxzZTsKCiAgICAgICAgICAgICBpZiAodHlwZW9mIGlkT3JOb2RlID09PSAnc3RyaW5nJykgewogICAgICAgICAgICAgICAgIHQubWVkaWFFbGVtZW50Lm9yaWdpbmFsTm9kZSA9IF9kb2N1bWVudDIuZGVmYXVsdC5nZXRFbGVtZW50QnlJZChpZE9yTm9kZSk7CiAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgIHQubWVkaWFFbGVtZW50Lm9yaWdpbmFsTm9kZSA9IGlkT3JOb2RlOwogICAgICAgICAgICAgICAgIGlkID0gaWRPck5vZGUuaWQ7CiAgICAgICAgICAgICB9CgogICAgICAgICAgICAgaWYgKHQubWVkaWFFbGVtZW50Lm9yaWdpbmFsTm9kZSA9PT0gdW5kZWZpbmVkIHx8IHQubWVkaWFFbGVtZW50Lm9yaWdpbmFsTm9kZSA9PT0gbnVsbCkgewogICAgICAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgICAgICAgfQoKICAgICAgICAgICAgIHQubWVkaWFFbGVtZW50Lm9wdGlvbnMgPSBvcHRpb25zOwogICAgICAgICAgICAgaWQgPSBpZCB8fCAnbWVqc18nICsgTWF0aC5yYW5kb20oKS50b1N0cmluZygpLnNsaWNlKDIpOwoKICAgICAgICAgICAgIHQubWVkaWFFbGVtZW50Lm9yaWdpbmFsTm9kZS5zZXRBdHRyaWJ1dGUoJ2lkJywgaWQgKyAnX2Zyb21fbWVqcycpOwoKICAgICAgICAgICAgIHZhciB0YWdOYW1lID0gdC5tZWRpYUVsZW1lbnQub3JpZ2luYWxOb2RlLnRhZ05hbWUudG9Mb3dlckNhc2UoKTsKICAgICAgICAgICAgIGlmIChbJ3ZpZGVvJywgJ2F1ZGlvJ10uaW5kZXhPZih0YWdOYW1lKSA+IC0xICYmICF0Lm1lZGlhRWxlbWVudC5vcmlnaW5hbE5vZGUuZ2V0QXR0cmlidXRlKCdwcmVsb2FkJykpIHsKICAgICAgICAgICAgICAgICB0Lm1lZGlhRWxlbWVudC5vcmlnaW5hbE5vZGUuc2V0QXR0cmlidXRlKCdwcmVsb2FkJywgJ25vbmUnKTsKICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICB0Lm1lZGlhRWxlbWVudC5vcmlnaW5hbE5vZGUucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodC5tZWRpYUVsZW1lbnQsIHQubWVkaWFFbGVtZW50Lm9yaWdpbmFsTm9kZSk7CgogICAgICAgICAgICAgdC5tZWRpYUVsZW1lbnQuYXBwZW5kQ2hpbGQodC5tZWRpYUVsZW1lbnQub3JpZ2luYWxOb2RlKTsKCiAgICAgICAgICAgICB2YXIgcHJvY2Vzc1VSTCA9IGZ1bmN0aW9uIHByb2Nlc3NVUkwodXJsLCB0eXBlKSB7CiAgICAgICAgICAgICAgICAgaWYgKF93aW5kb3cyLmRlZmF1bHQubG9jYXRpb24ucHJvdG9jb2wgPT09ICdodHRwczonICYmIHVybC5pbmRleE9mKCdodHRwOicpID09PSAwICYmIF9jb25zdGFudHMuSVNfSU9TICYmIF9tZWpzMi5kZWZhdWx0Lmh0bWw1bWVkaWEubWVkaWFUeXBlcy5pbmRleE9mKHR5cGUpID4gLTEpIHsKICAgICAgICAgICAgICAgICAgICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpOwogICAgICAgICAgICAgICAgICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucmVhZHlTdGF0ZSA9PT0gNCAmJiB0aGlzLnN0YXR1cyA9PT0gMjAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF91cmwgPSBfd2luZG93Mi5kZWZhdWx0LlVSTCB8fCBfd2luZG93Mi5kZWZhdWx0LndlYmtpdFVSTCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmxvYlVybCA9IF91cmwuY3JlYXRlT2JqZWN0VVJMKHRoaXMucmVzcG9uc2UpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQubWVkaWFFbGVtZW50Lm9yaWdpbmFsTm9kZS5zZXRBdHRyaWJ1dGUoJ3NyYycsIGJsb2JVcmwpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBibG9iVXJsOwogICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVybDsKICAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICAgeGhyLm9wZW4oJ0dFVCcsIHVybCk7CiAgICAgICAgICAgICAgICAgICAgIHhoci5yZXNwb25zZVR5cGUgPSAnYmxvYic7CiAgICAgICAgICAgICAgICAgICAgIHhoci5zZW5kKCk7CiAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICByZXR1cm4gdXJsOwogICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICB2YXIgbWVkaWFGaWxlcyA9IHZvaWQgMDsKCiAgICAgICAgICAgICBpZiAoc291cmNlcyAhPT0gbnVsbCkgewogICAgICAgICAgICAgICAgIG1lZGlhRmlsZXMgPSBzb3VyY2VzOwogICAgICAgICAgICAgfSBlbHNlIGlmICh0Lm1lZGlhRWxlbWVudC5vcmlnaW5hbE5vZGUgIT09IG51bGwpIHsKCiAgICAgICAgICAgICAgICAgbWVkaWFGaWxlcyA9IFtdOwoKICAgICAgICAgICAgICAgICBzd2l0Y2ggKHQubWVkaWFFbGVtZW50Lm9yaWdpbmFsTm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpKSB7CiAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2lmcmFtZSc6CiAgICAgICAgICAgICAgICAgICAgICAgICBtZWRpYUZpbGVzLnB1c2goewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICcnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyYzogdC5tZWRpYUVsZW1lbnQub3JpZ2luYWxOb2RlLmdldEF0dHJpYnV0ZSgnc3JjJykKICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2F1ZGlvJzoKICAgICAgICAgICAgICAgICAgICAgY2FzZSAndmlkZW8nOgogICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9zb3VyY2VzID0gdC5tZWRpYUVsZW1lbnQub3JpZ2luYWxOb2RlLmNoaWxkcmVuLmxlbmd0aCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlU291cmNlID0gdC5tZWRpYUVsZW1lbnQub3JpZ2luYWxOb2RlLmdldEF0dHJpYnV0ZSgnc3JjJyk7CgogICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5vZGVTb3VyY2UpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbm9kZSA9IHQubWVkaWFFbGVtZW50Lm9yaWdpbmFsTm9kZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZSA9ICgwLCBfbWVkaWEyLmZvcm1hdFR5cGUpKG5vZGVTb3VyY2UsIG5vZGUuZ2V0QXR0cmlidXRlKCd0eXBlJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lZGlhRmlsZXMucHVzaCh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IHR5cGUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyYzogcHJvY2Vzc1VSTChub2RlU291cmNlLCB0eXBlKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgX3NvdXJjZXM7IGkrKykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuID0gdC5tZWRpYUVsZW1lbnQub3JpZ2luYWxOb2RlLmNoaWxkcmVuW2ldOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuLnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ3NvdXJjZScpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNyYyA9IG4uZ2V0QXR0cmlidXRlKCdzcmMnKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90eXBlID0gKDAsIF9tZWRpYTIuZm9ybWF0VHlwZSkoc3JjLCBuLmdldEF0dHJpYnV0ZSgndHlwZScpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVkaWFGaWxlcy5wdXNoKHsgdHlwZTogX3R5cGUsIHNyYzogcHJvY2Vzc1VSTChzcmMsIF90eXBlKSB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICB9CgogICAgICAgICAgICAgdC5tZWRpYUVsZW1lbnQuaWQgPSBpZDsKICAgICAgICAgICAgIHQubWVkaWFFbGVtZW50LnJlbmRlcmVycyA9IHt9OwogICAgICAgICAgICAgdC5tZWRpYUVsZW1lbnQuZXZlbnRzID0ge307CiAgICAgICAgICAgICB0Lm1lZGlhRWxlbWVudC5wcm9taXNlcyA9IFtdOwogICAgICAgICAgICAgdC5tZWRpYUVsZW1lbnQucmVuZGVyZXIgPSBudWxsOwogICAgICAgICAgICAgdC5tZWRpYUVsZW1lbnQucmVuZGVyZXJOYW1lID0gbnVsbDsKCiAgICAgICAgICAgICB0Lm1lZGlhRWxlbWVudC5jaGFuZ2VSZW5kZXJlciA9IGZ1bmN0aW9uIChyZW5kZXJlck5hbWUsIG1lZGlhRmlsZXMpIHsKCiAgICAgICAgICAgICAgICAgdmFyIHQgPSBfdGhpcywKICAgICAgICAgICAgICAgICAgICAgbWVkaWEgPSBPYmplY3Qua2V5cyhtZWRpYUZpbGVzWzBdKS5sZW5ndGggPiAyID8gbWVkaWFGaWxlc1swXSA6IG1lZGlhRmlsZXNbMF0uc3JjOwoKICAgICAgICAgICAgICAgICBpZiAodC5tZWRpYUVsZW1lbnQucmVuZGVyZXIgIT09IHVuZGVmaW5lZCAmJiB0Lm1lZGlhRWxlbWVudC5yZW5kZXJlciAhPT0gbnVsbCAmJiB0Lm1lZGlhRWxlbWVudC5yZW5kZXJlci5uYW1lID09PSByZW5kZXJlck5hbWUpIHsKICAgICAgICAgICAgICAgICAgICAgdC5tZWRpYUVsZW1lbnQucmVuZGVyZXIucGF1c2UoKTsKICAgICAgICAgICAgICAgICAgICAgaWYgKHQubWVkaWFFbGVtZW50LnJlbmRlcmVyLnN0b3ApIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHQubWVkaWFFbGVtZW50LnJlbmRlcmVyLnN0b3AoKTsKICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICB0Lm1lZGlhRWxlbWVudC5yZW5kZXJlci5zaG93KCk7CiAgICAgICAgICAgICAgICAgICAgIHQubWVkaWFFbGVtZW50LnJlbmRlcmVyLnNldFNyYyhtZWRpYSk7CiAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgaWYgKHQubWVkaWFFbGVtZW50LnJlbmRlcmVyICE9PSB1bmRlZmluZWQgJiYgdC5tZWRpYUVsZW1lbnQucmVuZGVyZXIgIT09IG51bGwpIHsKICAgICAgICAgICAgICAgICAgICAgdC5tZWRpYUVsZW1lbnQucmVuZGVyZXIucGF1c2UoKTsKICAgICAgICAgICAgICAgICAgICAgaWYgKHQubWVkaWFFbGVtZW50LnJlbmRlcmVyLnN0b3ApIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHQubWVkaWFFbGVtZW50LnJlbmRlcmVyLnN0b3AoKTsKICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICB0Lm1lZGlhRWxlbWVudC5yZW5kZXJlci5oaWRlKCk7CiAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICB2YXIgbmV3UmVuZGVyZXIgPSB0Lm1lZGlhRWxlbWVudC5yZW5kZXJlcnNbcmVuZGVyZXJOYW1lXSwKICAgICAgICAgICAgICAgICAgICAgbmV3UmVuZGVyZXJUeXBlID0gbnVsbDsKCiAgICAgICAgICAgICAgICAgaWYgKG5ld1JlbmRlcmVyICE9PSB1bmRlZmluZWQgJiYgbmV3UmVuZGVyZXIgIT09IG51bGwpIHsKICAgICAgICAgICAgICAgICAgICAgbmV3UmVuZGVyZXIuc2hvdygpOwogICAgICAgICAgICAgICAgICAgICBuZXdSZW5kZXJlci5zZXRTcmMobWVkaWEpOwogICAgICAgICAgICAgICAgICAgICB0Lm1lZGlhRWxlbWVudC5yZW5kZXJlciA9IG5ld1JlbmRlcmVyOwogICAgICAgICAgICAgICAgICAgICB0Lm1lZGlhRWxlbWVudC5yZW5kZXJlck5hbWUgPSByZW5kZXJlck5hbWU7CiAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgdmFyIHJlbmRlcmVyQXJyYXkgPSB0Lm1lZGlhRWxlbWVudC5vcHRpb25zLnJlbmRlcmVycy5sZW5ndGggPyB0Lm1lZGlhRWxlbWVudC5vcHRpb25zLnJlbmRlcmVycyA6IF9yZW5kZXJlci5yZW5kZXJlci5vcmRlcjsKCiAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCB0b3RhbCA9IHJlbmRlcmVyQXJyYXkubGVuZ3RoOyBfaSA8IHRvdGFsOyBfaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IHJlbmRlcmVyQXJyYXlbX2ldOwoKICAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4ID09PSByZW5kZXJlck5hbWUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZW5kZXJlckxpc3QgPSBfcmVuZGVyZXIucmVuZGVyZXIucmVuZGVyZXJzOwogICAgICAgICAgICAgICAgICAgICAgICAgbmV3UmVuZGVyZXJUeXBlID0gcmVuZGVyZXJMaXN0W2luZGV4XTsKCiAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVuZGVyT3B0aW9ucyA9IE9iamVjdC5hc3NpZ24obmV3UmVuZGVyZXJUeXBlLm9wdGlvbnMsIHQubWVkaWFFbGVtZW50Lm9wdGlvbnMpOwogICAgICAgICAgICAgICAgICAgICAgICAgbmV3UmVuZGVyZXIgPSBuZXdSZW5kZXJlclR5cGUuY3JlYXRlKHQubWVkaWFFbGVtZW50LCByZW5kZXJPcHRpb25zLCBtZWRpYUZpbGVzKTsKICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1JlbmRlcmVyLm5hbWUgPSByZW5kZXJlck5hbWU7CgogICAgICAgICAgICAgICAgICAgICAgICAgdC5tZWRpYUVsZW1lbnQucmVuZGVyZXJzW25ld1JlbmRlcmVyVHlwZS5uYW1lXSA9IG5ld1JlbmRlcmVyOwogICAgICAgICAgICAgICAgICAgICAgICAgdC5tZWRpYUVsZW1lbnQucmVuZGVyZXIgPSBuZXdSZW5kZXJlcjsKICAgICAgICAgICAgICAgICAgICAgICAgIHQubWVkaWFFbGVtZW50LnJlbmRlcmVyTmFtZSA9IHJlbmRlcmVyTmFtZTsKICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1JlbmRlcmVyLnNob3coKTsKICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgIHQubWVkaWFFbGVtZW50LnNldFNpemUgPSBmdW5jdGlvbiAod2lkdGgsIGhlaWdodCkgewogICAgICAgICAgICAgICAgIGlmICh0Lm1lZGlhRWxlbWVudC5yZW5kZXJlciAhPT0gdW5kZWZpbmVkICYmIHQubWVkaWFFbGVtZW50LnJlbmRlcmVyICE9PSBudWxsKSB7CiAgICAgICAgICAgICAgICAgICAgIHQubWVkaWFFbGVtZW50LnJlbmRlcmVyLnNldFNpemUod2lkdGgsIGhlaWdodCk7CiAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICB0Lm1lZGlhRWxlbWVudC5nZW5lcmF0ZUVycm9yID0gZnVuY3Rpb24gKG1lc3NhZ2UsIHVybExpc3QpIHsKICAgICAgICAgICAgICAgICBtZXNzYWdlID0gbWVzc2FnZSB8fCAnJzsKICAgICAgICAgICAgICAgICB1cmxMaXN0ID0gQXJyYXkuaXNBcnJheSh1cmxMaXN0KSA/IHVybExpc3QgOiBbXTsKICAgICAgICAgICAgICAgICB2YXIgZXZlbnQgPSAoMCwgX2dlbmVyYWwuY3JlYXRlRXZlbnQpKCdlcnJvcicsIHQubWVkaWFFbGVtZW50KTsKICAgICAgICAgICAgICAgICBldmVudC5tZXNzYWdlID0gbWVzc2FnZTsKICAgICAgICAgICAgICAgICBldmVudC51cmxzID0gdXJsTGlzdDsKICAgICAgICAgICAgICAgICB0Lm1lZGlhRWxlbWVudC5kaXNwYXRjaEV2ZW50KGV2ZW50KTsKICAgICAgICAgICAgICAgICBlcnJvciA9IHRydWU7CiAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgIHZhciBwcm9wcyA9IF9tZWpzMi5kZWZhdWx0Lmh0bWw1bWVkaWEucHJvcGVydGllcywKICAgICAgICAgICAgICAgICBtZXRob2RzID0gX21lanMyLmRlZmF1bHQuaHRtbDVtZWRpYS5tZXRob2RzLAogICAgICAgICAgICAgICAgIGFkZFByb3BlcnR5ID0gZnVuY3Rpb24gYWRkUHJvcGVydHkob2JqLCBuYW1lLCBvbkdldCwgb25TZXQpIHsKICAgICAgICAgICAgICAgICAgICAgdmFyIG9sZFZhbHVlID0gb2JqW25hbWVdOwogICAgICAgICAgICAgICAgICAgICB2YXIgZ2V0Rm4gPSBmdW5jdGlvbiBnZXRGbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvbkdldC5hcHBseShvYmosIFtvbGRWYWx1ZV0pOwogICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgc2V0Rm4gPSBmdW5jdGlvbiBzZXRGbihuZXdWYWx1ZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9sZFZhbHVlID0gb25TZXQuYXBwbHkob2JqLCBbbmV3VmFsdWVdKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2xkVmFsdWU7CiAgICAgICAgICAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwgbmFtZSwgewogICAgICAgICAgICAgICAgICAgICAgICAgZ2V0OiBnZXRGbiwKICAgICAgICAgICAgICAgICAgICAgICAgIHNldDogc2V0Rm4KICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICBhc3NpZ25HZXR0ZXJzU2V0dGVycyA9IGZ1bmN0aW9uIGFzc2lnbkdldHRlcnNTZXR0ZXJzKHByb3BOYW1lKSB7CiAgICAgICAgICAgICAgICAgICAgIGlmIChwcm9wTmFtZSAhPT0gJ3NyYycpIHsKCiAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2FwTmFtZSA9ICcnICsgcHJvcE5hbWUuc3Vic3RyaW5nKDAsIDEpLnRvVXBwZXJDYXNlKCkgKyBwcm9wTmFtZS5zdWJzdHJpbmcoMSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0Rm4gPSBmdW5jdGlvbiBnZXRGbigpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQubWVkaWFFbGVtZW50LnJlbmRlcmVyICE9PSB1bmRlZmluZWQgJiYgdC5tZWRpYUVsZW1lbnQucmVuZGVyZXIgIT09IG51bGwgJiYgdHlwZW9mIHQubWVkaWFFbGVtZW50LnJlbmRlcmVyWydnZXQnICsgY2FwTmFtZV0gPT09ICdmdW5jdGlvbicgPyB0Lm1lZGlhRWxlbWVudC5yZW5kZXJlclsnZ2V0JyArIGNhcE5hbWVdKCkgOiBudWxsOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0Rm4gPSBmdW5jdGlvbiBzZXRGbih2YWx1ZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodC5tZWRpYUVsZW1lbnQucmVuZGVyZXIgIT09IHVuZGVmaW5lZCAmJiB0Lm1lZGlhRWxlbWVudC5yZW5kZXJlciAhPT0gbnVsbCAmJiB0eXBlb2YgdC5tZWRpYUVsZW1lbnQucmVuZGVyZXJbJ3NldCcgKyBjYXBOYW1lXSA9PT0gJ2Z1bmN0aW9uJykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5tZWRpYUVsZW1lbnQucmVuZGVyZXJbJ3NldCcgKyBjYXBOYW1lXSh2YWx1ZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgICAgICAgICAgIGFkZFByb3BlcnR5KHQubWVkaWFFbGVtZW50LCBwcm9wTmFtZSwgZ2V0Rm4sIHNldEZuKTsKICAgICAgICAgICAgICAgICAgICAgICAgIHQubWVkaWFFbGVtZW50WydnZXQnICsgY2FwTmFtZV0gPSBnZXRGbjsKICAgICAgICAgICAgICAgICAgICAgICAgIHQubWVkaWFFbGVtZW50WydzZXQnICsgY2FwTmFtZV0gPSBzZXRGbjsKICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgZ2V0U3JjID0gZnVuY3Rpb24gZ2V0U3JjKCkgewogICAgICAgICAgICAgICAgICAgICByZXR1cm4gdC5tZWRpYUVsZW1lbnQucmVuZGVyZXIgIT09IHVuZGVmaW5lZCAmJiB0Lm1lZGlhRWxlbWVudC5yZW5kZXJlciAhPT0gbnVsbCA/IHQubWVkaWFFbGVtZW50LnJlbmRlcmVyLmdldFNyYygpIDogbnVsbDsKICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgIHNldFNyYyA9IGZ1bmN0aW9uIHNldFNyYyh2YWx1ZSkgewogICAgICAgICAgICAgICAgICAgICB2YXIgbWVkaWFGaWxlcyA9IFtdOwoKICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIG1lZGlhRmlsZXMucHVzaCh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiB2YWx1ZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiB2YWx1ZSA/ICgwLCBfbWVkaWEyLmdldFR5cGVGcm9tRmlsZSkodmFsdWUpIDogJycKICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHZhbHVlKSkgPT09ICdvYmplY3QnICYmIHZhbHVlLnNyYyAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgX3NyYyA9ICgwLCBfbWVkaWEyLmFic29sdXRpemVVcmwpKHZhbHVlLnNyYyksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3R5cGUyID0gdmFsdWUudHlwZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZWRpYSA9IE9iamVjdC5hc3NpZ24odmFsdWUsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiBfc3JjLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAoX3R5cGUyID09PSAnJyB8fCBfdHlwZTIgPT09IG51bGwgfHwgX3R5cGUyID09PSB1bmRlZmluZWQpICYmIF9zcmMgPyAoMCwgX21lZGlhMi5nZXRUeXBlRnJvbUZpbGUpKF9zcmMpIDogX3R5cGUyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgICBtZWRpYUZpbGVzLnB1c2gobWVkaWEpOwogICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfaTIgPSAwLCB0b3RhbCA9IHZhbHVlLmxlbmd0aDsgX2kyIDwgdG90YWw7IF9pMisrKSB7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfc3JjMiA9ICgwLCBfbWVkaWEyLmFic29sdXRpemVVcmwpKHZhbHVlW19pMl0uc3JjKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3R5cGUzID0gdmFsdWVbX2kyXS50eXBlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfbWVkaWEgPSBPYmplY3QuYXNzaWduKHZhbHVlW19pMl0sIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNyYzogX3NyYzIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAoX3R5cGUzID09PSAnJyB8fCBfdHlwZTMgPT09IG51bGwgfHwgX3R5cGUzID09PSB1bmRlZmluZWQpICYmIF9zcmMyID8gKDAsIF9tZWRpYTIuZ2V0VHlwZUZyb21GaWxlKShfc3JjMikgOiBfdHlwZTMKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lZGlhRmlsZXMucHVzaChfbWVkaWEpOwogICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICB2YXIgcmVuZGVySW5mbyA9IF9yZW5kZXJlci5yZW5kZXJlci5zZWxlY3QobWVkaWFGaWxlcywgdC5tZWRpYUVsZW1lbnQub3B0aW9ucy5yZW5kZXJlcnMubGVuZ3RoID8gdC5tZWRpYUVsZW1lbnQub3B0aW9ucy5yZW5kZXJlcnMgOiBbXSksCiAgICAgICAgICAgICAgICAgICAgICAgICBldmVudCA9IHZvaWQgMDsKCiAgICAgICAgICAgICAgICAgICAgIGlmICghdC5tZWRpYUVsZW1lbnQucGF1c2VkICYmICEodC5tZWRpYUVsZW1lbnQuc3JjID09IG51bGwgfHwgdC5tZWRpYUVsZW1lbnQuc3JjID09PSAnJykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHQubWVkaWFFbGVtZW50LnBhdXNlKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICBldmVudCA9ICgwLCBfZ2VuZXJhbC5jcmVhdGVFdmVudCkoJ3BhdXNlJywgdC5tZWRpYUVsZW1lbnQpOwogICAgICAgICAgICAgICAgICAgICAgICAgdC5tZWRpYUVsZW1lbnQuZGlzcGF0Y2hFdmVudChldmVudCk7CiAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgdC5tZWRpYUVsZW1lbnQub3JpZ2luYWxOb2RlLnNyYyA9IG1lZGlhRmlsZXNbMF0uc3JjIHx8ICcnOwoKICAgICAgICAgICAgICAgICAgICAgaWYgKHJlbmRlckluZm8gPT09IG51bGwgJiYgbWVkaWFGaWxlc1swXS5zcmMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHQubWVkaWFFbGVtZW50LmdlbmVyYXRlRXJyb3IoJ05vIHJlbmRlcmVyIGZvdW5kJywgbWVkaWFGaWxlcyk7CiAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgIHZhciBzaG91bGRDaGFuZ2VSZW5kZXJlciA9ICEobWVkaWFGaWxlc1swXS5zcmMgPT0gbnVsbCB8fCBtZWRpYUZpbGVzWzBdLnNyYyA9PT0gJycpOwogICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2hvdWxkQ2hhbmdlUmVuZGVyZXIgPyB0Lm1lZGlhRWxlbWVudC5jaGFuZ2VSZW5kZXJlcihyZW5kZXJJbmZvLnJlbmRlcmVyTmFtZSwgbWVkaWFGaWxlcykgOiBudWxsOwogICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgdHJpZ2dlckFjdGlvbiA9IGZ1bmN0aW9uIHRyaWdnZXJBY3Rpb24obWV0aG9kTmFtZSwgYXJncykgewogICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1ldGhvZE5hbWUgPT09ICdwbGF5JyAmJiAodC5tZWRpYUVsZW1lbnQucmVuZGVyZXJOYW1lID09PSAnbmF0aXZlX2Rhc2gnIHx8IHQubWVkaWFFbGVtZW50LnJlbmRlcmVyTmFtZSA9PT0gJ25hdGl2ZV9obHMnIHx8IHQubWVkaWFFbGVtZW50LnJlbmRlcmVyTmFtZSA9PT0gJ3ZpbWVvX2lmcmFtZScpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3BvbnNlID0gdC5tZWRpYUVsZW1lbnQucmVuZGVyZXJbbWV0aG9kTmFtZV0oYXJncyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlICYmIHR5cGVvZiByZXNwb25zZS50aGVuID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLmNhdGNoKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0Lm1lZGlhRWxlbWVudC5wYXVzZWQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRtcFJlc3BvbnNlID0gdC5tZWRpYUVsZW1lbnQucmVuZGVyZXIucGxheSgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodG1wUmVzcG9uc2UgIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG1wUmVzcG9uc2UuY2F0Y2goZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdC5tZWRpYUVsZW1lbnQucmVuZGVyZXIucGF1c2VkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQubWVkaWFFbGVtZW50LnJlbmRlcmVyLnBhdXNlKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAxNTApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQubWVkaWFFbGVtZW50LnJlbmRlcmVyW21ldGhvZE5hbWVdKGFyZ3MpOwogICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICB0Lm1lZGlhRWxlbWVudC5nZW5lcmF0ZUVycm9yKGUsIG1lZGlhRmlsZXMpOwogICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICBhc3NpZ25NZXRob2RzID0gZnVuY3Rpb24gYXNzaWduTWV0aG9kcyhtZXRob2ROYW1lKSB7CiAgICAgICAgICAgICAgICAgICAgIHQubWVkaWFFbGVtZW50W21ldGhvZE5hbWVdID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldOwogICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0Lm1lZGlhRWxlbWVudC5yZW5kZXJlciAhPT0gdW5kZWZpbmVkICYmIHQubWVkaWFFbGVtZW50LnJlbmRlcmVyICE9PSBudWxsICYmIHR5cGVvZiB0Lm1lZGlhRWxlbWVudC5yZW5kZXJlclttZXRob2ROYW1lXSA9PT0gJ2Z1bmN0aW9uJykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0Lm1lZGlhRWxlbWVudC5wcm9taXNlcy5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUHJvbWlzZS5hbGwodC5tZWRpYUVsZW1lbnQucHJvbWlzZXMpLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJpZ2dlckFjdGlvbihtZXRob2ROYW1lLCBhcmdzKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQubWVkaWFFbGVtZW50LmdlbmVyYXRlRXJyb3IoZSwgbWVkaWFGaWxlcyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyaWdnZXJBY3Rpb24obWV0aG9kTmFtZSwgYXJncyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICBhZGRQcm9wZXJ0eSh0Lm1lZGlhRWxlbWVudCwgJ3NyYycsIGdldFNyYywgc2V0U3JjKTsKICAgICAgICAgICAgIHQubWVkaWFFbGVtZW50LmdldFNyYyA9IGdldFNyYzsKICAgICAgICAgICAgIHQubWVkaWFFbGVtZW50LnNldFNyYyA9IHNldFNyYzsKCiAgICAgICAgICAgICBmb3IgKHZhciBfaTMgPSAwLCB0b3RhbCA9IHByb3BzLmxlbmd0aDsgX2kzIDwgdG90YWw7IF9pMysrKSB7CiAgICAgICAgICAgICAgICAgYXNzaWduR2V0dGVyc1NldHRlcnMocHJvcHNbX2kzXSk7CiAgICAgICAgICAgICB9CgogICAgICAgICAgICAgZm9yICh2YXIgX2k0ID0gMCwgX3RvdGFsID0gbWV0aG9kcy5sZW5ndGg7IF9pNCA8IF90b3RhbDsgX2k0KyspIHsKICAgICAgICAgICAgICAgICBhc3NpZ25NZXRob2RzKG1ldGhvZHNbX2k0XSk7CiAgICAgICAgICAgICB9CgogICAgICAgICAgICAgdC5tZWRpYUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uIChldmVudE5hbWUsIGNhbGxiYWNrKSB7CiAgICAgICAgICAgICAgICAgdC5tZWRpYUVsZW1lbnQuZXZlbnRzW2V2ZW50TmFtZV0gPSB0Lm1lZGlhRWxlbWVudC5ldmVudHNbZXZlbnROYW1lXSB8fCBbXTsKCiAgICAgICAgICAgICAgICAgdC5tZWRpYUVsZW1lbnQuZXZlbnRzW2V2ZW50TmFtZV0ucHVzaChjYWxsYmFjayk7CiAgICAgICAgICAgICB9OwogICAgICAgICAgICAgdC5tZWRpYUVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uIChldmVudE5hbWUsIGNhbGxiYWNrKSB7CiAgICAgICAgICAgICAgICAgaWYgKCFldmVudE5hbWUpIHsKICAgICAgICAgICAgICAgICAgICAgdC5tZWRpYUVsZW1lbnQuZXZlbnRzID0ge307CiAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgdmFyIGNhbGxiYWNrcyA9IHQubWVkaWFFbGVtZW50LmV2ZW50c1tldmVudE5hbWVdOwoKICAgICAgICAgICAgICAgICBpZiAoIWNhbGxiYWNrcykgewogICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTsKICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgIGlmICghY2FsbGJhY2spIHsKICAgICAgICAgICAgICAgICAgICAgdC5tZWRpYUVsZW1lbnQuZXZlbnRzW2V2ZW50TmFtZV0gPSBbXTsKICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICBmb3IgKHZhciBfaTUgPSAwOyBfaTUgPCBjYWxsYmFja3MubGVuZ3RoOyBfaTUrKykgewogICAgICAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2tzW19pNV0gPT09IGNhbGxiYWNrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICB0Lm1lZGlhRWxlbWVudC5ldmVudHNbZXZlbnROYW1lXS5zcGxpY2UoX2k1LCAxKTsKICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgdC5tZWRpYUVsZW1lbnQuZGlzcGF0Y2hFdmVudCA9IGZ1bmN0aW9uIChldmVudCkgewogICAgICAgICAgICAgICAgIHZhciBjYWxsYmFja3MgPSB0Lm1lZGlhRWxlbWVudC5ldmVudHNbZXZlbnQudHlwZV07CiAgICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrcykgewogICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfaTYgPSAwOyBfaTYgPCBjYWxsYmFja3MubGVuZ3RoOyBfaTYrKykgewogICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2tzW19pNl0uYXBwbHkobnVsbCwgW2V2ZW50XSk7CiAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgIHQubWVkaWFFbGVtZW50LmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgdmFyIG1lZGlhRWxlbWVudCA9IHQubWVkaWFFbGVtZW50Lm9yaWdpbmFsTm9kZS5jbG9uZU5vZGUodHJ1ZSk7CiAgICAgICAgICAgICAgICAgdmFyIHdyYXBwZXIgPSB0Lm1lZGlhRWxlbWVudC5wYXJlbnRFbGVtZW50OwogICAgICAgICAgICAgICAgIG1lZGlhRWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ2lkJyk7CiAgICAgICAgICAgICAgICAgbWVkaWFFbGVtZW50LnJlbW92ZSgpOwogICAgICAgICAgICAgICAgIHQubWVkaWFFbGVtZW50LnJlbW92ZSgpOwogICAgICAgICAgICAgICAgIHdyYXBwZXIuYXBwZW5kQ2hpbGQobWVkaWFFbGVtZW50KTsKICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgaWYgKG1lZGlhRmlsZXMubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgdC5tZWRpYUVsZW1lbnQuc3JjID0gbWVkaWFGaWxlczsKICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICBpZiAodC5tZWRpYUVsZW1lbnQucHJvbWlzZXMubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgUHJvbWlzZS5hbGwodC5tZWRpYUVsZW1lbnQucHJvbWlzZXMpLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICBpZiAodC5tZWRpYUVsZW1lbnQub3B0aW9ucy5zdWNjZXNzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICB0Lm1lZGlhRWxlbWVudC5vcHRpb25zLnN1Y2Nlc3ModC5tZWRpYUVsZW1lbnQsIHQubWVkaWFFbGVtZW50Lm9yaWdpbmFsTm9kZSk7CiAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgIGlmIChlcnJvciAmJiB0Lm1lZGlhRWxlbWVudC5vcHRpb25zLmVycm9yKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICB0Lm1lZGlhRWxlbWVudC5vcHRpb25zLmVycm9yKHQubWVkaWFFbGVtZW50LCB0Lm1lZGlhRWxlbWVudC5vcmlnaW5hbE5vZGUpOwogICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgIGlmICh0Lm1lZGlhRWxlbWVudC5vcHRpb25zLnN1Y2Nlc3MpIHsKICAgICAgICAgICAgICAgICAgICAgdC5tZWRpYUVsZW1lbnQub3B0aW9ucy5zdWNjZXNzKHQubWVkaWFFbGVtZW50LCB0Lm1lZGlhRWxlbWVudC5vcmlnaW5hbE5vZGUpOwogICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgaWYgKGVycm9yICYmIHQubWVkaWFFbGVtZW50Lm9wdGlvbnMuZXJyb3IpIHsKICAgICAgICAgICAgICAgICAgICAgdC5tZWRpYUVsZW1lbnQub3B0aW9ucy5lcnJvcih0Lm1lZGlhRWxlbWVudCwgdC5tZWRpYUVsZW1lbnQub3JpZ2luYWxOb2RlKTsKICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICB9CgogICAgICAgICAgICAgcmV0dXJuIHQubWVkaWFFbGVtZW50OwogICAgICAgICB9OwoKICAgICAgICAgX3dpbmRvdzIuZGVmYXVsdC5NZWRpYUVsZW1lbnQgPSBNZWRpYUVsZW1lbnQ7CiAgICAgICAgIF9tZWpzMi5kZWZhdWx0Lk1lZGlhRWxlbWVudCA9IE1lZGlhRWxlbWVudDsKCiAgICAgICAgIGV4cG9ydHMuZGVmYXVsdCA9IE1lZGlhRWxlbWVudDsKCiAgICAgfSwgeyAiMiI6IDIsICIyNSI6IDI1LCAiMjciOiAyNywgIjI4IjogMjgsICIzIjogMywgIjciOiA3LCAiOCI6IDggfV0sIDc6IFtmdW5jdGlvbiAoX2RlcmVxXywgbW9kdWxlLCBleHBvcnRzKSB7CiAgICAgICAgICd1c2Ugc3RyaWN0JzsKCiAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICAgICAgICAgICAgIHZhbHVlOiB0cnVlCiAgICAgICAgIH0pOwoKICAgICAgICAgdmFyIF93aW5kb3cgPSBfZGVyZXFfKDMpOwoKICAgICAgICAgdmFyIF93aW5kb3cyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2luZG93KTsKCiAgICAgICAgIGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgogICAgICAgICB2YXIgbWVqcyA9IHt9OwoKICAgICAgICAgbWVqcy52ZXJzaW9uID0gJzQuMi4xNic7CgogICAgICAgICBtZWpzLmh0bWw1bWVkaWEgPSB7CiAgICAgICAgICAgICBwcm9wZXJ0aWVzOiBbJ3ZvbHVtZScsICdzcmMnLCAnY3VycmVudFRpbWUnLCAnbXV0ZWQnLCAnZHVyYXRpb24nLCAncGF1c2VkJywgJ2VuZGVkJywgJ2J1ZmZlcmVkJywgJ2Vycm9yJywgJ25ldHdvcmtTdGF0ZScsICdyZWFkeVN0YXRlJywgJ3NlZWtpbmcnLCAnc2Vla2FibGUnLCAnY3VycmVudFNyYycsICdwcmVsb2FkJywgJ2J1ZmZlcmVkQnl0ZXMnLCAnYnVmZmVyZWRUaW1lJywgJ2luaXRpYWxUaW1lJywgJ3N0YXJ0T2Zmc2V0VGltZScsICdkZWZhdWx0UGxheWJhY2tSYXRlJywgJ3BsYXliYWNrUmF0ZScsICdwbGF5ZWQnLCAnYXV0b3BsYXknLCAnbG9vcCcsICdjb250cm9scyddLAogICAgICAgICAgICAgcmVhZE9ubHlQcm9wZXJ0aWVzOiBbJ2R1cmF0aW9uJywgJ3BhdXNlZCcsICdlbmRlZCcsICdidWZmZXJlZCcsICdlcnJvcicsICduZXR3b3JrU3RhdGUnLCAncmVhZHlTdGF0ZScsICdzZWVraW5nJywgJ3NlZWthYmxlJ10sCgogICAgICAgICAgICAgbWV0aG9kczogWydsb2FkJywgJ3BsYXknLCAncGF1c2UnLCAnY2FuUGxheVR5cGUnXSwKCiAgICAgICAgICAgICBldmVudHM6IFsnbG9hZHN0YXJ0JywgJ2R1cmF0aW9uY2hhbmdlJywgJ2xvYWRlZG1ldGFkYXRhJywgJ2xvYWRlZGRhdGEnLCAncHJvZ3Jlc3MnLCAnY2FucGxheScsICdjYW5wbGF5dGhyb3VnaCcsICdzdXNwZW5kJywgJ2Fib3J0JywgJ2Vycm9yJywgJ2VtcHRpZWQnLCAnc3RhbGxlZCcsICdwbGF5JywgJ3BsYXlpbmcnLCAncGF1c2UnLCAnd2FpdGluZycsICdzZWVraW5nJywgJ3NlZWtlZCcsICd0aW1ldXBkYXRlJywgJ2VuZGVkJywgJ3JhdGVjaGFuZ2UnLCAndm9sdW1lY2hhbmdlJ10sCgogICAgICAgICAgICAgbWVkaWFUeXBlczogWydhdWRpby9tcDMnLCAnYXVkaW8vb2dnJywgJ2F1ZGlvL29nYScsICdhdWRpby93YXYnLCAnYXVkaW8veC13YXYnLCAnYXVkaW8vd2F2ZScsICdhdWRpby94LXBuLXdhdicsICdhdWRpby9tcGVnJywgJ2F1ZGlvL21wNCcsICd2aWRlby9tcDQnLCAndmlkZW8vd2VibScsICd2aWRlby9vZ2cnLCAndmlkZW8vb2d2J10KICAgICAgICAgfTsKCiAgICAgICAgIF93aW5kb3cyLmRlZmF1bHQubWVqcyA9IG1lanM7CgogICAgICAgICBleHBvcnRzLmRlZmF1bHQgPSBtZWpzOwoKICAgICB9LCB7ICIzIjogMyB9XSwgODogW2Z1bmN0aW9uIChfZGVyZXFfLCBtb2R1bGUsIGV4cG9ydHMpIHsKICAgICAgICAgJ3VzZSBzdHJpY3QnOwoKICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogICAgICAgICAgICAgdmFsdWU6IHRydWUKICAgICAgICAgfSk7CiAgICAgICAgIGV4cG9ydHMucmVuZGVyZXIgPSB1bmRlZmluZWQ7CgogICAgICAgICB2YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gInN5bWJvbCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09ICJmdW5jdGlvbiIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gInN5bWJvbCIgOiB0eXBlb2Ygb2JqOyB9OwoKICAgICAgICAgdmFyIF9jcmVhdGVDbGFzcyA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmICgidmFsdWUiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7CgogICAgICAgICB2YXIgX21lanMgPSBfZGVyZXFfKDcpOwoKICAgICAgICAgdmFyIF9tZWpzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21lanMpOwoKICAgICAgICAgZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCiAgICAgICAgIGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQoKICAgICAgICAgdmFyIFJlbmRlcmVyID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgZnVuY3Rpb24gUmVuZGVyZXIoKSB7CiAgICAgICAgICAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFJlbmRlcmVyKTsKCiAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJlcnMgPSB7fTsKICAgICAgICAgICAgICAgICB0aGlzLm9yZGVyID0gW107CiAgICAgICAgICAgICB9CgogICAgICAgICAgICAgX2NyZWF0ZUNsYXNzKFJlbmRlcmVyLCBbewogICAgICAgICAgICAgICAgIGtleTogJ2FkZCcsCiAgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFkZChyZW5kZXJlcikgewogICAgICAgICAgICAgICAgICAgICBpZiAocmVuZGVyZXIubmFtZSA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdyZW5kZXJlciBtdXN0IGNvbnRhaW4gYXQgbGVhc3QgYG5hbWVgIHByb3BlcnR5Jyk7CiAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyZXJzW3JlbmRlcmVyLm5hbWVdID0gcmVuZGVyZXI7CiAgICAgICAgICAgICAgICAgICAgIHRoaXMub3JkZXIucHVzaChyZW5kZXJlci5uYW1lKTsKICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAga2V5OiAnc2VsZWN0JywKICAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2VsZWN0KG1lZGlhRmlsZXMpIHsKICAgICAgICAgICAgICAgICAgICAgdmFyIHJlbmRlcmVycyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogW107CgogICAgICAgICAgICAgICAgICAgICB2YXIgcmVuZGVyZXJzTGVuZ3RoID0gcmVuZGVyZXJzLmxlbmd0aDsKCiAgICAgICAgICAgICAgICAgICAgIHJlbmRlcmVycyA9IHJlbmRlcmVycy5sZW5ndGggPyByZW5kZXJlcnMgOiB0aGlzLm9yZGVyOwoKICAgICAgICAgICAgICAgICAgICAgaWYgKCFyZW5kZXJlcnNMZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZW5kZXJlckluZGljYXRvciA9IFsvXihodG1sNXxuYXRpdmUpL2ksIC9eZmxhc2gvaSwgL2lmcmFtZSQvaV0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyZXJSYW5raW5nID0gZnVuY3Rpb24gcmVuZGVyZXJSYW5raW5nKHJlbmRlcmVyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCB0b3RhbCA9IHJlbmRlcmVySW5kaWNhdG9yLmxlbmd0aDsgaSA8IHRvdGFsOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZW5kZXJlckluZGljYXRvcltpXS50ZXN0KHJlbmRlcmVyKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZW5kZXJlckluZGljYXRvci5sZW5ndGg7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJlcnMuc29ydChmdW5jdGlvbiAoYSwgYikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZW5kZXJlclJhbmtpbmcoYSkgLSByZW5kZXJlclJhbmtpbmcoYik7CiAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIHRvdGFsID0gcmVuZGVyZXJzLmxlbmd0aDsgaSA8IHRvdGFsOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBrZXkgPSByZW5kZXJlcnNbaV0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3JlbmRlcmVyID0gdGhpcy5yZW5kZXJlcnNba2V5XTsKCiAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3JlbmRlcmVyICE9PSBudWxsICYmIF9yZW5kZXJlciAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDAsIGpsID0gbWVkaWFGaWxlcy5sZW5ndGg7IGogPCBqbDsgaisrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgX3JlbmRlcmVyLmNhblBsYXlUeXBlID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBtZWRpYUZpbGVzW2pdLnR5cGUgPT09ICdzdHJpbmcnICYmIF9yZW5kZXJlci5jYW5QbGF5VHlwZShtZWRpYUZpbGVzW2pdLnR5cGUpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlcmVyTmFtZTogX3JlbmRlcmVyLm5hbWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjOiBtZWRpYUZpbGVzW2pdLnNyYwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgIGtleTogJ29yZGVyJywKICAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldChvcmRlcikgewogICAgICAgICAgICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkob3JkZXIpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvcmRlciBtdXN0IGJlIGFuIGFycmF5IG9mIHN0cmluZ3MuJyk7CiAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgIHRoaXMuX29yZGVyID0gb3JkZXI7CiAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX29yZGVyOwogICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICBrZXk6ICdyZW5kZXJlcnMnLAogICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24gc2V0KHJlbmRlcmVycykgewogICAgICAgICAgICAgICAgICAgICBpZiAocmVuZGVyZXJzICE9PSBudWxsICYmICh0eXBlb2YgcmVuZGVyZXJzID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihyZW5kZXJlcnMpKSAhPT0gJ29iamVjdCcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3JlbmRlcmVycyBtdXN0IGJlIGFuIGFycmF5IG9mIG9iamVjdHMuJyk7CiAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlbmRlcmVycyA9IHJlbmRlcmVyczsKICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fcmVuZGVyZXJzOwogICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgIH1dKTsKCiAgICAgICAgICAgICByZXR1cm4gUmVuZGVyZXI7CiAgICAgICAgIH0oKTsKCiAgICAgICAgIHZhciByZW5kZXJlciA9IGV4cG9ydHMucmVuZGVyZXIgPSBuZXcgUmVuZGVyZXIoKTsKCiAgICAgICAgIF9tZWpzMi5kZWZhdWx0LlJlbmRlcmVycyA9IHJlbmRlcmVyOwoKICAgICB9LCB7ICI3IjogNyB9XSwgOTogW2Z1bmN0aW9uIChfZGVyZXFfLCBtb2R1bGUsIGV4cG9ydHMpIHsKICAgICAgICAgJ3VzZSBzdHJpY3QnOwoKICAgICAgICAgdmFyIF93aW5kb3cgPSBfZGVyZXFfKDMpOwoKICAgICAgICAgdmFyIF93aW5kb3cyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2luZG93KTsKCiAgICAgICAgIHZhciBfZG9jdW1lbnQgPSBfZGVyZXFfKDIpOwoKICAgICAgICAgdmFyIF9kb2N1bWVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kb2N1bWVudCk7CgogICAgICAgICB2YXIgX2kxOG4gPSBfZGVyZXFfKDUpOwoKICAgICAgICAgdmFyIF9pMThuMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2kxOG4pOwoKICAgICAgICAgdmFyIF9wbGF5ZXIgPSBfZGVyZXFfKDE2KTsKCiAgICAgICAgIHZhciBfcGxheWVyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3BsYXllcik7CgogICAgICAgICB2YXIgX2NvbnN0YW50cyA9IF9kZXJlcV8oMjUpOwoKICAgICAgICAgdmFyIEZlYXR1cmVzID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX2NvbnN0YW50cyk7CgogICAgICAgICB2YXIgX2dlbmVyYWwgPSBfZGVyZXFfKDI3KTsKCiAgICAgICAgIHZhciBfZG9tID0gX2RlcmVxXygyNik7CgogICAgICAgICB2YXIgX21lZGlhID0gX2RlcmVxXygyOCk7CgogICAgICAgICBmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGVsc2UgeyB2YXIgbmV3T2JqID0ge307IGlmIChvYmogIT0gbnVsbCkgeyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IHJldHVybiBuZXdPYmo7IH0gfQoKICAgICAgICAgZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCiAgICAgICAgIE9iamVjdC5hc3NpZ24oX3BsYXllci5jb25maWcsIHsKICAgICAgICAgICAgIHVzZVBsdWdpbkZ1bGxTY3JlZW46IHRydWUsCgogICAgICAgICAgICAgZnVsbHNjcmVlblRleHQ6IG51bGwsCgogICAgICAgICAgICAgdXNlRmFrZUZ1bGxzY3JlZW46IGZhbHNlCiAgICAgICAgIH0pOwoKICAgICAgICAgT2JqZWN0LmFzc2lnbihfcGxheWVyMi5kZWZhdWx0LnByb3RvdHlwZSwgewogICAgICAgICAgICAgaXNGdWxsU2NyZWVuOiBmYWxzZSwKCiAgICAgICAgICAgICBpc05hdGl2ZUZ1bGxTY3JlZW46IGZhbHNlLAoKICAgICAgICAgICAgIGlzSW5JZnJhbWU6IGZhbHNlLAoKICAgICAgICAgICAgIGlzUGx1Z2luQ2xpY2tUaHJvdWdoQ3JlYXRlZDogZmFsc2UsCgogICAgICAgICAgICAgZnVsbHNjcmVlbk1vZGU6ICcnLAoKICAgICAgICAgICAgIGNvbnRhaW5lclNpemVUaW1lb3V0OiBudWxsLAoKICAgICAgICAgICAgIGJ1aWxkZnVsbHNjcmVlbjogZnVuY3Rpb24gYnVpbGRmdWxsc2NyZWVuKHBsYXllcikgewogICAgICAgICAgICAgICAgIGlmICghcGxheWVyLmlzVmlkZW8pIHsKICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgcGxheWVyLmlzSW5JZnJhbWUgPSBfd2luZG93Mi5kZWZhdWx0LmxvY2F0aW9uICE9PSBfd2luZG93Mi5kZWZhdWx0LnBhcmVudC5sb2NhdGlvbjsKCiAgICAgICAgICAgICAgICAgcGxheWVyLmRldGVjdEZ1bGxzY3JlZW5Nb2RlKCk7CgogICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcywKICAgICAgICAgICAgICAgICAgICAgZnVsbHNjcmVlblRpdGxlID0gKDAsIF9nZW5lcmFsLmlzU3RyaW5nKSh0Lm9wdGlvbnMuZnVsbHNjcmVlblRleHQpID8gdC5vcHRpb25zLmZ1bGxzY3JlZW5UZXh0IDogX2kxOG4yLmRlZmF1bHQudCgnbWVqcy5mdWxsc2NyZWVuJyksCiAgICAgICAgICAgICAgICAgICAgIGZ1bGxzY3JlZW5CdG4gPSBfZG9jdW1lbnQyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CgogICAgICAgICAgICAgICAgIGZ1bGxzY3JlZW5CdG4uY2xhc3NOYW1lID0gdC5vcHRpb25zLmNsYXNzUHJlZml4ICsgJ2J1dHRvbiAnICsgdC5vcHRpb25zLmNsYXNzUHJlZml4ICsgJ2Z1bGxzY3JlZW4tYnV0dG9uJzsKICAgICAgICAgICAgICAgICBmdWxsc2NyZWVuQnRuLmlubmVySFRNTCA9ICc8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgYXJpYS1jb250cm9scz0iJyArIHQuaWQgKyAnIiB0aXRsZT0iJyArIGZ1bGxzY3JlZW5UaXRsZSArICciIGFyaWEtbGFiZWw9IicgKyBmdWxsc2NyZWVuVGl0bGUgKyAnIiB0YWJpbmRleD0iMCI+PC9idXR0b24+JzsKICAgICAgICAgICAgICAgICB0LmFkZENvbnRyb2xFbGVtZW50KGZ1bGxzY3JlZW5CdG4sICdmdWxsc2NyZWVuJyk7CgogICAgICAgICAgICAgICAgIGZ1bGxzY3JlZW5CdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgIHZhciBpc0Z1bGxTY3JlZW4gPSBGZWF0dXJlcy5IQVNfVFJVRV9OQVRJVkVfRlVMTFNDUkVFTiAmJiBGZWF0dXJlcy5JU19GVUxMU0NSRUVOIHx8IHBsYXllci5pc0Z1bGxTY3JlZW47CgogICAgICAgICAgICAgICAgICAgICBpZiAoaXNGdWxsU2NyZWVuKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXIuZXhpdEZ1bGxTY3JlZW4oKTsKICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllci5lbnRlckZ1bGxTY3JlZW4oKTsKICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICBwbGF5ZXIuZnVsbHNjcmVlbkJ0biA9IGZ1bGxzY3JlZW5CdG47CgogICAgICAgICAgICAgICAgIHQub3B0aW9ucy5rZXlBY3Rpb25zLnB1c2goewogICAgICAgICAgICAgICAgICAgICBrZXlzOiBbNzBdLAogICAgICAgICAgICAgICAgICAgICBhY3Rpb246IGZ1bmN0aW9uIGFjdGlvbihwbGF5ZXIsIG1lZGlhLCBrZXksIGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWV2ZW50LmN0cmxLZXkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHBsYXllci5lbnRlckZ1bGxTY3JlZW4gIT09ICd1bmRlZmluZWQnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwbGF5ZXIuaXNGdWxsU2NyZWVuKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXIuZXhpdEZ1bGxTY3JlZW4oKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllci5lbnRlckZ1bGxTY3JlZW4oKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICB0LmV4aXRGdWxsc2NyZWVuQ2FsbGJhY2sgPSBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgICAgICB2YXIga2V5ID0gZS53aGljaCB8fCBlLmtleUNvZGUgfHwgMDsKICAgICAgICAgICAgICAgICAgICAgaWYgKHQub3B0aW9ucy5lbmFibGVLZXlib2FyZCAmJiBrZXkgPT09IDI3ICYmIChGZWF0dXJlcy5IQVNfVFJVRV9OQVRJVkVfRlVMTFNDUkVFTiAmJiBGZWF0dXJlcy5JU19GVUxMU0NSRUVOIHx8IHQuaXNGdWxsU2NyZWVuKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyLmV4aXRGdWxsU2NyZWVuKCk7CiAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgICB0Lmdsb2JhbEJpbmQoJ2tleWRvd24nLCB0LmV4aXRGdWxsc2NyZWVuQ2FsbGJhY2spOwoKICAgICAgICAgICAgICAgICB0Lm5vcm1hbEhlaWdodCA9IDA7CiAgICAgICAgICAgICAgICAgdC5ub3JtYWxXaWR0aCA9IDA7CgogICAgICAgICAgICAgICAgIGlmIChGZWF0dXJlcy5IQVNfVFJVRV9OQVRJVkVfRlVMTFNDUkVFTikgewogICAgICAgICAgICAgICAgICAgICB2YXIgZnVsbHNjcmVlbkNoYW5nZWQgPSBmdW5jdGlvbiBmdWxsc2NyZWVuQ2hhbmdlZCgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwbGF5ZXIuaXNGdWxsU2NyZWVuKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEZlYXR1cmVzLmlzRnVsbFNjcmVlbigpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllci5pc05hdGl2ZUZ1bGxTY3JlZW4gPSB0cnVlOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyLnNldENvbnRyb2xzU2l6ZSgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllci5pc05hdGl2ZUZ1bGxTY3JlZW4gPSBmYWxzZTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllci5leGl0RnVsbFNjcmVlbigpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICAgICAgIHBsYXllci5nbG9iYWxCaW5kKEZlYXR1cmVzLkZVTExTQ1JFRU5fRVZFTlRfTkFNRSwgZnVsbHNjcmVlbkNoYW5nZWQpOwogICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICBjbGVhbmZ1bGxzY3JlZW46IGZ1bmN0aW9uIGNsZWFuZnVsbHNjcmVlbihwbGF5ZXIpIHsKICAgICAgICAgICAgICAgICBwbGF5ZXIuZXhpdEZ1bGxTY3JlZW4oKTsKICAgICAgICAgICAgICAgICBwbGF5ZXIuZ2xvYmFsVW5iaW5kKCdrZXlkb3duJywgcGxheWVyLmV4aXRGdWxsc2NyZWVuQ2FsbGJhY2spOwogICAgICAgICAgICAgfSwKICAgICAgICAgICAgIGRldGVjdEZ1bGxzY3JlZW5Nb2RlOiBmdW5jdGlvbiBkZXRlY3RGdWxsc2NyZWVuTW9kZSgpIHsKICAgICAgICAgICAgICAgICB2YXIgdCA9IHRoaXMsCiAgICAgICAgICAgICAgICAgICAgIGlzTmF0aXZlID0gdC5tZWRpYS5yZW5kZXJlck5hbWUgIT09IG51bGwgJiYgLyhuYXRpdmV8aHRtbDUpL2kudGVzdCh0Lm1lZGlhLnJlbmRlcmVyTmFtZSk7CgogICAgICAgICAgICAgICAgIHZhciBtb2RlID0gJyc7CgogICAgICAgICAgICAgICAgIGlmIChGZWF0dXJlcy5IQVNfVFJVRV9OQVRJVkVfRlVMTFNDUkVFTiAmJiBpc05hdGl2ZSkgewogICAgICAgICAgICAgICAgICAgICBtb2RlID0gJ25hdGl2ZS1uYXRpdmUnOwogICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoRmVhdHVyZXMuSEFTX1RSVUVfTkFUSVZFX0ZVTExTQ1JFRU4gJiYgIWlzTmF0aXZlKSB7CiAgICAgICAgICAgICAgICAgICAgIG1vZGUgPSAncGx1Z2luLW5hdGl2ZSc7CiAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0LnVzZVBsdWdpbkZ1bGxTY3JlZW4gJiYgRmVhdHVyZXMuU1VQUE9SVF9QT0lOVEVSX0VWRU5UUykgewogICAgICAgICAgICAgICAgICAgICBtb2RlID0gJ3BsdWdpbi1jbGljayc7CiAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICB0LmZ1bGxzY3JlZW5Nb2RlID0gbW9kZTsKICAgICAgICAgICAgICAgICByZXR1cm4gbW9kZTsKICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICBlbnRlckZ1bGxTY3JlZW46IGZ1bmN0aW9uIGVudGVyRnVsbFNjcmVlbigpIHsKICAgICAgICAgICAgICAgICB2YXIgdCA9IHRoaXMsCiAgICAgICAgICAgICAgICAgICAgIGlzTmF0aXZlID0gdC5tZWRpYS5yZW5kZXJlck5hbWUgIT09IG51bGwgJiYgLyhodG1sNXxuYXRpdmUpL2kudGVzdCh0Lm1lZGlhLnJlbmRlcmVyTmFtZSksCiAgICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lclN0eWxlcyA9IGdldENvbXB1dGVkU3R5bGUodC5nZXRFbGVtZW50KHQuY29udGFpbmVyKSk7CgogICAgICAgICAgICAgICAgIGlmICghdC5pc1ZpZGVvKSB7CiAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgIGlmICh0Lm9wdGlvbnMudXNlRmFrZUZ1bGxzY3JlZW4gPT09IGZhbHNlICYmIEZlYXR1cmVzLklTX0lPUyAmJiBGZWF0dXJlcy5IQVNfSU9TX0ZVTExTQ1JFRU4gJiYgdHlwZW9mIHQubWVkaWEub3JpZ2luYWxOb2RlLndlYmtpdEVudGVyRnVsbHNjcmVlbiA9PT0gJ2Z1bmN0aW9uJyAmJiB0Lm1lZGlhLm9yaWdpbmFsTm9kZS5jYW5QbGF5VHlwZSgoMCwgX21lZGlhLmdldFR5cGVGcm9tRmlsZSkodC5tZWRpYS5nZXRTcmMoKSkpKSB7CiAgICAgICAgICAgICAgICAgICAgIHQubWVkaWEub3JpZ2luYWxOb2RlLndlYmtpdEVudGVyRnVsbHNjcmVlbigpOwogICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAoMCwgX2RvbS5hZGRDbGFzcykoX2RvY3VtZW50Mi5kZWZhdWx0LmRvY3VtZW50RWxlbWVudCwgdC5vcHRpb25zLmNsYXNzUHJlZml4ICsgJ2Z1bGxzY3JlZW4nKTsKICAgICAgICAgICAgICAgICAoMCwgX2RvbS5hZGRDbGFzcykodC5nZXRFbGVtZW50KHQuY29udGFpbmVyKSwgdC5vcHRpb25zLmNsYXNzUHJlZml4ICsgJ2NvbnRhaW5lci1mdWxsc2NyZWVuJyk7CgogICAgICAgICAgICAgICAgIHQubm9ybWFsSGVpZ2h0ID0gcGFyc2VGbG9hdChjb250YWluZXJTdHlsZXMuaGVpZ2h0KTsKICAgICAgICAgICAgICAgICB0Lm5vcm1hbFdpZHRoID0gcGFyc2VGbG9hdChjb250YWluZXJTdHlsZXMud2lkdGgpOwoKICAgICAgICAgICAgICAgICBpZiAodC5mdWxsc2NyZWVuTW9kZSA9PT0gJ25hdGl2ZS1uYXRpdmUnIHx8IHQuZnVsbHNjcmVlbk1vZGUgPT09ICdwbHVnaW4tbmF0aXZlJykgewogICAgICAgICAgICAgICAgICAgICBGZWF0dXJlcy5yZXF1ZXN0RnVsbFNjcmVlbih0LmdldEVsZW1lbnQodC5jb250YWluZXIpKTsKCiAgICAgICAgICAgICAgICAgICAgIGlmICh0LmlzSW5JZnJhbWUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gY2hlY2tGdWxsc2NyZWVuKCkgewoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodC5pc05hdGl2ZUZ1bGxTY3JlZW4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBlcmNlbnRFcnJvck1hcmdpbiA9IDAuMDAyLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93V2lkdGggPSBfd2luZG93Mi5kZWZhdWx0LmlubmVyV2lkdGggfHwgX2RvY3VtZW50Mi5kZWZhdWx0LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCB8fCBfZG9jdW1lbnQyLmRlZmF1bHQuYm9keS5jbGllbnRXaWR0aCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjcmVlbldpZHRoID0gc2NyZWVuLndpZHRoLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWJzRGlmZiA9IE1hdGguYWJzKHNjcmVlbldpZHRoIC0gd2luZG93V2lkdGgpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFyZ2luRXJyb3IgPSBzY3JlZW5XaWR0aCAqIHBlcmNlbnRFcnJvck1hcmdpbjsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhYnNEaWZmID4gbWFyZ2luRXJyb3IpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQuZXhpdEZ1bGxTY3JlZW4oKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoY2hlY2tGdWxsc2NyZWVuLCA1MDApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgfSwgMTAwMCk7CiAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgIHQuZ2V0RWxlbWVudCh0LmNvbnRhaW5lcikuc3R5bGUud2lkdGggPSAnMTAwJSc7CiAgICAgICAgICAgICAgICAgdC5nZXRFbGVtZW50KHQuY29udGFpbmVyKS5zdHlsZS5oZWlnaHQgPSAnMTAwJSc7CgogICAgICAgICAgICAgICAgIHQuY29udGFpbmVyU2l6ZVRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgdC5nZXRFbGVtZW50KHQuY29udGFpbmVyKS5zdHlsZS53aWR0aCA9ICcxMDAlJzsKICAgICAgICAgICAgICAgICAgICAgdC5nZXRFbGVtZW50KHQuY29udGFpbmVyKS5zdHlsZS5oZWlnaHQgPSAnMTAwJSc7CiAgICAgICAgICAgICAgICAgICAgIHQuc2V0Q29udHJvbHNTaXplKCk7CiAgICAgICAgICAgICAgICAgfSwgNTAwKTsKCiAgICAgICAgICAgICAgICAgaWYgKGlzTmF0aXZlKSB7CiAgICAgICAgICAgICAgICAgICAgIHQubm9kZS5zdHlsZS53aWR0aCA9ICcxMDAlJzsKICAgICAgICAgICAgICAgICAgICAgdC5ub2RlLnN0eWxlLmhlaWdodCA9ICcxMDAlJzsKICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICB2YXIgZWxlbWVudHMgPSB0LmdldEVsZW1lbnQodC5jb250YWluZXIpLnF1ZXJ5U2VsZWN0b3JBbGwoJ2VtYmVkLCBvYmplY3QsIHZpZGVvJyksCiAgICAgICAgICAgICAgICAgICAgICAgICBfdG90YWwgPSBlbGVtZW50cy5sZW5ndGg7CiAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgX3RvdGFsOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnRzW2ldLnN0eWxlLndpZHRoID0gJzEwMCUnOwogICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudHNbaV0uc3R5bGUuaGVpZ2h0ID0gJzEwMCUnOwogICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICBpZiAodC5vcHRpb25zLnNldERpbWVuc2lvbnMgJiYgdHlwZW9mIHQubWVkaWEuc2V0U2l6ZSA9PT0gJ2Z1bmN0aW9uJykgewogICAgICAgICAgICAgICAgICAgICB0Lm1lZGlhLnNldFNpemUoc2NyZWVuLndpZHRoLCBzY3JlZW4uaGVpZ2h0KTsKICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgIHZhciBsYXllcnMgPSB0LmdldEVsZW1lbnQodC5sYXllcnMpLmNoaWxkcmVuLAogICAgICAgICAgICAgICAgICAgICB0b3RhbCA9IGxheWVycy5sZW5ndGg7CiAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IHRvdGFsOyBfaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgIGxheWVyc1tfaV0uc3R5bGUud2lkdGggPSAnMTAwJSc7CiAgICAgICAgICAgICAgICAgICAgIGxheWVyc1tfaV0uc3R5bGUuaGVpZ2h0ID0gJzEwMCUnOwogICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgaWYgKHQuZnVsbHNjcmVlbkJ0bikgewogICAgICAgICAgICAgICAgICAgICAoMCwgX2RvbS5yZW1vdmVDbGFzcykodC5mdWxsc2NyZWVuQnRuLCB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAnZnVsbHNjcmVlbicpOwogICAgICAgICAgICAgICAgICAgICAoMCwgX2RvbS5hZGRDbGFzcykodC5mdWxsc2NyZWVuQnRuLCB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAndW5mdWxsc2NyZWVuJyk7CiAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICB0LnNldENvbnRyb2xzU2l6ZSgpOwogICAgICAgICAgICAgICAgIHQuaXNGdWxsU2NyZWVuID0gdHJ1ZTsKCiAgICAgICAgICAgICAgICAgdmFyIHpvb21GYWN0b3IgPSBNYXRoLm1pbihzY3JlZW4ud2lkdGggLyB0LndpZHRoLCBzY3JlZW4uaGVpZ2h0IC8gdC5oZWlnaHQpLAogICAgICAgICAgICAgICAgICAgICBjYXB0aW9uVGV4dCA9IHQuZ2V0RWxlbWVudCh0LmNvbnRhaW5lcikucXVlcnlTZWxlY3RvcignLicgKyB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAnY2FwdGlvbnMtdGV4dCcpOwogICAgICAgICAgICAgICAgIGlmIChjYXB0aW9uVGV4dCkgewogICAgICAgICAgICAgICAgICAgICBjYXB0aW9uVGV4dC5zdHlsZS5mb250U2l6ZSA9IHpvb21GYWN0b3IgKiAxMDAgKyAnJSc7CiAgICAgICAgICAgICAgICAgICAgIGNhcHRpb25UZXh0LnN0eWxlLmxpbmVIZWlnaHQgPSAnbm9ybWFsJzsKICAgICAgICAgICAgICAgICAgICAgdC5nZXRFbGVtZW50KHQuY29udGFpbmVyKS5xdWVyeVNlbGVjdG9yKCcuJyArIHQub3B0aW9ucy5jbGFzc1ByZWZpeCArICdjYXB0aW9ucy1wb3NpdGlvbicpLnN0eWxlLmJvdHRvbSA9IChzY3JlZW4uaGVpZ2h0IC0gdC5ub3JtYWxIZWlnaHQpIC8gMiAtIHQuZ2V0RWxlbWVudCh0LmNvbnRyb2xzKS5vZmZzZXRIZWlnaHQgLyAyICsgem9vbUZhY3RvciArIDE1ICsgJ3B4JzsKICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgdmFyIGV2ZW50ID0gKDAsIF9nZW5lcmFsLmNyZWF0ZUV2ZW50KSgnZW50ZXJlZGZ1bGxzY3JlZW4nLCB0LmdldEVsZW1lbnQodC5jb250YWluZXIpKTsKICAgICAgICAgICAgICAgICB0LmdldEVsZW1lbnQodC5jb250YWluZXIpLmRpc3BhdGNoRXZlbnQoZXZlbnQpOwogICAgICAgICAgICAgfSwKICAgICAgICAgICAgIGV4aXRGdWxsU2NyZWVuOiBmdW5jdGlvbiBleGl0RnVsbFNjcmVlbigpIHsKICAgICAgICAgICAgICAgICB2YXIgdCA9IHRoaXMsCiAgICAgICAgICAgICAgICAgICAgIGlzTmF0aXZlID0gdC5tZWRpYS5yZW5kZXJlck5hbWUgIT09IG51bGwgJiYgLyhuYXRpdmV8aHRtbDUpL2kudGVzdCh0Lm1lZGlhLnJlbmRlcmVyTmFtZSk7CgogICAgICAgICAgICAgICAgIGlmICghdC5pc1ZpZGVvKSB7CiAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0LmNvbnRhaW5lclNpemVUaW1lb3V0KTsKCiAgICAgICAgICAgICAgICAgaWYgKEZlYXR1cmVzLkhBU19UUlVFX05BVElWRV9GVUxMU0NSRUVOICYmIChGZWF0dXJlcy5JU19GVUxMU0NSRUVOIHx8IHQuaXNGdWxsU2NyZWVuKSkgewogICAgICAgICAgICAgICAgICAgICBGZWF0dXJlcy5jYW5jZWxGdWxsU2NyZWVuKCk7CiAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAoMCwgX2RvbS5yZW1vdmVDbGFzcykoX2RvY3VtZW50Mi5kZWZhdWx0LmRvY3VtZW50RWxlbWVudCwgdC5vcHRpb25zLmNsYXNzUHJlZml4ICsgJ2Z1bGxzY3JlZW4nKTsKICAgICAgICAgICAgICAgICAoMCwgX2RvbS5yZW1vdmVDbGFzcykodC5nZXRFbGVtZW50KHQuY29udGFpbmVyKSwgdC5vcHRpb25zLmNsYXNzUHJlZml4ICsgJ2NvbnRhaW5lci1mdWxsc2NyZWVuJyk7CgogICAgICAgICAgICAgICAgIGlmICh0Lm9wdGlvbnMuc2V0RGltZW5zaW9ucykgewogICAgICAgICAgICAgICAgICAgICB0LmdldEVsZW1lbnQodC5jb250YWluZXIpLnN0eWxlLndpZHRoID0gdC5ub3JtYWxXaWR0aCArICdweCc7CiAgICAgICAgICAgICAgICAgICAgIHQuZ2V0RWxlbWVudCh0LmNvbnRhaW5lcikuc3R5bGUuaGVpZ2h0ID0gdC5ub3JtYWxIZWlnaHQgKyAncHgnOwoKICAgICAgICAgICAgICAgICAgICAgaWYgKGlzTmF0aXZlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICB0Lm5vZGUuc3R5bGUud2lkdGggPSB0Lm5vcm1hbFdpZHRoICsgJ3B4JzsKICAgICAgICAgICAgICAgICAgICAgICAgIHQubm9kZS5zdHlsZS5oZWlnaHQgPSB0Lm5vcm1hbEhlaWdodCArICdweCc7CiAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZWxlbWVudHMgPSB0LmdldEVsZW1lbnQodC5jb250YWluZXIpLnF1ZXJ5U2VsZWN0b3JBbGwoJ2VtYmVkLCBvYmplY3QsIHZpZGVvJyksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RvdGFsMiA9IGVsZW1lbnRzLmxlbmd0aDsKICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgX3RvdGFsMjsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudHNbaV0uc3R5bGUud2lkdGggPSB0Lm5vcm1hbFdpZHRoICsgJ3B4JzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50c1tpXS5zdHlsZS5oZWlnaHQgPSB0Lm5vcm1hbEhlaWdodCArICdweCc7CiAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdC5tZWRpYS5zZXRTaXplID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICB0Lm1lZGlhLnNldFNpemUodC5ub3JtYWxXaWR0aCwgdC5ub3JtYWxIZWlnaHQpOwogICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICB2YXIgbGF5ZXJzID0gdC5nZXRFbGVtZW50KHQubGF5ZXJzKS5jaGlsZHJlbiwKICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsID0gbGF5ZXJzLmxlbmd0aDsKICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2kyID0gMDsgX2kyIDwgdG90YWw7IF9pMisrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICBsYXllcnNbX2kyXS5zdHlsZS53aWR0aCA9IHQubm9ybWFsV2lkdGggKyAncHgnOwogICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJzW19pMl0uc3R5bGUuaGVpZ2h0ID0gdC5ub3JtYWxIZWlnaHQgKyAncHgnOwogICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICBpZiAodC5mdWxsc2NyZWVuQnRuKSB7CiAgICAgICAgICAgICAgICAgICAgICgwLCBfZG9tLnJlbW92ZUNsYXNzKSh0LmZ1bGxzY3JlZW5CdG4sIHQub3B0aW9ucy5jbGFzc1ByZWZpeCArICd1bmZ1bGxzY3JlZW4nKTsKICAgICAgICAgICAgICAgICAgICAgKDAsIF9kb20uYWRkQ2xhc3MpKHQuZnVsbHNjcmVlbkJ0biwgdC5vcHRpb25zLmNsYXNzUHJlZml4ICsgJ2Z1bGxzY3JlZW4nKTsKICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgIHQuc2V0Q29udHJvbHNTaXplKCk7CiAgICAgICAgICAgICAgICAgdC5pc0Z1bGxTY3JlZW4gPSBmYWxzZTsKCiAgICAgICAgICAgICAgICAgdmFyIGNhcHRpb25UZXh0ID0gdC5nZXRFbGVtZW50KHQuY29udGFpbmVyKS5xdWVyeVNlbGVjdG9yKCcuJyArIHQub3B0aW9ucy5jbGFzc1ByZWZpeCArICdjYXB0aW9ucy10ZXh0Jyk7CiAgICAgICAgICAgICAgICAgaWYgKGNhcHRpb25UZXh0KSB7CiAgICAgICAgICAgICAgICAgICAgIGNhcHRpb25UZXh0LnN0eWxlLmZvbnRTaXplID0gJyc7CiAgICAgICAgICAgICAgICAgICAgIGNhcHRpb25UZXh0LnN0eWxlLmxpbmVIZWlnaHQgPSAnJzsKICAgICAgICAgICAgICAgICAgICAgdC5nZXRFbGVtZW50KHQuY29udGFpbmVyKS5xdWVyeVNlbGVjdG9yKCcuJyArIHQub3B0aW9ucy5jbGFzc1ByZWZpeCArICdjYXB0aW9ucy1wb3NpdGlvbicpLnN0eWxlLmJvdHRvbSA9ICcnOwogICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICB2YXIgZXZlbnQgPSAoMCwgX2dlbmVyYWwuY3JlYXRlRXZlbnQpKCdleGl0ZWRmdWxsc2NyZWVuJywgdC5nZXRFbGVtZW50KHQuY29udGFpbmVyKSk7CiAgICAgICAgICAgICAgICAgdC5nZXRFbGVtZW50KHQuY29udGFpbmVyKS5kaXNwYXRjaEV2ZW50KGV2ZW50KTsKICAgICAgICAgICAgIH0KICAgICAgICAgfSk7CgogICAgIH0sIHsgIjE2IjogMTYsICIyIjogMiwgIjI1IjogMjUsICIyNiI6IDI2LCAiMjciOiAyNywgIjI4IjogMjgsICIzIjogMywgIjUiOiA1IH1dLCAxMDogW2Z1bmN0aW9uIChfZGVyZXFfLCBtb2R1bGUsIGV4cG9ydHMpIHsKICAgICAgICAgJ3VzZSBzdHJpY3QnOwoKICAgICAgICAgdmFyIF9kb2N1bWVudCA9IF9kZXJlcV8oMik7CgogICAgICAgICB2YXIgX2RvY3VtZW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RvY3VtZW50KTsKCiAgICAgICAgIHZhciBfcGxheWVyID0gX2RlcmVxXygxNik7CgogICAgICAgICB2YXIgX3BsYXllcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wbGF5ZXIpOwoKICAgICAgICAgdmFyIF9pMThuID0gX2RlcmVxXyg1KTsKCiAgICAgICAgIHZhciBfaTE4bjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pMThuKTsKCiAgICAgICAgIHZhciBfZ2VuZXJhbCA9IF9kZXJlcV8oMjcpOwoKICAgICAgICAgdmFyIF9kb20gPSBfZGVyZXFfKDI2KTsKCiAgICAgICAgIGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgogICAgICAgICBPYmplY3QuYXNzaWduKF9wbGF5ZXIuY29uZmlnLCB7CiAgICAgICAgICAgICBwbGF5VGV4dDogbnVsbCwKCiAgICAgICAgICAgICBwYXVzZVRleHQ6IG51bGwKICAgICAgICAgfSk7CgogICAgICAgICBPYmplY3QuYXNzaWduKF9wbGF5ZXIyLmRlZmF1bHQucHJvdG90eXBlLCB7CiAgICAgICAgICAgICBidWlsZHBsYXlwYXVzZTogZnVuY3Rpb24gYnVpbGRwbGF5cGF1c2UocGxheWVyLCBjb250cm9scywgbGF5ZXJzLCBtZWRpYSkgewogICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcywKICAgICAgICAgICAgICAgICAgICAgb3AgPSB0Lm9wdGlvbnMsCiAgICAgICAgICAgICAgICAgICAgIHBsYXlUaXRsZSA9ICgwLCBfZ2VuZXJhbC5pc1N0cmluZykob3AucGxheVRleHQpID8gb3AucGxheVRleHQgOiBfaTE4bjIuZGVmYXVsdC50KCdtZWpzLnBsYXknKSwKICAgICAgICAgICAgICAgICAgICAgcGF1c2VUaXRsZSA9ICgwLCBfZ2VuZXJhbC5pc1N0cmluZykob3AucGF1c2VUZXh0KSA/IG9wLnBhdXNlVGV4dCA6IF9pMThuMi5kZWZhdWx0LnQoJ21lanMucGF1c2UnKSwKICAgICAgICAgICAgICAgICAgICAgcGxheSA9IF9kb2N1bWVudDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKCiAgICAgICAgICAgICAgICAgcGxheS5jbGFzc05hbWUgPSB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAnYnV0dG9uICcgKyB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAncGxheXBhdXNlLWJ1dHRvbiAnICsgdC5vcHRpb25zLmNsYXNzUHJlZml4ICsgJ3BsYXknOwogICAgICAgICAgICAgICAgIHBsYXkuaW5uZXJIVE1MID0gJzxidXR0b24gdHlwZT0iYnV0dG9uIiBhcmlhLWNvbnRyb2xzPSInICsgdC5pZCArICciIHRpdGxlPSInICsgcGxheVRpdGxlICsgJyIgYXJpYS1sYWJlbD0iJyArIHBhdXNlVGl0bGUgKyAnIiB0YWJpbmRleD0iMCI+PC9idXR0b24+JzsKICAgICAgICAgICAgICAgICBwbGF5LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICBpZiAodC5wYXVzZWQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHQucGxheSgpOwogICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgdC5wYXVzZSgpOwogICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgIHZhciBwbGF5QnRuID0gcGxheS5xdWVyeVNlbGVjdG9yKCdidXR0b24nKTsKICAgICAgICAgICAgICAgICB0LmFkZENvbnRyb2xFbGVtZW50KHBsYXksICdwbGF5cGF1c2UnKTsKCiAgICAgICAgICAgICAgICAgZnVuY3Rpb24gdG9nZ2xlUGxheVBhdXNlKHdoaWNoKSB7CiAgICAgICAgICAgICAgICAgICAgIGlmICgncGxheScgPT09IHdoaWNoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAoMCwgX2RvbS5yZW1vdmVDbGFzcykocGxheSwgdC5vcHRpb25zLmNsYXNzUHJlZml4ICsgJ3BsYXknKTsKICAgICAgICAgICAgICAgICAgICAgICAgICgwLCBfZG9tLnJlbW92ZUNsYXNzKShwbGF5LCB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAncmVwbGF5Jyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAoMCwgX2RvbS5hZGRDbGFzcykocGxheSwgdC5vcHRpb25zLmNsYXNzUHJlZml4ICsgJ3BhdXNlJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5QnRuLnNldEF0dHJpYnV0ZSgndGl0bGUnLCBwYXVzZVRpdGxlKTsKICAgICAgICAgICAgICAgICAgICAgICAgIHBsYXlCdG4uc2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsJywgcGF1c2VUaXRsZSk7CiAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CgogICAgICAgICAgICAgICAgICAgICAgICAgKDAsIF9kb20ucmVtb3ZlQ2xhc3MpKHBsYXksIHQub3B0aW9ucy5jbGFzc1ByZWZpeCArICdwYXVzZScpOwogICAgICAgICAgICAgICAgICAgICAgICAgKDAsIF9kb20ucmVtb3ZlQ2xhc3MpKHBsYXksIHQub3B0aW9ucy5jbGFzc1ByZWZpeCArICdyZXBsYXknKTsKICAgICAgICAgICAgICAgICAgICAgICAgICgwLCBfZG9tLmFkZENsYXNzKShwbGF5LCB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAncGxheScpOwogICAgICAgICAgICAgICAgICAgICAgICAgcGxheUJ0bi5zZXRBdHRyaWJ1dGUoJ3RpdGxlJywgcGxheVRpdGxlKTsKICAgICAgICAgICAgICAgICAgICAgICAgIHBsYXlCdG4uc2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsJywgcGxheVRpdGxlKTsKICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgdG9nZ2xlUGxheVBhdXNlKCdwc2UnKTsKCiAgICAgICAgICAgICAgICAgbWVkaWEuYWRkRXZlbnRMaXN0ZW5lcignbG9hZGVkbWV0YWRhdGEnLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgIGlmIChtZWRpYS5yZW5kZXJlck5hbWUuaW5kZXhPZignZmxhc2gnKSA9PT0gLTEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHRvZ2dsZVBsYXlQYXVzZSgncHNlJyk7CiAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICBtZWRpYS5hZGRFdmVudExpc3RlbmVyKCdwbGF5JywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICB0b2dnbGVQbGF5UGF1c2UoJ3BsYXknKTsKICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICBtZWRpYS5hZGRFdmVudExpc3RlbmVyKCdwbGF5aW5nJywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICB0b2dnbGVQbGF5UGF1c2UoJ3BsYXknKTsKICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICBtZWRpYS5hZGRFdmVudExpc3RlbmVyKCdwYXVzZScsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgdG9nZ2xlUGxheVBhdXNlKCdwc2UnKTsKICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICBtZWRpYS5hZGRFdmVudExpc3RlbmVyKCdlbmRlZCcsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgaWYgKCFwbGF5ZXIub3B0aW9ucy5sb29wKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAoMCwgX2RvbS5yZW1vdmVDbGFzcykocGxheSwgdC5vcHRpb25zLmNsYXNzUHJlZml4ICsgJ3BhdXNlJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAoMCwgX2RvbS5yZW1vdmVDbGFzcykocGxheSwgdC5vcHRpb25zLmNsYXNzUHJlZml4ICsgJ3BsYXknKTsKICAgICAgICAgICAgICAgICAgICAgICAgICgwLCBfZG9tLmFkZENsYXNzKShwbGF5LCB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAncmVwbGF5Jyk7CiAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5QnRuLnNldEF0dHJpYnV0ZSgndGl0bGUnLCBwbGF5VGl0bGUpOwogICAgICAgICAgICAgICAgICAgICAgICAgcGxheUJ0bi5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnLCBwbGF5VGl0bGUpOwogICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICB9CiAgICAgICAgIH0pOwoKICAgICB9LCB7ICIxNiI6IDE2LCAiMiI6IDIsICIyNiI6IDI2LCAiMjciOiAyNywgIjUiOiA1IH1dLCAxMTogW2Z1bmN0aW9uIChfZGVyZXFfLCBtb2R1bGUsIGV4cG9ydHMpIHsKICAgICAgICAgJ3VzZSBzdHJpY3QnOwoKICAgICAgICAgdmFyIF9kb2N1bWVudCA9IF9kZXJlcV8oMik7CgogICAgICAgICB2YXIgX2RvY3VtZW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RvY3VtZW50KTsKCiAgICAgICAgIHZhciBfcGxheWVyID0gX2RlcmVxXygxNik7CgogICAgICAgICB2YXIgX3BsYXllcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wbGF5ZXIpOwoKICAgICAgICAgdmFyIF9pMThuID0gX2RlcmVxXyg1KTsKCiAgICAgICAgIHZhciBfaTE4bjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pMThuKTsKCiAgICAgICAgIHZhciBfY29uc3RhbnRzID0gX2RlcmVxXygyNSk7CgogICAgICAgICB2YXIgX3RpbWUgPSBfZGVyZXFfKDMwKTsKCiAgICAgICAgIHZhciBfZG9tID0gX2RlcmVxXygyNik7CgogICAgICAgICBmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKICAgICAgICAgT2JqZWN0LmFzc2lnbihfcGxheWVyLmNvbmZpZywgewogICAgICAgICAgICAgZW5hYmxlUHJvZ3Jlc3NUb29sdGlwOiB0cnVlLAoKICAgICAgICAgICAgIHVzZVNtb290aEhvdmVyOiB0cnVlLAoKICAgICAgICAgICAgIGZvcmNlTGl2ZTogZmFsc2UKICAgICAgICAgfSk7CgogICAgICAgICBPYmplY3QuYXNzaWduKF9wbGF5ZXIyLmRlZmF1bHQucHJvdG90eXBlLCB7CiAgICAgICAgICAgICBidWlsZHByb2dyZXNzOiBmdW5jdGlvbiBidWlsZHByb2dyZXNzKHBsYXllciwgY29udHJvbHMsIGxheWVycywgbWVkaWEpIHsKCiAgICAgICAgICAgICAgICAgdmFyIGxhc3RLZXlQcmVzc1RpbWUgPSAwLAogICAgICAgICAgICAgICAgICAgICBtb3VzZUlzRG93biA9IGZhbHNlLAogICAgICAgICAgICAgICAgICAgICBzdGFydGVkUGF1c2VkID0gZmFsc2U7CgogICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcywKICAgICAgICAgICAgICAgICAgICAgYXV0b1Jld2luZEluaXRpYWwgPSBwbGF5ZXIub3B0aW9ucy5hdXRvUmV3aW5kLAogICAgICAgICAgICAgICAgICAgICB0b29sdGlwID0gcGxheWVyLm9wdGlvbnMuZW5hYmxlUHJvZ3Jlc3NUb29sdGlwID8gJzxzcGFuIGNsYXNzPSInICsgdC5vcHRpb25zLmNsYXNzUHJlZml4ICsgJ3RpbWUtZmxvYXQiPicgKyAoJzxzcGFuIGNsYXNzPSInICsgdC5vcHRpb25zLmNsYXNzUHJlZml4ICsgJ3RpbWUtZmxvYXQtY3VycmVudCI+MDA6MDA8L3NwYW4+JykgKyAoJzxzcGFuIGNsYXNzPSInICsgdC5vcHRpb25zLmNsYXNzUHJlZml4ICsgJ3RpbWUtZmxvYXQtY29ybmVyIj48L3NwYW4+JykgKyAnPC9zcGFuPicgOiAnJywKICAgICAgICAgICAgICAgICAgICAgcmFpbCA9IF9kb2N1bWVudDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKCiAgICAgICAgICAgICAgICAgcmFpbC5jbGFzc05hbWUgPSB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAndGltZS1yYWlsJzsKICAgICAgICAgICAgICAgICByYWlsLmlubmVySFRNTCA9ICc8c3BhbiBjbGFzcz0iJyArIHQub3B0aW9ucy5jbGFzc1ByZWZpeCArICd0aW1lLXRvdGFsICcgKyB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAndGltZS1zbGlkZXIiPicgKyAoJzxzcGFuIGNsYXNzPSInICsgdC5vcHRpb25zLmNsYXNzUHJlZml4ICsgJ3RpbWUtYnVmZmVyaW5nIj48L3NwYW4+JykgKyAoJzxzcGFuIGNsYXNzPSInICsgdC5vcHRpb25zLmNsYXNzUHJlZml4ICsgJ3RpbWUtbG9hZGVkIj48L3NwYW4+JykgKyAoJzxzcGFuIGNsYXNzPSInICsgdC5vcHRpb25zLmNsYXNzUHJlZml4ICsgJ3RpbWUtY3VycmVudCI+PC9zcGFuPicpICsgKCc8c3BhbiBjbGFzcz0iJyArIHQub3B0aW9ucy5jbGFzc1ByZWZpeCArICd0aW1lLWhvdmVyZWQgbm8taG92ZXIiPjwvc3Bhbj4nKSArICgnPHNwYW4gY2xhc3M9IicgKyB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAndGltZS1oYW5kbGUiPjxzcGFuIGNsYXNzPSInICsgdC5vcHRpb25zLmNsYXNzUHJlZml4ICsgJ3RpbWUtaGFuZGxlLWNvbnRlbnQiPjwvc3Bhbj48L3NwYW4+JykgKyAoJycgKyB0b29sdGlwKSArICc8L3NwYW4+JzsKCiAgICAgICAgICAgICAgICAgdC5hZGRDb250cm9sRWxlbWVudChyYWlsLCAncHJvZ3Jlc3MnKTsKCiAgICAgICAgICAgICAgICAgdC5vcHRpb25zLmtleUFjdGlvbnMucHVzaCh7CiAgICAgICAgICAgICAgICAgICAgIGtleXM6IFszNywgMjI3XSwKICAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiBmdW5jdGlvbiBhY3Rpb24ocGxheWVyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzTmFOKHBsYXllci5kdXJhdGlvbikgJiYgcGxheWVyLmR1cmF0aW9uID4gMCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwbGF5ZXIuaXNWaWRlbykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXIuc2hvd0NvbnRyb2xzKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllci5zdGFydENvbnRyb2xzVGltZXIoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0aW1lU2xpZGVyID0gcGxheWVyLmdldEVsZW1lbnQocGxheWVyLmNvbnRhaW5lcikucXVlcnlTZWxlY3RvcignLicgKyB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAndGltZS10b3RhbCcpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aW1lU2xpZGVyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVTbGlkZXIuZm9jdXMoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuZXdUaW1lID0gTWF0aC5tYXgocGxheWVyLmN1cnJlbnRUaW1lIC0gcGxheWVyLm9wdGlvbnMuZGVmYXVsdFNlZWtCYWNrd2FyZEludGVydmFsKHBsYXllciksIDApOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXBsYXllci5wYXVzZWQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyLnBhdXNlKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyLnNldEN1cnJlbnRUaW1lKG5ld1RpbWUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDApOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyLnBsYXkoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAwKTsKICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICAgICAga2V5czogWzM5LCAyMjhdLAogICAgICAgICAgICAgICAgICAgICBhY3Rpb246IGZ1bmN0aW9uIGFjdGlvbihwbGF5ZXIpIHsKCiAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzTmFOKHBsYXllci5kdXJhdGlvbikgJiYgcGxheWVyLmR1cmF0aW9uID4gMCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwbGF5ZXIuaXNWaWRlbykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXIuc2hvd0NvbnRyb2xzKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllci5zdGFydENvbnRyb2xzVGltZXIoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0aW1lU2xpZGVyID0gcGxheWVyLmdldEVsZW1lbnQocGxheWVyLmNvbnRhaW5lcikucXVlcnlTZWxlY3RvcignLicgKyB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAndGltZS10b3RhbCcpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aW1lU2xpZGVyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVTbGlkZXIuZm9jdXMoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuZXdUaW1lID0gTWF0aC5taW4ocGxheWVyLmN1cnJlbnRUaW1lICsgcGxheWVyLm9wdGlvbnMuZGVmYXVsdFNlZWtGb3J3YXJkSW50ZXJ2YWwocGxheWVyKSwgcGxheWVyLmR1cmF0aW9uKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFwbGF5ZXIucGF1c2VkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllci5wYXVzZSgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllci5zZXRDdXJyZW50VGltZShuZXdUaW1lKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAwKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllci5wbGF5KCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgMCk7CiAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgdC5yYWlsID0gY29udHJvbHMucXVlcnlTZWxlY3RvcignLicgKyB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAndGltZS1yYWlsJyk7CiAgICAgICAgICAgICAgICAgdC50b3RhbCA9IGNvbnRyb2xzLnF1ZXJ5U2VsZWN0b3IoJy4nICsgdC5vcHRpb25zLmNsYXNzUHJlZml4ICsgJ3RpbWUtdG90YWwnKTsKICAgICAgICAgICAgICAgICB0LmxvYWRlZCA9IGNvbnRyb2xzLnF1ZXJ5U2VsZWN0b3IoJy4nICsgdC5vcHRpb25zLmNsYXNzUHJlZml4ICsgJ3RpbWUtbG9hZGVkJyk7CiAgICAgICAgICAgICAgICAgdC5jdXJyZW50ID0gY29udHJvbHMucXVlcnlTZWxlY3RvcignLicgKyB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAndGltZS1jdXJyZW50Jyk7CiAgICAgICAgICAgICAgICAgdC5oYW5kbGUgPSBjb250cm9scy5xdWVyeVNlbGVjdG9yKCcuJyArIHQub3B0aW9ucy5jbGFzc1ByZWZpeCArICd0aW1lLWhhbmRsZScpOwogICAgICAgICAgICAgICAgIHQudGltZWZsb2F0ID0gY29udHJvbHMucXVlcnlTZWxlY3RvcignLicgKyB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAndGltZS1mbG9hdCcpOwogICAgICAgICAgICAgICAgIHQudGltZWZsb2F0Y3VycmVudCA9IGNvbnRyb2xzLnF1ZXJ5U2VsZWN0b3IoJy4nICsgdC5vcHRpb25zLmNsYXNzUHJlZml4ICsgJ3RpbWUtZmxvYXQtY3VycmVudCcpOwogICAgICAgICAgICAgICAgIHQuc2xpZGVyID0gY29udHJvbHMucXVlcnlTZWxlY3RvcignLicgKyB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAndGltZS1zbGlkZXInKTsKICAgICAgICAgICAgICAgICB0LmhvdmVyZWQgPSBjb250cm9scy5xdWVyeVNlbGVjdG9yKCcuJyArIHQub3B0aW9ucy5jbGFzc1ByZWZpeCArICd0aW1lLWhvdmVyZWQnKTsKICAgICAgICAgICAgICAgICB0LmJ1ZmZlciA9IGNvbnRyb2xzLnF1ZXJ5U2VsZWN0b3IoJy4nICsgdC5vcHRpb25zLmNsYXNzUHJlZml4ICsgJ3RpbWUtYnVmZmVyaW5nJyk7CiAgICAgICAgICAgICAgICAgdC5uZXdUaW1lID0gMDsKICAgICAgICAgICAgICAgICB0LmZvcmNlZEhhbmRsZVBhdXNlID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgdC5zZXRUcmFuc2Zvcm1TdHlsZSA9IGZ1bmN0aW9uIChlbGVtZW50LCB2YWx1ZSkgewogICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnN0eWxlLnRyYW5zZm9ybSA9IHZhbHVlOwogICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnN0eWxlLndlYmtpdFRyYW5zZm9ybSA9IHZhbHVlOwogICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnN0eWxlLk1velRyYW5zZm9ybSA9IHZhbHVlOwogICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnN0eWxlLm1zVHJhbnNmb3JtID0gdmFsdWU7CiAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUuT1RyYW5zZm9ybSA9IHZhbHVlOwogICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgIHQuYnVmZmVyLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CgogICAgICAgICAgICAgICAgIHZhciBoYW5kbGVNb3VzZU1vdmUgPSBmdW5jdGlvbiBoYW5kbGVNb3VzZU1vdmUoZSkgewogICAgICAgICAgICAgICAgICAgICB2YXIgdG90YWxTdHlsZXMgPSBnZXRDb21wdXRlZFN0eWxlKHQudG90YWwpLAogICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0U3R5bGVzID0gKDAsIF9kb20ub2Zmc2V0KSh0LnRvdGFsKSwKICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoID0gdC50b3RhbC5vZmZzZXRXaWR0aCwKICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodG90YWxTdHlsZXMud2Via2l0VHJhbnNmb3JtICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICd3ZWJraXRUcmFuc2Zvcm0nOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodG90YWxTdHlsZXMubW96VHJhbnNmb3JtICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdtb3pUcmFuc2Zvcm0gJzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRvdGFsU3R5bGVzLm9UcmFuc2Zvcm0gIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ29UcmFuc2Zvcm0nOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodG90YWxTdHlsZXMubXNUcmFuc2Zvcm0gIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ21zVHJhbnNmb3JtJzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3RyYW5zZm9ybSc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgfSgpLAogICAgICAgICAgICAgICAgICAgICAgICAgY3NzTWF0cml4ID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgnV2ViS2l0Q1NTTWF0cml4JyBpbiB3aW5kb3cpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdXZWJLaXRDU1NNYXRyaXgnOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoJ01TQ1NTTWF0cml4JyBpbiB3aW5kb3cpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdNU0NTU01hdHJpeCc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICgnQ1NTTWF0cml4JyBpbiB3aW5kb3cpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdDU1NNYXRyaXgnOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgIH0oKTsKCiAgICAgICAgICAgICAgICAgICAgIHZhciBwZXJjZW50YWdlID0gMCwKICAgICAgICAgICAgICAgICAgICAgICAgIGxlZnRQb3MgPSAwLAogICAgICAgICAgICAgICAgICAgICAgICAgcG9zID0gMCwKICAgICAgICAgICAgICAgICAgICAgICAgIHggPSB2b2lkIDA7CgogICAgICAgICAgICAgICAgICAgICBpZiAoZS5vcmlnaW5hbEV2ZW50ICYmIGUub3JpZ2luYWxFdmVudC5jaGFuZ2VkVG91Y2hlcykgewogICAgICAgICAgICAgICAgICAgICAgICAgeCA9IGUub3JpZ2luYWxFdmVudC5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWDsKICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChlLmNoYW5nZWRUb3VjaGVzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICB4ID0gZS5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWDsKICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHggPSBlLnBhZ2VYOwogICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICBpZiAodC5nZXREdXJhdGlvbigpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoeCA8IG9mZnNldFN0eWxlcy5sZWZ0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeCA9IG9mZnNldFN0eWxlcy5sZWZ0OwogICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh4ID4gd2lkdGggKyBvZmZzZXRTdHlsZXMubGVmdCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHggPSB3aWR0aCArIG9mZnNldFN0eWxlcy5sZWZ0OwogICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgIHBvcyA9IHggLSBvZmZzZXRTdHlsZXMubGVmdDsKICAgICAgICAgICAgICAgICAgICAgICAgIHBlcmNlbnRhZ2UgPSBwb3MgLyB3aWR0aDsKICAgICAgICAgICAgICAgICAgICAgICAgIHQubmV3VGltZSA9IHBlcmNlbnRhZ2UgKiB0LmdldER1cmF0aW9uKCk7CgogICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1vdXNlSXNEb3duICYmIHQuZ2V0Q3VycmVudFRpbWUoKSAhPT0gbnVsbCAmJiB0Lm5ld1RpbWUudG9GaXhlZCg0KSAhPT0gdC5nZXRDdXJyZW50VGltZSgpLnRvRml4ZWQoNCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LnNldEN1cnJlbnRSYWlsSGFuZGxlKHQubmV3VGltZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC51cGRhdGVDdXJyZW50KHQubmV3VGltZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFfY29uc3RhbnRzLklTX0lPUyAmJiAhX2NvbnN0YW50cy5JU19BTkRST0lEKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBvcyA8IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zID0gMDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHQub3B0aW9ucy51c2VTbW9vdGhIb3ZlciAmJiBjc3NNYXRyaXggIT09IG51bGwgJiYgdHlwZW9mIHdpbmRvd1tjc3NNYXRyaXhdICE9PSAndW5kZWZpbmVkJykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWF0cml4ID0gbmV3IHdpbmRvd1tjc3NNYXRyaXhdKGdldENvbXB1dGVkU3R5bGUodC5oYW5kbGUpW3RyYW5zZm9ybV0pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlTG9jYXRpb24gPSBtYXRyaXgubTQxLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaG92ZXJTY2FsZVggPSBwb3MgLyBwYXJzZUZsb2F0KGdldENvbXB1dGVkU3R5bGUodC50b3RhbCkud2lkdGgpIC0gaGFuZGxlTG9jYXRpb24gLyBwYXJzZUZsb2F0KGdldENvbXB1dGVkU3R5bGUodC50b3RhbCkud2lkdGgpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5ob3ZlcmVkLnN0eWxlLmxlZnQgPSBoYW5kbGVMb2NhdGlvbiArICdweCc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQuc2V0VHJhbnNmb3JtU3R5bGUodC5ob3ZlcmVkLCAnc2NhbGVYKCcgKyBob3ZlclNjYWxlWCArICcpJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQuaG92ZXJlZC5zZXRBdHRyaWJ1dGUoJ3BvcycsIHBvcyk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaG92ZXJTY2FsZVggPj0gMCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKDAsIF9kb20ucmVtb3ZlQ2xhc3MpKHQuaG92ZXJlZCwgJ25lZ2F0aXZlJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoMCwgX2RvbS5hZGRDbGFzcykodC5ob3ZlcmVkLCAnbmVnYXRpdmUnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHQudGltZWZsb2F0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBoYWxmID0gdC50aW1lZmxvYXQub2Zmc2V0V2lkdGggLyAyLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0Q29udGFpbmVyID0gbWVqcy5VdGlscy5vZmZzZXQodC5nZXRFbGVtZW50KHQuY29udGFpbmVyKSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b29sdGlwU3R5bGVzID0gZ2V0Q29tcHV0ZWRTdHlsZSh0LnRpbWVmbG9hdCk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoeCAtIG9mZnNldENvbnRhaW5lci5sZWZ0IDwgdC50aW1lZmxvYXQub2Zmc2V0V2lkdGgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlZnRQb3MgPSBoYWxmOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHggLSBvZmZzZXRDb250YWluZXIubGVmdCA+PSB0LmdldEVsZW1lbnQodC5jb250YWluZXIpLm9mZnNldFdpZHRoIC0gaGFsZikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVmdFBvcyA9IHQudG90YWwub2Zmc2V0V2lkdGggLSBoYWxmOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVmdFBvcyA9IHBvczsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCgwLCBfZG9tLmhhc0NsYXNzKSh0LmdldEVsZW1lbnQodC5jb250YWluZXIpLCB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAnbG9uZy12aWRlbycpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZWZ0UG9zICs9IHBhcnNlRmxvYXQodG9vbHRpcFN0eWxlcy5tYXJnaW5MZWZ0KSAvIDIgKyB0LnRpbWVmbG9hdC5vZmZzZXRXaWR0aCAvIDI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQudGltZWZsb2F0LnN0eWxlLmxlZnQgPSBsZWZ0UG9zICsgJ3B4JzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC50aW1lZmxvYXRjdXJyZW50LmlubmVySFRNTCA9ICgwLCBfdGltZS5zZWNvbmRzVG9UaW1lQ29kZSkodC5uZXdUaW1lLCBwbGF5ZXIub3B0aW9ucy5hbHdheXNTaG93SG91cnMsIHBsYXllci5vcHRpb25zLnNob3dUaW1lY29kZUZyYW1lQ291bnQsIHBsYXllci5vcHRpb25zLmZyYW1lc1BlclNlY29uZCwgcGxheWVyLm9wdGlvbnMuc2Vjb25kc0RlY2ltYWxMZW5ndGgsIHBsYXllci5vcHRpb25zLnRpbWVGb3JtYXQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LnRpbWVmbG9hdC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIV9jb25zdGFudHMuSVNfSU9TICYmICFfY29uc3RhbnRzLklTX0FORFJPSUQgJiYgdC50aW1lZmxvYXQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIGxlZnRQb3MgPSB0LnRpbWVmbG9hdC5vZmZzZXRXaWR0aCArIHdpZHRoID49IHQuZ2V0RWxlbWVudCh0LmNvbnRhaW5lcikub2Zmc2V0V2lkdGggPyB0LnRpbWVmbG9hdC5vZmZzZXRXaWR0aCAvIDIgOiAwOwogICAgICAgICAgICAgICAgICAgICAgICAgdC50aW1lZmxvYXQuc3R5bGUubGVmdCA9IGxlZnRQb3MgKyAncHgnOwogICAgICAgICAgICAgICAgICAgICAgICAgdC50aW1lZmxvYXQuc3R5bGUubGVmdCA9IGxlZnRQb3MgKyAncHgnOwogICAgICAgICAgICAgICAgICAgICAgICAgdC50aW1lZmxvYXQuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7CiAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICB1cGRhdGVTbGlkZXIgPSBmdW5jdGlvbiB1cGRhdGVTbGlkZXIoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2Vjb25kcyA9IHQuZ2V0Q3VycmVudFRpbWUoKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lU2xpZGVyVGV4dCA9IF9pMThuMi5kZWZhdWx0LnQoJ21lanMudGltZS1zbGlkZXInKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lID0gKDAsIF90aW1lLnNlY29uZHNUb1RpbWVDb2RlKShzZWNvbmRzLCBwbGF5ZXIub3B0aW9ucy5hbHdheXNTaG93SG91cnMsIHBsYXllci5vcHRpb25zLnNob3dUaW1lY29kZUZyYW1lQ291bnQsIHBsYXllci5vcHRpb25zLmZyYW1lc1BlclNlY29uZCwgcGxheWVyLm9wdGlvbnMuc2Vjb25kc0RlY2ltYWxMZW5ndGgsIHBsYXllci5vcHRpb25zLnRpbWVGb3JtYXQpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uID0gdC5nZXREdXJhdGlvbigpOwoKICAgICAgICAgICAgICAgICAgICAgICAgIHQuc2xpZGVyLnNldEF0dHJpYnV0ZSgncm9sZScsICdzbGlkZXInKTsKICAgICAgICAgICAgICAgICAgICAgICAgIHQuc2xpZGVyLnRhYkluZGV4ID0gMDsKCiAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWVkaWEucGF1c2VkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5zbGlkZXIuc2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsJywgdGltZVNsaWRlclRleHQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQuc2xpZGVyLnNldEF0dHJpYnV0ZSgnYXJpYS12YWx1ZW1pbicsIDApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQuc2xpZGVyLnNldEF0dHJpYnV0ZSgnYXJpYS12YWx1ZW1heCcsIGlzTmFOKGR1cmF0aW9uKSA/IDAgOiBkdXJhdGlvbik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5zbGlkZXIuc2V0QXR0cmlidXRlKCdhcmlhLXZhbHVlbm93Jywgc2Vjb25kcyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5zbGlkZXIuc2V0QXR0cmlidXRlKCdhcmlhLXZhbHVldGV4dCcsIHRpbWUpOwogICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LnNsaWRlci5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LnNsaWRlci5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtdmFsdWVtaW4nKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LnNsaWRlci5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtdmFsdWVtYXgnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LnNsaWRlci5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtdmFsdWVub3cnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LnNsaWRlci5yZW1vdmVBdHRyaWJ1dGUoJ2FyaWEtdmFsdWV0ZXh0Jyk7CiAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgIHJlc3RhcnRQbGF5ZXIgPSBmdW5jdGlvbiByZXN0YXJ0UGxheWVyKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5ldyBEYXRlKCkgLSBsYXN0S2V5UHJlc3NUaW1lID49IDEwMDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LnBsYXkoKTsKICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgaGFuZGxlTW91c2V1cCA9IGZ1bmN0aW9uIGhhbmRsZU1vdXNldXAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobW91c2VJc0Rvd24gJiYgdC5nZXRDdXJyZW50VGltZSgpICE9PSBudWxsICYmIHQubmV3VGltZS50b0ZpeGVkKDQpICE9PSB0LmdldEN1cnJlbnRUaW1lKCkudG9GaXhlZCg0KSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQuc2V0Q3VycmVudFRpbWUodC5uZXdUaW1lKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LnNldEN1cnJlbnRSYWlsSGFuZGxlKHQubmV3VGltZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC51cGRhdGVDdXJyZW50KHQubmV3VGltZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodC5mb3JjZWRIYW5kbGVQYXVzZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQuc2xpZGVyLmZvY3VzKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5wbGF5KCk7CiAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICB0LmZvcmNlZEhhbmRsZVBhdXNlID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgIHQuc2xpZGVyLmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICBwbGF5ZXIub3B0aW9ucy5hdXRvUmV3aW5kID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgdC5zbGlkZXIuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgcGxheWVyLm9wdGlvbnMuYXV0b1Jld2luZCA9IGF1dG9SZXdpbmRJbml0aWFsOwogICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgIHQuc2xpZGVyLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgICAgICBpZiAobmV3IERhdGUoKSAtIGxhc3RLZXlQcmVzc1RpbWUgPj0gMTAwMCkgewogICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRlZFBhdXNlZCA9IHQucGF1c2VkOwogICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICBpZiAodC5vcHRpb25zLmVuYWJsZUtleWJvYXJkICYmIHQub3B0aW9ucy5rZXlBY3Rpb25zLmxlbmd0aCkgewoKICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBrZXlDb2RlID0gZS53aGljaCB8fCBlLmtleUNvZGUgfHwgMCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbiA9IHQuZ2V0RHVyYXRpb24oKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWVrRm9yd2FyZCA9IHBsYXllci5vcHRpb25zLmRlZmF1bHRTZWVrRm9yd2FyZEludGVydmFsKG1lZGlhKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWVrQmFja3dhcmQgPSBwbGF5ZXIub3B0aW9ucy5kZWZhdWx0U2Vla0JhY2t3YXJkSW50ZXJ2YWwobWVkaWEpOwoKICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZWVrVGltZSA9IHQuZ2V0Q3VycmVudFRpbWUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2b2x1bWUgPSB0LmdldEVsZW1lbnQodC5jb250YWluZXIpLnF1ZXJ5U2VsZWN0b3IoJy4nICsgdC5vcHRpb25zLmNsYXNzUHJlZml4ICsgJ3ZvbHVtZS1zbGlkZXInKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoa2V5Q29kZSA9PT0gMzggfHwga2V5Q29kZSA9PT0gNDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodm9sdW1lKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZvbHVtZS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHQuaXNWaWRlbykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LnNob3dDb250cm9scygpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LnN0YXJ0Q29udHJvbHNUaW1lcigpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5ld1ZvbHVtZSA9IGtleUNvZGUgPT09IDM4ID8gTWF0aC5taW4odC52b2x1bWUgKyAwLjEsIDEpIDogTWF0aC5tYXgodC52b2x1bWUgLSAwLjEsIDApLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtdXRlUGxheWVyID0gbmV3Vm9sdW1lIDw9IDA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5zZXRWb2x1bWUobmV3Vm9sdW1lKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LnNldE11dGVkKG11dGVQbGF5ZXIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZvbHVtZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2b2x1bWUuc3R5bGUuZGlzcGxheSA9ICdub25lJzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChrZXlDb2RlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzNzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHQuZ2V0RHVyYXRpb24oKSAhPT0gSW5maW5pdHkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlZWtUaW1lIC09IHNlZWtCYWNrd2FyZDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM5OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodC5nZXREdXJhdGlvbigpICE9PSBJbmZpbml0eSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vla1RpbWUgKz0gc2Vla0ZvcndhcmQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzNjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vla1RpbWUgPSAwOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM1OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWVrVGltZSA9IGR1cmF0aW9uOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDEzOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzI6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfY29uc3RhbnRzLklTX0ZJUkVGT1gpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0LnBhdXNlZCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQucGxheSgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LnBhdXNlKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICBzZWVrVGltZSA9IHNlZWtUaW1lIDwgMCB8fCBpc05hTihzZWVrVGltZSkgPyAwIDogc2Vla1RpbWUgPj0gZHVyYXRpb24gPyBkdXJhdGlvbiA6IE1hdGguZmxvb3Ioc2Vla1RpbWUpOwogICAgICAgICAgICAgICAgICAgICAgICAgbGFzdEtleVByZXNzVGltZSA9IG5ldyBEYXRlKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXN0YXJ0ZWRQYXVzZWQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXIucGF1c2UoKTsKICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LnNldEN1cnJlbnRUaW1lKHNlZWtUaW1lKTsKICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDApOwoKICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZWVrVGltZSA8IHQuZ2V0RHVyYXRpb24oKSAmJiAhc3RhcnRlZFBhdXNlZCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQocmVzdGFydFBsYXllciwgMTEwMCk7CiAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyLnNob3dDb250cm9scygpOwoKICAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7CiAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgdmFyIGV2ZW50cyA9IFsnbW91c2Vkb3duJywgJ3RvdWNoc3RhcnQnXTsKCiAgICAgICAgICAgICAgICAgdC5zbGlkZXIuYWRkRXZlbnRMaXN0ZW5lcignZHJhZ3N0YXJ0JywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCB0b3RhbCA9IGV2ZW50cy5sZW5ndGg7IGkgPCB0b3RhbDsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgIHQuc2xpZGVyLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnRzW2ldLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgdC5mb3JjZWRIYW5kbGVQYXVzZSA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHQuZ2V0RHVyYXRpb24oKSAhPT0gSW5maW5pdHkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZS53aGljaCA9PT0gMSB8fCBlLndoaWNoID09PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdC5wYXVzZWQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQucGF1c2UoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQuZm9yY2VkSGFuZGxlUGF1c2UgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb3VzZUlzRG93biA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZU1vdXNlTW92ZShlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVuZEV2ZW50cyA9IFsnbW91c2V1cCcsICd0b3VjaGVuZCddOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDAsIHRvdGFsRXZlbnRzID0gZW5kRXZlbnRzLmxlbmd0aDsgaiA8IHRvdGFsRXZlbnRzOyBqKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQuZ2V0RWxlbWVudCh0LmNvbnRhaW5lcikuYWRkRXZlbnRMaXN0ZW5lcihlbmRFdmVudHNbal0sIGZ1bmN0aW9uIChldmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSBldmVudC50YXJnZXQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldCA9PT0gdC5zbGlkZXIgfHwgdGFyZ2V0LmNsb3Nlc3QoJy4nICsgdC5vcHRpb25zLmNsYXNzUHJlZml4ICsgJ3RpbWUtc2xpZGVyJykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlTW91c2VNb3ZlKGV2ZW50KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0Lmdsb2JhbEJpbmQoJ21vdXNldXAuZHVyIHRvdWNoZW5kLmR1cicsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZU1vdXNldXAoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vdXNlSXNEb3duID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodC50aW1lZmxvYXQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LnRpbWVmbG9hdC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgIH0sIF9jb25zdGFudHMuU1VQUE9SVF9QQVNTSVZFX0VWRU5UICYmIGV2ZW50c1tpXSA9PT0gJ3RvdWNoc3RhcnQnID8geyBwYXNzaXZlOiB0cnVlIH0gOiBmYWxzZSk7CiAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgIHQuc2xpZGVyLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZW50ZXInLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgICAgICBpZiAoZS50YXJnZXQgPT09IHQuc2xpZGVyICYmIHQuZ2V0RHVyYXRpb24oKSAhPT0gSW5maW5pdHkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHQuZ2V0RWxlbWVudCh0LmNvbnRhaW5lcikuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgZnVuY3Rpb24gKGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9IGV2ZW50LnRhcmdldDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0ID09PSB0LnNsaWRlciB8fCB0YXJnZXQuY2xvc2VzdCgnLicgKyB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAndGltZS1zbGlkZXInKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVNb3VzZU1vdmUoZXZlbnQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHQudGltZWZsb2F0ICYmICFfY29uc3RhbnRzLklTX0lPUyAmJiAhX2NvbnN0YW50cy5JU19BTkRST0lEKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC50aW1lZmxvYXQuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7CiAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodC5ob3ZlcmVkICYmICFfY29uc3RhbnRzLklTX0lPUyAmJiAhX2NvbnN0YW50cy5JU19BTkRST0lEICYmIHQub3B0aW9ucy51c2VTbW9vdGhIb3ZlcikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICgwLCBfZG9tLnJlbW92ZUNsYXNzKSh0LmhvdmVyZWQsICduby1ob3ZlcicpOwogICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgdC5zbGlkZXIuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgaWYgKHQuZ2V0RHVyYXRpb24oKSAhPT0gSW5maW5pdHkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbW91c2VJc0Rvd24pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodC50aW1lZmxvYXQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC50aW1lZmxvYXQuc3R5bGUuZGlzcGxheSA9ICdub25lJzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHQuaG92ZXJlZCAmJiB0Lm9wdGlvbnMudXNlU21vb3RoSG92ZXIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKDAsIF9kb20uYWRkQ2xhc3MpKHQuaG92ZXJlZCwgJ25vLWhvdmVyJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgIHQuYnJvYWRjYXN0Q2FsbGJhY2sgPSBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgICAgICB2YXIgYnJvYWRjYXN0ID0gY29udHJvbHMucXVlcnlTZWxlY3RvcignLicgKyB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAnYnJvYWRjYXN0Jyk7CiAgICAgICAgICAgICAgICAgICAgIGlmICghdC5vcHRpb25zLmZvcmNlTGl2ZSAmJiB0LmdldER1cmF0aW9uKCkgIT09IEluZmluaXR5KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYnJvYWRjYXN0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5zbGlkZXIuc3R5bGUuZGlzcGxheSA9ICcnOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyb2FkY2FzdC5yZW1vdmUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXIuc2V0UHJvZ3Jlc3NSYWlsKGUpOwogICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0LmZvcmNlZEhhbmRsZVBhdXNlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyLnNldEN1cnJlbnRSYWlsKGUpOwogICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlU2xpZGVyKCk7CiAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWJyb2FkY2FzdCAmJiB0Lm9wdGlvbnMuZm9yY2VMaXZlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGFiZWwgPSBfZG9jdW1lbnQyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWwuY2xhc3NOYW1lID0gdC5vcHRpb25zLmNsYXNzUHJlZml4ICsgJ2Jyb2FkY2FzdCc7CiAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbC5pbm5lclRleHQgPSBfaTE4bjIuZGVmYXVsdC50KCdtZWpzLmxpdmUtYnJvYWRjYXN0Jyk7CiAgICAgICAgICAgICAgICAgICAgICAgICB0LnNsaWRlci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOwogICAgICAgICAgICAgICAgICAgICAgICAgdC5yYWlsLmFwcGVuZENoaWxkKGxhYmVsKTsKICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgIG1lZGlhLmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgdC5icm9hZGNhc3RDYWxsYmFjayk7CiAgICAgICAgICAgICAgICAgbWVkaWEuYWRkRXZlbnRMaXN0ZW5lcigndGltZXVwZGF0ZScsIHQuYnJvYWRjYXN0Q2FsbGJhY2spOwogICAgICAgICAgICAgICAgIG1lZGlhLmFkZEV2ZW50TGlzdGVuZXIoJ3BsYXknLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgIHQuYnVmZmVyLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CiAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgbWVkaWEuYWRkRXZlbnRMaXN0ZW5lcigncGxheWluZycsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgdC5idWZmZXIuc3R5bGUuZGlzcGxheSA9ICdub25lJzsKICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICBtZWRpYS5hZGRFdmVudExpc3RlbmVyKCdzZWVraW5nJywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICB0LmJ1ZmZlci5zdHlsZS5kaXNwbGF5ID0gJyc7CiAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgbWVkaWEuYWRkRXZlbnRMaXN0ZW5lcignc2Vla2VkJywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICB0LmJ1ZmZlci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOwogICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgIG1lZGlhLmFkZEV2ZW50TGlzdGVuZXIoJ3BhdXNlJywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICB0LmJ1ZmZlci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOwogICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgIG1lZGlhLmFkZEV2ZW50TGlzdGVuZXIoJ3dhaXRpbmcnLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgIHQuYnVmZmVyLnN0eWxlLmRpc3BsYXkgPSAnJzsKICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICBtZWRpYS5hZGRFdmVudExpc3RlbmVyKCdsb2FkZWRkYXRhJywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICB0LmJ1ZmZlci5zdHlsZS5kaXNwbGF5ID0gJyc7CiAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgbWVkaWEuYWRkRXZlbnRMaXN0ZW5lcignY2FucGxheScsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgdC5idWZmZXIuc3R5bGUuZGlzcGxheSA9ICdub25lJzsKICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICBtZWRpYS5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgdC5idWZmZXIuc3R5bGUuZGlzcGxheSA9ICdub25lJzsKICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgdC5nZXRFbGVtZW50KHQuY29udGFpbmVyKS5hZGRFdmVudExpc3RlbmVyKCdjb250cm9sc3Jlc2l6ZScsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgICAgICAgIGlmICh0LmdldER1cmF0aW9uKCkgIT09IEluZmluaXR5KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXIuc2V0UHJvZ3Jlc3NSYWlsKGUpOwogICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0LmZvcmNlZEhhbmRsZVBhdXNlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyLnNldEN1cnJlbnRSYWlsKGUpOwogICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICB9LAogICAgICAgICAgICAgY2xlYW5wcm9ncmVzczogZnVuY3Rpb24gY2xlYW5wcm9ncmVzcyhwbGF5ZXIsIGNvbnRyb2xzLCBsYXllcnMsIG1lZGlhKSB7CiAgICAgICAgICAgICAgICAgbWVkaWEucmVtb3ZlRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBwbGF5ZXIuYnJvYWRjYXN0Q2FsbGJhY2spOwogICAgICAgICAgICAgICAgIG1lZGlhLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RpbWV1cGRhdGUnLCBwbGF5ZXIuYnJvYWRjYXN0Q2FsbGJhY2spOwogICAgICAgICAgICAgICAgIGlmIChwbGF5ZXIucmFpbCkgewogICAgICAgICAgICAgICAgICAgICBwbGF5ZXIucmFpbC5yZW1vdmUoKTsKICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICB9LAogICAgICAgICAgICAgc2V0UHJvZ3Jlc3NSYWlsOiBmdW5jdGlvbiBzZXRQcm9ncmVzc1JhaWwoZSkgewogICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcywKICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0ID0gZSAhPT0gdW5kZWZpbmVkID8gZS5kZXRhaWwudGFyZ2V0IHx8IGUudGFyZ2V0IDogdC5tZWRpYTsKCiAgICAgICAgICAgICAgICAgdmFyIHBlcmNlbnQgPSBudWxsOwoKICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0ICYmIHRhcmdldC5idWZmZXJlZCAmJiB0YXJnZXQuYnVmZmVyZWQubGVuZ3RoID4gMCAmJiB0YXJnZXQuYnVmZmVyZWQuZW5kICYmIHQuZ2V0RHVyYXRpb24oKSkgewogICAgICAgICAgICAgICAgICAgICBwZXJjZW50ID0gdGFyZ2V0LmJ1ZmZlcmVkLmVuZCh0YXJnZXQuYnVmZmVyZWQubGVuZ3RoIC0gMSkgLyB0LmdldER1cmF0aW9uKCk7CiAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0YXJnZXQgJiYgdGFyZ2V0LmJ5dGVzVG90YWwgIT09IHVuZGVmaW5lZCAmJiB0YXJnZXQuYnl0ZXNUb3RhbCA+IDAgJiYgdGFyZ2V0LmJ1ZmZlcmVkQnl0ZXMgIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgICAgICBwZXJjZW50ID0gdGFyZ2V0LmJ1ZmZlcmVkQnl0ZXMgLyB0YXJnZXQuYnl0ZXNUb3RhbDsKICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGUgJiYgZS5sZW5ndGhDb21wdXRhYmxlICYmIGUudG90YWwgIT09IDApIHsKICAgICAgICAgICAgICAgICAgICAgcGVyY2VudCA9IGUubG9hZGVkIC8gZS50b3RhbDsKICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgIGlmIChwZXJjZW50ICE9PSBudWxsKSB7CiAgICAgICAgICAgICAgICAgICAgIHBlcmNlbnQgPSBNYXRoLm1pbigxLCBNYXRoLm1heCgwLCBwZXJjZW50KSk7CgogICAgICAgICAgICAgICAgICAgICBpZiAodC5sb2FkZWQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHQuc2V0VHJhbnNmb3JtU3R5bGUodC5sb2FkZWQsICdzY2FsZVgoJyArIHBlcmNlbnQgKyAnKScpOwogICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgfSwKICAgICAgICAgICAgIHNldEN1cnJlbnRSYWlsSGFuZGxlOiBmdW5jdGlvbiBzZXRDdXJyZW50UmFpbEhhbmRsZShmYWtlVGltZSkgewogICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpczsKICAgICAgICAgICAgICAgICB0LnNldEN1cnJlbnRSYWlsTWFpbih0LCBmYWtlVGltZSk7CiAgICAgICAgICAgICB9LAogICAgICAgICAgICAgc2V0Q3VycmVudFJhaWw6IGZ1bmN0aW9uIHNldEN1cnJlbnRSYWlsKCkgewogICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpczsKICAgICAgICAgICAgICAgICB0LnNldEN1cnJlbnRSYWlsTWFpbih0KTsKICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICBzZXRDdXJyZW50UmFpbE1haW46IGZ1bmN0aW9uIHNldEN1cnJlbnRSYWlsTWFpbih0LCBmYWtlVGltZSkgewogICAgICAgICAgICAgICAgIGlmICh0LmdldEN1cnJlbnRUaW1lKCkgIT09IHVuZGVmaW5lZCAmJiB0LmdldER1cmF0aW9uKCkpIHsKICAgICAgICAgICAgICAgICAgICAgdmFyIG5UaW1lID0gdHlwZW9mIGZha2VUaW1lID09PSAndW5kZWZpbmVkJyA/IHQuZ2V0Q3VycmVudFRpbWUoKSA6IGZha2VUaW1lOwoKICAgICAgICAgICAgICAgICAgICAgaWYgKHQudG90YWwgJiYgdC5oYW5kbGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0VyA9IHBhcnNlRmxvYXQoZ2V0Q29tcHV0ZWRTdHlsZSh0LnRvdGFsKS53aWR0aCk7CgogICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5ld1dpZHRoID0gTWF0aC5yb3VuZCh0VyAqIG5UaW1lIC8gdC5nZXREdXJhdGlvbigpKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVQb3MgPSBuZXdXaWR0aCAtIE1hdGgucm91bmQodC5oYW5kbGUub2Zmc2V0V2lkdGggLyAyKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVQb3MgPSBoYW5kbGVQb3MgPCAwID8gMCA6IGhhbmRsZVBvczsKICAgICAgICAgICAgICAgICAgICAgICAgIHQuc2V0VHJhbnNmb3JtU3R5bGUodC5jdXJyZW50LCAnc2NhbGVYKCcgKyBuZXdXaWR0aCAvIHRXICsgJyknKTsKICAgICAgICAgICAgICAgICAgICAgICAgIHQuc2V0VHJhbnNmb3JtU3R5bGUodC5oYW5kbGUsICd0cmFuc2xhdGVYKCcgKyBoYW5kbGVQb3MgKyAncHgpJyk7CgogICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHQub3B0aW9ucy51c2VTbW9vdGhIb3ZlciAmJiAhKDAsIF9kb20uaGFzQ2xhc3MpKHQuaG92ZXJlZCwgJ25vLWhvdmVyJykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcG9zID0gcGFyc2VJbnQodC5ob3ZlcmVkLmdldEF0dHJpYnV0ZSgncG9zJyksIDEwKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3MgPSBpc05hTihwb3MpID8gMCA6IHBvczsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGhvdmVyU2NhbGVYID0gcG9zIC8gdFcgLSBoYW5kbGVQb3MgLyB0VzsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5ob3ZlcmVkLnN0eWxlLmxlZnQgPSBoYW5kbGVQb3MgKyAncHgnOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQuc2V0VHJhbnNmb3JtU3R5bGUodC5ob3ZlcmVkLCAnc2NhbGVYKCcgKyBob3ZlclNjYWxlWCArICcpJyk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChob3ZlclNjYWxlWCA+PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgwLCBfZG9tLnJlbW92ZUNsYXNzKSh0LmhvdmVyZWQsICduZWdhdGl2ZScpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgwLCBfZG9tLmFkZENsYXNzKSh0LmhvdmVyZWQsICduZWdhdGl2ZScpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgIH0KICAgICAgICAgfSk7CgogICAgIH0sIHsgIjE2IjogMTYsICIyIjogMiwgIjI1IjogMjUsICIyNiI6IDI2LCAiMzAiOiAzMCwgIjUiOiA1IH1dLCAxMjogW2Z1bmN0aW9uIChfZGVyZXFfLCBtb2R1bGUsIGV4cG9ydHMpIHsKICAgICAgICAgJ3VzZSBzdHJpY3QnOwoKICAgICAgICAgdmFyIF9kb2N1bWVudCA9IF9kZXJlcV8oMik7CgogICAgICAgICB2YXIgX2RvY3VtZW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RvY3VtZW50KTsKCiAgICAgICAgIHZhciBfcGxheWVyID0gX2RlcmVxXygxNik7CgogICAgICAgICB2YXIgX3BsYXllcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wbGF5ZXIpOwoKICAgICAgICAgdmFyIF90aW1lID0gX2RlcmVxXygzMCk7CgogICAgICAgICB2YXIgX2RvbSA9IF9kZXJlcV8oMjYpOwoKICAgICAgICAgZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCiAgICAgICAgIE9iamVjdC5hc3NpZ24oX3BsYXllci5jb25maWcsIHsKICAgICAgICAgICAgIGR1cmF0aW9uOiAwLAoKICAgICAgICAgICAgIHRpbWVBbmREdXJhdGlvblNlcGFyYXRvcjogJzxzcGFuPiB8IDwvc3Bhbj4nCiAgICAgICAgIH0pOwoKICAgICAgICAgT2JqZWN0LmFzc2lnbihfcGxheWVyMi5kZWZhdWx0LnByb3RvdHlwZSwgewogICAgICAgICAgICAgYnVpbGRjdXJyZW50OiBmdW5jdGlvbiBidWlsZGN1cnJlbnQocGxheWVyLCBjb250cm9scywgbGF5ZXJzLCBtZWRpYSkgewogICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcywKICAgICAgICAgICAgICAgICAgICAgdGltZSA9IF9kb2N1bWVudDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKCiAgICAgICAgICAgICAgICAgdGltZS5jbGFzc05hbWUgPSB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAndGltZSc7CiAgICAgICAgICAgICAgICAgdGltZS5zZXRBdHRyaWJ1dGUoJ3JvbGUnLCAndGltZXInKTsKICAgICAgICAgICAgICAgICB0aW1lLnNldEF0dHJpYnV0ZSgnYXJpYS1saXZlJywgJ29mZicpOwogICAgICAgICAgICAgICAgIHRpbWUuaW5uZXJIVE1MID0gJzxzcGFuIGNsYXNzPSInICsgdC5vcHRpb25zLmNsYXNzUHJlZml4ICsgJ2N1cnJlbnR0aW1lIj4nICsgKDAsIF90aW1lLnNlY29uZHNUb1RpbWVDb2RlKSgwLCBwbGF5ZXIub3B0aW9ucy5hbHdheXNTaG93SG91cnMsIHBsYXllci5vcHRpb25zLnNob3dUaW1lY29kZUZyYW1lQ291bnQsIHBsYXllci5vcHRpb25zLmZyYW1lc1BlclNlY29uZCwgcGxheWVyLm9wdGlvbnMuc2Vjb25kc0RlY2ltYWxMZW5ndGgsIHBsYXllci5vcHRpb25zLnRpbWVGb3JtYXQpICsgJzwvc3Bhbj4nOwoKICAgICAgICAgICAgICAgICB0LmFkZENvbnRyb2xFbGVtZW50KHRpbWUsICdjdXJyZW50Jyk7CiAgICAgICAgICAgICAgICAgcGxheWVyLnVwZGF0ZUN1cnJlbnQoKTsKICAgICAgICAgICAgICAgICB0LnVwZGF0ZVRpbWVDYWxsYmFjayA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgaWYgKHQuY29udHJvbHNBcmVWaXNpYmxlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXIudXBkYXRlQ3VycmVudCgpOwogICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICBtZWRpYS5hZGRFdmVudExpc3RlbmVyKCd0aW1ldXBkYXRlJywgdC51cGRhdGVUaW1lQ2FsbGJhY2spOwogICAgICAgICAgICAgfSwKICAgICAgICAgICAgIGNsZWFuY3VycmVudDogZnVuY3Rpb24gY2xlYW5jdXJyZW50KHBsYXllciwgY29udHJvbHMsIGxheWVycywgbWVkaWEpIHsKICAgICAgICAgICAgICAgICBtZWRpYS5yZW1vdmVFdmVudExpc3RlbmVyKCd0aW1ldXBkYXRlJywgcGxheWVyLnVwZGF0ZVRpbWVDYWxsYmFjayk7CiAgICAgICAgICAgICB9LAogICAgICAgICAgICAgYnVpbGRkdXJhdGlvbjogZnVuY3Rpb24gYnVpbGRkdXJhdGlvbihwbGF5ZXIsIGNvbnRyb2xzLCBsYXllcnMsIG1lZGlhKSB7CiAgICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzLAogICAgICAgICAgICAgICAgICAgICBjdXJyVGltZSA9IGNvbnRyb2xzLmxhc3RDaGlsZC5xdWVyeVNlbGVjdG9yKCcuJyArIHQub3B0aW9ucy5jbGFzc1ByZWZpeCArICdjdXJyZW50dGltZScpOwoKICAgICAgICAgICAgICAgICBpZiAoY3VyclRpbWUpIHsKICAgICAgICAgICAgICAgICAgICAgY29udHJvbHMucXVlcnlTZWxlY3RvcignLicgKyB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAndGltZScpLmlubmVySFRNTCArPSB0Lm9wdGlvbnMudGltZUFuZER1cmF0aW9uU2VwYXJhdG9yICsgJzxzcGFuIGNsYXNzPSInICsgdC5vcHRpb25zLmNsYXNzUHJlZml4ICsgJ2R1cmF0aW9uIj4nICsgKCgwLCBfdGltZS5zZWNvbmRzVG9UaW1lQ29kZSkodC5vcHRpb25zLmR1cmF0aW9uLCB0Lm9wdGlvbnMuYWx3YXlzU2hvd0hvdXJzLCB0Lm9wdGlvbnMuc2hvd1RpbWVjb2RlRnJhbWVDb3VudCwgdC5vcHRpb25zLmZyYW1lc1BlclNlY29uZCwgdC5vcHRpb25zLnNlY29uZHNEZWNpbWFsTGVuZ3RoLCB0Lm9wdGlvbnMudGltZUZvcm1hdCkgKyAnPC9zcGFuPicpOwogICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgIGlmIChjb250cm9scy5xdWVyeVNlbGVjdG9yKCcuJyArIHQub3B0aW9ucy5jbGFzc1ByZWZpeCArICdjdXJyZW50dGltZScpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAoMCwgX2RvbS5hZGRDbGFzcykoY29udHJvbHMucXVlcnlTZWxlY3RvcignLicgKyB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAnY3VycmVudHRpbWUnKS5wYXJlbnROb2RlLCB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAnY3VycmVudHRpbWUtY29udGFpbmVyJyk7CiAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgIHZhciBkdXJhdGlvbiA9IF9kb2N1bWVudDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKICAgICAgICAgICAgICAgICAgICAgZHVyYXRpb24uY2xhc3NOYW1lID0gdC5vcHRpb25zLmNsYXNzUHJlZml4ICsgJ3RpbWUgJyArIHQub3B0aW9ucy5jbGFzc1ByZWZpeCArICdkdXJhdGlvbi1jb250YWluZXInOwogICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbi5pbm5lckhUTUwgPSAnPHNwYW4gY2xhc3M9IicgKyB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAnZHVyYXRpb24iPicgKyAoKDAsIF90aW1lLnNlY29uZHNUb1RpbWVDb2RlKSh0Lm9wdGlvbnMuZHVyYXRpb24sIHQub3B0aW9ucy5hbHdheXNTaG93SG91cnMsIHQub3B0aW9ucy5zaG93VGltZWNvZGVGcmFtZUNvdW50LCB0Lm9wdGlvbnMuZnJhbWVzUGVyU2Vjb25kLCB0Lm9wdGlvbnMuc2Vjb25kc0RlY2ltYWxMZW5ndGgsIHQub3B0aW9ucy50aW1lRm9ybWF0KSArICc8L3NwYW4+Jyk7CgogICAgICAgICAgICAgICAgICAgICB0LmFkZENvbnRyb2xFbGVtZW50KGR1cmF0aW9uLCAnZHVyYXRpb24nKTsKICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgIHQudXBkYXRlRHVyYXRpb25DYWxsYmFjayA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgaWYgKHQuY29udHJvbHNBcmVWaXNpYmxlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXIudXBkYXRlRHVyYXRpb24oKTsKICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgIG1lZGlhLmFkZEV2ZW50TGlzdGVuZXIoJ3RpbWV1cGRhdGUnLCB0LnVwZGF0ZUR1cmF0aW9uQ2FsbGJhY2spOwogICAgICAgICAgICAgfSwKICAgICAgICAgICAgIGNsZWFuZHVyYXRpb246IGZ1bmN0aW9uIGNsZWFuZHVyYXRpb24ocGxheWVyLCBjb250cm9scywgbGF5ZXJzLCBtZWRpYSkgewogICAgICAgICAgICAgICAgIG1lZGlhLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RpbWV1cGRhdGUnLCBwbGF5ZXIudXBkYXRlRHVyYXRpb25DYWxsYmFjayk7CiAgICAgICAgICAgICB9LAogICAgICAgICAgICAgdXBkYXRlQ3VycmVudDogZnVuY3Rpb24gdXBkYXRlQ3VycmVudCgpIHsKICAgICAgICAgICAgICAgICB2YXIgdCA9IHRoaXM7CgogICAgICAgICAgICAgICAgIHZhciBjdXJyZW50VGltZSA9IHQuZ2V0Q3VycmVudFRpbWUoKTsKCiAgICAgICAgICAgICAgICAgaWYgKGlzTmFOKGN1cnJlbnRUaW1lKSkgewogICAgICAgICAgICAgICAgICAgICBjdXJyZW50VGltZSA9IDA7CiAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICB2YXIgdGltZWNvZGUgPSAoMCwgX3RpbWUuc2Vjb25kc1RvVGltZUNvZGUpKGN1cnJlbnRUaW1lLCB0Lm9wdGlvbnMuYWx3YXlzU2hvd0hvdXJzLCB0Lm9wdGlvbnMuc2hvd1RpbWVjb2RlRnJhbWVDb3VudCwgdC5vcHRpb25zLmZyYW1lc1BlclNlY29uZCwgdC5vcHRpb25zLnNlY29uZHNEZWNpbWFsTGVuZ3RoLCB0Lm9wdGlvbnMudGltZUZvcm1hdCk7CgogICAgICAgICAgICAgICAgIGlmICh0aW1lY29kZS5sZW5ndGggPiA1KSB7CiAgICAgICAgICAgICAgICAgICAgICgwLCBfZG9tLmFkZENsYXNzKSh0LmdldEVsZW1lbnQodC5jb250YWluZXIpLCB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAnbG9uZy12aWRlbycpOwogICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICgwLCBfZG9tLnJlbW92ZUNsYXNzKSh0LmdldEVsZW1lbnQodC5jb250YWluZXIpLCB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAnbG9uZy12aWRlbycpOwogICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgaWYgKHQuZ2V0RWxlbWVudCh0LmNvbnRyb2xzKS5xdWVyeVNlbGVjdG9yKCcuJyArIHQub3B0aW9ucy5jbGFzc1ByZWZpeCArICdjdXJyZW50dGltZScpKSB7CiAgICAgICAgICAgICAgICAgICAgIHQuZ2V0RWxlbWVudCh0LmNvbnRyb2xzKS5xdWVyeVNlbGVjdG9yKCcuJyArIHQub3B0aW9ucy5jbGFzc1ByZWZpeCArICdjdXJyZW50dGltZScpLmlubmVyVGV4dCA9IHRpbWVjb2RlOwogICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICB1cGRhdGVEdXJhdGlvbjogZnVuY3Rpb24gdXBkYXRlRHVyYXRpb24oKSB7CiAgICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzOwoKICAgICAgICAgICAgICAgICB2YXIgZHVyYXRpb24gPSB0LmdldER1cmF0aW9uKCk7CgogICAgICAgICAgICAgICAgIGlmICh0Lm1lZGlhICE9PSB1bmRlZmluZWQgJiYgKGlzTmFOKGR1cmF0aW9uKSB8fCBkdXJhdGlvbiA9PT0gSW5maW5pdHkgfHwgZHVyYXRpb24gPCAwKSkgewogICAgICAgICAgICAgICAgICAgICB0Lm1lZGlhLmR1cmF0aW9uID0gdC5vcHRpb25zLmR1cmF0aW9uID0gZHVyYXRpb24gPSAwOwogICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgaWYgKHQub3B0aW9ucy5kdXJhdGlvbiA+IDApIHsKICAgICAgICAgICAgICAgICAgICAgZHVyYXRpb24gPSB0Lm9wdGlvbnMuZHVyYXRpb247CiAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICB2YXIgdGltZWNvZGUgPSAoMCwgX3RpbWUuc2Vjb25kc1RvVGltZUNvZGUpKGR1cmF0aW9uLCB0Lm9wdGlvbnMuYWx3YXlzU2hvd0hvdXJzLCB0Lm9wdGlvbnMuc2hvd1RpbWVjb2RlRnJhbWVDb3VudCwgdC5vcHRpb25zLmZyYW1lc1BlclNlY29uZCwgdC5vcHRpb25zLnNlY29uZHNEZWNpbWFsTGVuZ3RoLCB0Lm9wdGlvbnMudGltZUZvcm1hdCk7CgogICAgICAgICAgICAgICAgIGlmICh0aW1lY29kZS5sZW5ndGggPiA1KSB7CiAgICAgICAgICAgICAgICAgICAgICgwLCBfZG9tLmFkZENsYXNzKSh0LmdldEVsZW1lbnQodC5jb250YWluZXIpLCB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAnbG9uZy12aWRlbycpOwogICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICgwLCBfZG9tLnJlbW92ZUNsYXNzKSh0LmdldEVsZW1lbnQodC5jb250YWluZXIpLCB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAnbG9uZy12aWRlbycpOwogICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgaWYgKHQuZ2V0RWxlbWVudCh0LmNvbnRyb2xzKS5xdWVyeVNlbGVjdG9yKCcuJyArIHQub3B0aW9ucy5jbGFzc1ByZWZpeCArICdkdXJhdGlvbicpICYmIGR1cmF0aW9uID4gMCkgewogICAgICAgICAgICAgICAgICAgICB0LmdldEVsZW1lbnQodC5jb250cm9scykucXVlcnlTZWxlY3RvcignLicgKyB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAnZHVyYXRpb24nKS5pbm5lckhUTUwgPSB0aW1lY29kZTsKICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICB9CiAgICAgICAgIH0pOwoKICAgICB9LCB7ICIxNiI6IDE2LCAiMiI6IDIsICIyNiI6IDI2LCAiMzAiOiAzMCB9XSwgMTM6IFtmdW5jdGlvbiAoX2RlcmVxXywgbW9kdWxlLCBleHBvcnRzKSB7CiAgICAgICAgICd1c2Ugc3RyaWN0JzsKCiAgICAgICAgIHZhciBfZG9jdW1lbnQgPSBfZGVyZXFfKDIpOwoKICAgICAgICAgdmFyIF9kb2N1bWVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kb2N1bWVudCk7CgogICAgICAgICB2YXIgX21lanMgPSBfZGVyZXFfKDcpOwoKICAgICAgICAgdmFyIF9tZWpzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21lanMpOwoKICAgICAgICAgdmFyIF9pMThuID0gX2RlcmVxXyg1KTsKCiAgICAgICAgIHZhciBfaTE4bjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pMThuKTsKCiAgICAgICAgIHZhciBfcGxheWVyID0gX2RlcmVxXygxNik7CgogICAgICAgICB2YXIgX3BsYXllcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wbGF5ZXIpOwoKICAgICAgICAgdmFyIF90aW1lID0gX2RlcmVxXygzMCk7CgogICAgICAgICB2YXIgX2dlbmVyYWwgPSBfZGVyZXFfKDI3KTsKCiAgICAgICAgIHZhciBfZG9tID0gX2RlcmVxXygyNik7CgogICAgICAgICBmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKICAgICAgICAgT2JqZWN0LmFzc2lnbihfcGxheWVyLmNvbmZpZywgewogICAgICAgICAgICAgc3RhcnRMYW5ndWFnZTogJycsCgogICAgICAgICAgICAgdHJhY2tzVGV4dDogbnVsbCwKCiAgICAgICAgICAgICBjaGFwdGVyc1RleHQ6IG51bGwsCgogICAgICAgICAgICAgdHJhY2tzQXJpYUxpdmU6IGZhbHNlLAoKICAgICAgICAgICAgIGhpZGVDYXB0aW9uc0J1dHRvbldoZW5FbXB0eTogdHJ1ZSwKCiAgICAgICAgICAgICB0b2dnbGVDYXB0aW9uc0J1dHRvbldoZW5Pbmx5T25lOiBmYWxzZSwKCiAgICAgICAgICAgICBzbGlkZXNTZWxlY3RvcjogJycKICAgICAgICAgfSk7CgogICAgICAgICBPYmplY3QuYXNzaWduKF9wbGF5ZXIyLmRlZmF1bHQucHJvdG90eXBlLCB7CiAgICAgICAgICAgICBoYXNDaGFwdGVyczogZmFsc2UsCgogICAgICAgICAgICAgYnVpbGR0cmFja3M6IGZ1bmN0aW9uIGJ1aWxkdHJhY2tzKHBsYXllciwgY29udHJvbHMsIGxheWVycywgbWVkaWEpIHsKCiAgICAgICAgICAgICAgICAgdGhpcy5maW5kVHJhY2tzKCk7CgogICAgICAgICAgICAgICAgIGlmICghcGxheWVyLnRyYWNrcy5sZW5ndGggJiYgKCFwbGF5ZXIudHJhY2tGaWxlcyB8fCAhcGxheWVyLnRyYWNrRmlsZXMubGVuZ3RoID09PSAwKSkgewogICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICB2YXIgdCA9IHRoaXMsCiAgICAgICAgICAgICAgICAgICAgIGF0dHIgPSB0Lm9wdGlvbnMudHJhY2tzQXJpYUxpdmUgPyAnIHJvbGU9ImxvZyIgYXJpYS1saXZlPSJhc3NlcnRpdmUiIGFyaWEtYXRvbWljPSJmYWxzZSInIDogJycsCiAgICAgICAgICAgICAgICAgICAgIHRyYWNrc1RpdGxlID0gKDAsIF9nZW5lcmFsLmlzU3RyaW5nKSh0Lm9wdGlvbnMudHJhY2tzVGV4dCkgPyB0Lm9wdGlvbnMudHJhY2tzVGV4dCA6IF9pMThuMi5kZWZhdWx0LnQoJ21lanMuY2FwdGlvbnMtc3VidGl0bGVzJyksCiAgICAgICAgICAgICAgICAgICAgIGNoYXB0ZXJzVGl0bGUgPSAoMCwgX2dlbmVyYWwuaXNTdHJpbmcpKHQub3B0aW9ucy5jaGFwdGVyc1RleHQpID8gdC5vcHRpb25zLmNoYXB0ZXJzVGV4dCA6IF9pMThuMi5kZWZhdWx0LnQoJ21lanMuY2FwdGlvbnMtY2hhcHRlcnMnKSwKICAgICAgICAgICAgICAgICAgICAgdG90YWwgPSBwbGF5ZXIudHJhY2tGaWxlcyA9PT0gbnVsbCA/IHBsYXllci50cmFja3MubGVuZ3RoIDogcGxheWVyLnRyYWNrRmlsZXMubGVuZ3RoOwoKICAgICAgICAgICAgICAgICBpZiAodC5kb21Ob2RlLnRleHRUcmFja3MpIHsKICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IHQuZG9tTm9kZS50ZXh0VHJhY2tzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICB0LmRvbU5vZGUudGV4dFRyYWNrc1tpXS5tb2RlID0gJ2hpZGRlbic7CiAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgIHQuY2xlYXJ0cmFja3MocGxheWVyKTsKCiAgICAgICAgICAgICAgICAgcGxheWVyLmNhcHRpb25zID0gX2RvY3VtZW50Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogICAgICAgICAgICAgICAgIHBsYXllci5jYXB0aW9ucy5jbGFzc05hbWUgPSB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAnY2FwdGlvbnMtbGF5ZXIgJyArIHQub3B0aW9ucy5jbGFzc1ByZWZpeCArICdsYXllcic7CiAgICAgICAgICAgICAgICAgcGxheWVyLmNhcHRpb25zLmlubmVySFRNTCA9ICc8ZGl2IGNsYXNzPSInICsgdC5vcHRpb25zLmNsYXNzUHJlZml4ICsgJ2NhcHRpb25zLXBvc2l0aW9uICcgKyB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAnY2FwdGlvbnMtcG9zaXRpb24taG92ZXIiJyArIGF0dHIgKyAnPicgKyAoJzxzcGFuIGNsYXNzPSInICsgdC5vcHRpb25zLmNsYXNzUHJlZml4ICsgJ2NhcHRpb25zLXRleHQiPjwvc3Bhbj4nKSArICc8L2Rpdj4nOwogICAgICAgICAgICAgICAgIHBsYXllci5jYXB0aW9ucy5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOwogICAgICAgICAgICAgICAgIGxheWVycy5pbnNlcnRCZWZvcmUocGxheWVyLmNhcHRpb25zLCBsYXllcnMuZmlyc3RDaGlsZCk7CgogICAgICAgICAgICAgICAgIHBsYXllci5jYXB0aW9uc1RleHQgPSBwbGF5ZXIuY2FwdGlvbnMucXVlcnlTZWxlY3RvcignLicgKyB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAnY2FwdGlvbnMtdGV4dCcpOwoKICAgICAgICAgICAgICAgICBwbGF5ZXIuY2FwdGlvbnNCdXR0b24gPSBfZG9jdW1lbnQyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CiAgICAgICAgICAgICAgICAgcGxheWVyLmNhcHRpb25zQnV0dG9uLmNsYXNzTmFtZSA9IHQub3B0aW9ucy5jbGFzc1ByZWZpeCArICdidXR0b24gJyArIHQub3B0aW9ucy5jbGFzc1ByZWZpeCArICdjYXB0aW9ucy1idXR0b24nOwogICAgICAgICAgICAgICAgIHBsYXllci5jYXB0aW9uc0J1dHRvbi5pbm5lckhUTUwgPSAnPGJ1dHRvbiB0eXBlPSJidXR0b24iIGFyaWEtY29udHJvbHM9IicgKyB0LmlkICsgJyIgdGl0bGU9IicgKyB0cmFja3NUaXRsZSArICciIGFyaWEtbGFiZWw9IicgKyB0cmFja3NUaXRsZSArICciIHRhYmluZGV4PSIwIj48L2J1dHRvbj4nICsgKCc8ZGl2IGNsYXNzPSInICsgdC5vcHRpb25zLmNsYXNzUHJlZml4ICsgJ2NhcHRpb25zLXNlbGVjdG9yICcgKyB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAnb2Zmc2NyZWVuIj4nKSArICgnPHVsIGNsYXNzPSInICsgdC5vcHRpb25zLmNsYXNzUHJlZml4ICsgJ2NhcHRpb25zLXNlbGVjdG9yLWxpc3QiPicpICsgKCc8bGkgY2xhc3M9IicgKyB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAnY2FwdGlvbnMtc2VsZWN0b3ItbGlzdC1pdGVtIj4nKSArICgnPGlucHV0IHR5cGU9InJhZGlvIiBjbGFzcz0iJyArIHQub3B0aW9ucy5jbGFzc1ByZWZpeCArICdjYXB0aW9ucy1zZWxlY3Rvci1pbnB1dCIgJykgKyAoJ25hbWU9IicgKyBwbGF5ZXIuaWQgKyAnX2NhcHRpb25zIiBpZD0iJyArIHBsYXllci5pZCArICdfY2FwdGlvbnNfbm9uZSIgJykgKyAndmFsdWU9Im5vbmUiIGNoZWNrZWQgZGlzYWJsZWQ+JyArICgnPGxhYmVsIGNsYXNzPSInICsgdC5vcHRpb25zLmNsYXNzUHJlZml4ICsgJ2NhcHRpb25zLXNlbGVjdG9yLWxhYmVsICcpICsgKHQub3B0aW9ucy5jbGFzc1ByZWZpeCArICdjYXB0aW9ucy1zZWxlY3RlZCIgJykgKyAoJ2Zvcj0iJyArIHBsYXllci5pZCArICdfY2FwdGlvbnNfbm9uZSI+JyArIF9pMThuMi5kZWZhdWx0LnQoJ21lanMubm9uZScpICsgJzwvbGFiZWw+JykgKyAnPC9saT4nICsgJzwvdWw+JyArICc8L2Rpdj4nOwoKICAgICAgICAgICAgICAgICB0LmFkZENvbnRyb2xFbGVtZW50KHBsYXllci5jYXB0aW9uc0J1dHRvbiwgJ3RyYWNrcycpOwoKICAgICAgICAgICAgICAgICBwbGF5ZXIuY2FwdGlvbnNCdXR0b24ucXVlcnlTZWxlY3RvcignLicgKyB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAnY2FwdGlvbnMtc2VsZWN0b3ItaW5wdXQnKS5kaXNhYmxlZCA9IGZhbHNlOwoKICAgICAgICAgICAgICAgICBwbGF5ZXIuY2hhcHRlcnNCdXR0b24gPSBfZG9jdW1lbnQyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CiAgICAgICAgICAgICAgICAgcGxheWVyLmNoYXB0ZXJzQnV0dG9uLmNsYXNzTmFtZSA9IHQub3B0aW9ucy5jbGFzc1ByZWZpeCArICdidXR0b24gJyArIHQub3B0aW9ucy5jbGFzc1ByZWZpeCArICdjaGFwdGVycy1idXR0b24nOwogICAgICAgICAgICAgICAgIHBsYXllci5jaGFwdGVyc0J1dHRvbi5pbm5lckhUTUwgPSAnPGJ1dHRvbiB0eXBlPSJidXR0b24iIGFyaWEtY29udHJvbHM9IicgKyB0LmlkICsgJyIgdGl0bGU9IicgKyBjaGFwdGVyc1RpdGxlICsgJyIgYXJpYS1sYWJlbD0iJyArIGNoYXB0ZXJzVGl0bGUgKyAnIiB0YWJpbmRleD0iMCI+PC9idXR0b24+JyArICgnPGRpdiBjbGFzcz0iJyArIHQub3B0aW9ucy5jbGFzc1ByZWZpeCArICdjaGFwdGVycy1zZWxlY3RvciAnICsgdC5vcHRpb25zLmNsYXNzUHJlZml4ICsgJ29mZnNjcmVlbiI+JykgKyAoJzx1bCBjbGFzcz0iJyArIHQub3B0aW9ucy5jbGFzc1ByZWZpeCArICdjaGFwdGVycy1zZWxlY3Rvci1saXN0Ij48L3VsPicpICsgJzwvZGl2Pic7CgogICAgICAgICAgICAgICAgIHZhciBzdWJ0aXRsZUNvdW50ID0gMDsKCiAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IHRvdGFsOyBfaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgIHZhciBraW5kID0gcGxheWVyLnRyYWNrc1tfaV0ua2luZCwKICAgICAgICAgICAgICAgICAgICAgICAgIHNyYyA9IHBsYXllci50cmFja3NbX2ldLnNyYzsKICAgICAgICAgICAgICAgICAgICAgaWYgKHNyYy50cmltKCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChraW5kID09PSAnc3VidGl0bGVzJyB8fCBraW5kID09PSAnY2FwdGlvbnMnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VidGl0bGVDb3VudCsrOwogICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChraW5kID09PSAnY2hhcHRlcnMnICYmICFjb250cm9scy5xdWVyeVNlbGVjdG9yKCcuJyArIHQub3B0aW9ucy5jbGFzc1ByZWZpeCArICdjaGFwdGVyLXNlbGVjdG9yJykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXIuY2FwdGlvbnNCdXR0b24ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUocGxheWVyLmNoYXB0ZXJzQnV0dG9uLCBwbGF5ZXIuY2FwdGlvbnNCdXR0b24pOwogICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICBwbGF5ZXIudHJhY2tUb0xvYWQgPSAtMTsKICAgICAgICAgICAgICAgICBwbGF5ZXIuc2VsZWN0ZWRUcmFjayA9IG51bGw7CiAgICAgICAgICAgICAgICAgcGxheWVyLmlzTG9hZGluZ1RyYWNrID0gZmFsc2U7CgogICAgICAgICAgICAgICAgIGZvciAodmFyIF9pMiA9IDA7IF9pMiA8IHRvdGFsOyBfaTIrKykgewogICAgICAgICAgICAgICAgICAgICB2YXIgX2tpbmQgPSBwbGF5ZXIudHJhY2tzW19pMl0ua2luZDsKICAgICAgICAgICAgICAgICAgICAgaWYgKHBsYXllci50cmFja3NbX2kyXS5zcmMudHJpbSgpICYmIChfa2luZCA9PT0gJ3N1YnRpdGxlcycgfHwgX2tpbmQgPT09ICdjYXB0aW9ucycpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXIuYWRkVHJhY2tCdXR0b24ocGxheWVyLnRyYWNrc1tfaTJdLnRyYWNrSWQsIHBsYXllci50cmFja3NbX2kyXS5zcmNsYW5nLCBwbGF5ZXIudHJhY2tzW19pMl0ubGFiZWwpOwogICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICBwbGF5ZXIubG9hZE5leHRUcmFjaygpOwoKICAgICAgICAgICAgICAgICB2YXIgaW5FdmVudHMgPSBbJ21vdXNlZW50ZXInLCAnZm9jdXNpbiddLAogICAgICAgICAgICAgICAgICAgICBvdXRFdmVudHMgPSBbJ21vdXNlbGVhdmUnLCAnZm9jdXNvdXQnXTsKCiAgICAgICAgICAgICAgICAgaWYgKHQub3B0aW9ucy50b2dnbGVDYXB0aW9uc0J1dHRvbldoZW5Pbmx5T25lICYmIHN1YnRpdGxlQ291bnQgPT09IDEpIHsKICAgICAgICAgICAgICAgICAgICAgcGxheWVyLmNhcHRpb25zQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0cmFja0lkID0gJ25vbmUnOwogICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBsYXllci5zZWxlY3RlZFRyYWNrID09PSBudWxsKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhY2tJZCA9IHBsYXllci50cmFja3NbMF0udHJhY2tJZDsKICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBrZXlib2FyZCA9IGUua2V5Q29kZSB8fCBlLndoaWNoOwogICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyLnNldFRyYWNrKHRyYWNrSWQsIHR5cGVvZiBrZXlib2FyZCAhPT0gJ3VuZGVmaW5lZCcpOwogICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICB2YXIgbGFiZWxzID0gcGxheWVyLmNhcHRpb25zQnV0dG9uLnF1ZXJ5U2VsZWN0b3JBbGwoJy4nICsgdC5vcHRpb25zLmNsYXNzUHJlZml4ICsgJ2NhcHRpb25zLXNlbGVjdG9yLWxhYmVsJyksCiAgICAgICAgICAgICAgICAgICAgICAgICBjYXB0aW9ucyA9IHBsYXllci5jYXB0aW9uc0J1dHRvbi5xdWVyeVNlbGVjdG9yQWxsKCdpbnB1dFt0eXBlPXJhZGlvXScpOwoKICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2kzID0gMCwgX3RvdGFsID0gaW5FdmVudHMubGVuZ3RoOyBfaTMgPCBfdG90YWw7IF9pMysrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXIuY2FwdGlvbnNCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihpbkV2ZW50c1tfaTNdLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKDAsIF9kb20ucmVtb3ZlQ2xhc3MpKHRoaXMucXVlcnlTZWxlY3RvcignLicgKyB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAnY2FwdGlvbnMtc2VsZWN0b3InKSwgdC5vcHRpb25zLmNsYXNzUHJlZml4ICsgJ29mZnNjcmVlbicpOwogICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9pNCA9IDAsIF90b3RhbDIgPSBvdXRFdmVudHMubGVuZ3RoOyBfaTQgPCBfdG90YWwyOyBfaTQrKykgewogICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyLmNhcHRpb25zQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIob3V0RXZlbnRzW19pNF0sIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoMCwgX2RvbS5hZGRDbGFzcykodGhpcy5xdWVyeVNlbGVjdG9yKCcuJyArIHQub3B0aW9ucy5jbGFzc1ByZWZpeCArICdjYXB0aW9ucy1zZWxlY3RvcicpLCB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAnb2Zmc2NyZWVuJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2k1ID0gMCwgX3RvdGFsMyA9IGNhcHRpb25zLmxlbmd0aDsgX2k1IDwgX3RvdGFsMzsgX2k1KyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgIGNhcHRpb25zW19pNV0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBrZXlib2FyZCA9IGUua2V5Q29kZSB8fCBlLndoaWNoOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllci5zZXRUcmFjayh0aGlzLnZhbHVlLCB0eXBlb2Yga2V5Ym9hcmQgIT09ICd1bmRlZmluZWQnKTsKICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfaTYgPSAwLCBfdG90YWw0ID0gbGFiZWxzLmxlbmd0aDsgX2k2IDwgX3RvdGFsNDsgX2k2KyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsc1tfaTZdLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmFkaW8gPSAoMCwgX2RvbS5zaWJsaW5ncykodGhpcywgZnVuY3Rpb24gKGVsKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlbC50YWdOYW1lID09PSAnSU5QVVQnOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pWzBdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudCA9ICgwLCBfZ2VuZXJhbC5jcmVhdGVFdmVudCkoJ2NsaWNrJywgcmFkaW8pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhZGlvLmRpc3BhdGNoRXZlbnQoZXZlbnQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICBwbGF5ZXIuY2FwdGlvbnNCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpOwogICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgIGZvciAodmFyIF9pNyA9IDAsIF90b3RhbDUgPSBpbkV2ZW50cy5sZW5ndGg7IF9pNyA8IF90b3RhbDU7IF9pNysrKSB7CiAgICAgICAgICAgICAgICAgICAgIHBsYXllci5jaGFwdGVyc0J1dHRvbi5hZGRFdmVudExpc3RlbmVyKGluRXZlbnRzW19pN10sIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnF1ZXJ5U2VsZWN0b3IoJy4nICsgdC5vcHRpb25zLmNsYXNzUHJlZml4ICsgJ2NoYXB0ZXJzLXNlbGVjdG9yLWxpc3QnKS5jaGlsZHJlbi5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoMCwgX2RvbS5yZW1vdmVDbGFzcykodGhpcy5xdWVyeVNlbGVjdG9yKCcuJyArIHQub3B0aW9ucy5jbGFzc1ByZWZpeCArICdjaGFwdGVycy1zZWxlY3RvcicpLCB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAnb2Zmc2NyZWVuJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2k4ID0gMCwgX3RvdGFsNiA9IG91dEV2ZW50cy5sZW5ndGg7IF9pOCA8IF90b3RhbDY7IF9pOCsrKSB7CiAgICAgICAgICAgICAgICAgICAgIHBsYXllci5jaGFwdGVyc0J1dHRvbi5hZGRFdmVudExpc3RlbmVyKG91dEV2ZW50c1tfaThdLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAoMCwgX2RvbS5hZGRDbGFzcykodGhpcy5xdWVyeVNlbGVjdG9yKCcuJyArIHQub3B0aW9ucy5jbGFzc1ByZWZpeCArICdjaGFwdGVycy1zZWxlY3RvcicpLCB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAnb2Zmc2NyZWVuJyk7CiAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgcGxheWVyLmNoYXB0ZXJzQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpOwogICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICBpZiAoIXBsYXllci5vcHRpb25zLmFsd2F5c1Nob3dDb250cm9scykgewogICAgICAgICAgICAgICAgICAgICBwbGF5ZXIuZ2V0RWxlbWVudChwbGF5ZXIuY29udGFpbmVyKS5hZGRFdmVudExpc3RlbmVyKCdjb250cm9sc3Nob3duJywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgKDAsIF9kb20uYWRkQ2xhc3MpKHBsYXllci5nZXRFbGVtZW50KHBsYXllci5jb250YWluZXIpLnF1ZXJ5U2VsZWN0b3IoJy4nICsgdC5vcHRpb25zLmNsYXNzUHJlZml4ICsgJ2NhcHRpb25zLXBvc2l0aW9uJyksIHQub3B0aW9ucy5jbGFzc1ByZWZpeCArICdjYXB0aW9ucy1wb3NpdGlvbi1ob3ZlcicpOwogICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgICAgIHBsYXllci5nZXRFbGVtZW50KHBsYXllci5jb250YWluZXIpLmFkZEV2ZW50TGlzdGVuZXIoJ2NvbnRyb2xzaGlkZGVuJywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFtZWRpYS5wYXVzZWQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoMCwgX2RvbS5yZW1vdmVDbGFzcykocGxheWVyLmdldEVsZW1lbnQocGxheWVyLmNvbnRhaW5lcikucXVlcnlTZWxlY3RvcignLicgKyB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAnY2FwdGlvbnMtcG9zaXRpb24nKSwgdC5vcHRpb25zLmNsYXNzUHJlZml4ICsgJ2NhcHRpb25zLXBvc2l0aW9uLWhvdmVyJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICgwLCBfZG9tLmFkZENsYXNzKShwbGF5ZXIuZ2V0RWxlbWVudChwbGF5ZXIuY29udGFpbmVyKS5xdWVyeVNlbGVjdG9yKCcuJyArIHQub3B0aW9ucy5jbGFzc1ByZWZpeCArICdjYXB0aW9ucy1wb3NpdGlvbicpLCB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAnY2FwdGlvbnMtcG9zaXRpb24taG92ZXInKTsKICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgIG1lZGlhLmFkZEV2ZW50TGlzdGVuZXIoJ3RpbWV1cGRhdGUnLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgIHBsYXllci5kaXNwbGF5Q2FwdGlvbnMoKTsKICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgaWYgKHBsYXllci5vcHRpb25zLnNsaWRlc1NlbGVjdG9yICE9PSAnJykgewogICAgICAgICAgICAgICAgICAgICBwbGF5ZXIuc2xpZGVzQ29udGFpbmVyID0gX2RvY3VtZW50Mi5kZWZhdWx0LnF1ZXJ5U2VsZWN0b3JBbGwocGxheWVyLm9wdGlvbnMuc2xpZGVzU2VsZWN0b3IpOwoKICAgICAgICAgICAgICAgICAgICAgbWVkaWEuYWRkRXZlbnRMaXN0ZW5lcigndGltZXVwZGF0ZScsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllci5kaXNwbGF5U2xpZGVzKCk7CiAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICBjbGVhcnRyYWNrczogZnVuY3Rpb24gY2xlYXJ0cmFja3MocGxheWVyKSB7CiAgICAgICAgICAgICAgICAgaWYgKHBsYXllcikgewogICAgICAgICAgICAgICAgICAgICBpZiAocGxheWVyLmNhcHRpb25zKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXIuY2FwdGlvbnMucmVtb3ZlKCk7CiAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgaWYgKHBsYXllci5jaGFwdGVycykgewogICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyLmNoYXB0ZXJzLnJlbW92ZSgpOwogICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgIGlmIChwbGF5ZXIuY2FwdGlvbnNUZXh0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXIuY2FwdGlvbnNUZXh0LnJlbW92ZSgpOwogICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgIGlmIChwbGF5ZXIuY2FwdGlvbnNCdXR0b24pIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllci5jYXB0aW9uc0J1dHRvbi5yZW1vdmUoKTsKICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICBpZiAocGxheWVyLmNoYXB0ZXJzQnV0dG9uKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXIuY2hhcHRlcnNCdXR0b24ucmVtb3ZlKCk7CiAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICB9LAogICAgICAgICAgICAgcmVidWlsZHRyYWNrczogZnVuY3Rpb24gcmVidWlsZHRyYWNrcygpIHsKICAgICAgICAgICAgICAgICB2YXIgdCA9IHRoaXM7CiAgICAgICAgICAgICAgICAgdC5maW5kVHJhY2tzKCk7CiAgICAgICAgICAgICAgICAgdC5idWlsZHRyYWNrcyh0LCB0LmdldEVsZW1lbnQodC5jb250cm9scyksIHQuZ2V0RWxlbWVudCh0LmxheWVycyksIHQubWVkaWEpOwogICAgICAgICAgICAgfSwKICAgICAgICAgICAgIGZpbmRUcmFja3M6IGZ1bmN0aW9uIGZpbmRUcmFja3MoKSB7CiAgICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzLAogICAgICAgICAgICAgICAgICAgICB0cmFja3RhZ3MgPSB0LnRyYWNrRmlsZXMgPT09IG51bGwgPyB0Lm5vZGUucXVlcnlTZWxlY3RvckFsbCgndHJhY2snKSA6IHQudHJhY2tGaWxlcywKICAgICAgICAgICAgICAgICAgICAgdG90YWwgPSB0cmFja3RhZ3MubGVuZ3RoOwoKICAgICAgICAgICAgICAgICB0LnRyYWNrcyA9IFtdOwogICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdG90YWw7IGkrKykgewogICAgICAgICAgICAgICAgICAgICB2YXIgdHJhY2sgPSB0cmFja3RhZ3NbaV0sCiAgICAgICAgICAgICAgICAgICAgICAgICBzcmNsYW5nID0gdHJhY2suZ2V0QXR0cmlidXRlKCdzcmNsYW5nJykudG9Mb3dlckNhc2UoKSB8fCAnJywKICAgICAgICAgICAgICAgICAgICAgICAgIHRyYWNrSWQgPSB0LmlkICsgJ190cmFja18nICsgaSArICdfJyArIHRyYWNrLmdldEF0dHJpYnV0ZSgna2luZCcpICsgJ18nICsgc3JjbGFuZzsKICAgICAgICAgICAgICAgICAgICAgdC50cmFja3MucHVzaCh7CiAgICAgICAgICAgICAgICAgICAgICAgICB0cmFja0lkOiB0cmFja0lkLAogICAgICAgICAgICAgICAgICAgICAgICAgc3JjbGFuZzogc3JjbGFuZywKICAgICAgICAgICAgICAgICAgICAgICAgIHNyYzogdHJhY2suZ2V0QXR0cmlidXRlKCdzcmMnKSwKICAgICAgICAgICAgICAgICAgICAgICAgIGtpbmQ6IHRyYWNrLmdldEF0dHJpYnV0ZSgna2luZCcpLAogICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IHRyYWNrLmdldEF0dHJpYnV0ZSgnbGFiZWwnKSB8fCAnJywKICAgICAgICAgICAgICAgICAgICAgICAgIGVudHJpZXM6IFtdLAogICAgICAgICAgICAgICAgICAgICAgICAgaXNMb2FkZWQ6IGZhbHNlCiAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICBzZXRUcmFjazogZnVuY3Rpb24gc2V0VHJhY2sodHJhY2tJZCwgc2V0QnlLZXlib2FyZCkgewoKICAgICAgICAgICAgICAgICB2YXIgdCA9IHRoaXMsCiAgICAgICAgICAgICAgICAgICAgIHJhZGlvcyA9IHQuY2FwdGlvbnNCdXR0b24ucXVlcnlTZWxlY3RvckFsbCgnaW5wdXRbdHlwZT0icmFkaW8iXScpLAogICAgICAgICAgICAgICAgICAgICBjYXB0aW9ucyA9IHQuY2FwdGlvbnNCdXR0b24ucXVlcnlTZWxlY3RvckFsbCgnLicgKyB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAnY2FwdGlvbnMtc2VsZWN0ZWQnKSwKICAgICAgICAgICAgICAgICAgICAgdHJhY2sgPSB0LmNhcHRpb25zQnV0dG9uLnF1ZXJ5U2VsZWN0b3IoJ2lucHV0W3ZhbHVlPSInICsgdHJhY2tJZCArICciXScpOwoKICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgdG90YWwgPSByYWRpb3MubGVuZ3RoOyBpIDwgdG90YWw7IGkrKykgewogICAgICAgICAgICAgICAgICAgICByYWRpb3NbaV0uY2hlY2tlZCA9IGZhbHNlOwogICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2k5ID0gMCwgX3RvdGFsNyA9IGNhcHRpb25zLmxlbmd0aDsgX2k5IDwgX3RvdGFsNzsgX2k5KyspIHsKICAgICAgICAgICAgICAgICAgICAgKDAsIF9kb20ucmVtb3ZlQ2xhc3MpKGNhcHRpb25zW19pOV0sIHQub3B0aW9ucy5jbGFzc1ByZWZpeCArICdjYXB0aW9ucy1zZWxlY3RlZCcpOwogICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgdHJhY2suY2hlY2tlZCA9IHRydWU7CiAgICAgICAgICAgICAgICAgdmFyIGxhYmVscyA9ICgwLCBfZG9tLnNpYmxpbmdzKSh0cmFjaywgZnVuY3Rpb24gKGVsKSB7CiAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoMCwgX2RvbS5oYXNDbGFzcykoZWwsIHQub3B0aW9ucy5jbGFzc1ByZWZpeCArICdjYXB0aW9ucy1zZWxlY3Rvci1sYWJlbCcpOwogICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgIGZvciAodmFyIF9pMTAgPSAwLCBfdG90YWw4ID0gbGFiZWxzLmxlbmd0aDsgX2kxMCA8IF90b3RhbDg7IF9pMTArKykgewogICAgICAgICAgICAgICAgICAgICAoMCwgX2RvbS5hZGRDbGFzcykobGFiZWxzW19pMTBdLCB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAnY2FwdGlvbnMtc2VsZWN0ZWQnKTsKICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgIGlmICh0cmFja0lkID09PSAnbm9uZScpIHsKICAgICAgICAgICAgICAgICAgICAgdC5zZWxlY3RlZFRyYWNrID0gbnVsbDsKICAgICAgICAgICAgICAgICAgICAgKDAsIF9kb20ucmVtb3ZlQ2xhc3MpKHQuY2FwdGlvbnNCdXR0b24sIHQub3B0aW9ucy5jbGFzc1ByZWZpeCArICdjYXB0aW9ucy1lbmFibGVkJyk7CiAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2kxMSA9IDAsIF90b3RhbDkgPSB0LnRyYWNrcy5sZW5ndGg7IF9pMTEgPCBfdG90YWw5OyBfaTExKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfdHJhY2sgPSB0LnRyYWNrc1tfaTExXTsKICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfdHJhY2sudHJhY2tJZCA9PT0gdHJhY2tJZCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0LnNlbGVjdGVkVHJhY2sgPT09IG51bGwpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKDAsIF9kb20uYWRkQ2xhc3MpKHQuY2FwdGlvbnNCdXR0b24sIHQub3B0aW9ucy5jbGFzc1ByZWZpeCArICdjYXB0aW9ucy1lbmFibGVkJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQuc2VsZWN0ZWRUcmFjayA9IF90cmFjazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LmNhcHRpb25zLnNldEF0dHJpYnV0ZSgnbGFuZycsIHQuc2VsZWN0ZWRUcmFjay5zcmNsYW5nKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LmRpc3BsYXlDYXB0aW9ucygpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICB2YXIgZXZlbnQgPSAoMCwgX2dlbmVyYWwuY3JlYXRlRXZlbnQpKCdjYXB0aW9uc2NoYW5nZScsIHQubWVkaWEpOwogICAgICAgICAgICAgICAgIGV2ZW50LmRldGFpbC5jYXB0aW9uID0gdC5zZWxlY3RlZFRyYWNrOwogICAgICAgICAgICAgICAgIHQubWVkaWEuZGlzcGF0Y2hFdmVudChldmVudCk7CgogICAgICAgICAgICAgICAgIGlmICghc2V0QnlLZXlib2FyZCkgewogICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHQuZ2V0RWxlbWVudCh0LmNvbnRhaW5lcikuZm9jdXMoKTsKICAgICAgICAgICAgICAgICAgICAgfSwgNTAwKTsKICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICB9LAogICAgICAgICAgICAgbG9hZE5leHRUcmFjazogZnVuY3Rpb24gbG9hZE5leHRUcmFjaygpIHsKICAgICAgICAgICAgICAgICB2YXIgdCA9IHRoaXM7CgogICAgICAgICAgICAgICAgIHQudHJhY2tUb0xvYWQrKzsKICAgICAgICAgICAgICAgICBpZiAodC50cmFja1RvTG9hZCA8IHQudHJhY2tzLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgICB0LmlzTG9hZGluZ1RyYWNrID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgdC5sb2FkVHJhY2sodC50cmFja1RvTG9hZCk7CiAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgdC5pc0xvYWRpbmdUcmFjayA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgICB0LmNoZWNrRm9yVHJhY2tzKCk7CiAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgfSwKICAgICAgICAgICAgIGxvYWRUcmFjazogZnVuY3Rpb24gbG9hZFRyYWNrKGluZGV4KSB7CiAgICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzLAogICAgICAgICAgICAgICAgICAgICB0cmFjayA9IHQudHJhY2tzW2luZGV4XTsKCiAgICAgICAgICAgICAgICAgaWYgKHRyYWNrICE9PSB1bmRlZmluZWQgJiYgKHRyYWNrLnNyYyAhPT0gdW5kZWZpbmVkIHx8IHRyYWNrLnNyYyAhPT0gIiIpKSB7CiAgICAgICAgICAgICAgICAgICAgICgwLCBfZG9tLmFqYXgpKHRyYWNrLnNyYywgJ3RleHQnLCBmdW5jdGlvbiAoZCkgewogICAgICAgICAgICAgICAgICAgICAgICAgdHJhY2suZW50cmllcyA9IHR5cGVvZiBkID09PSAnc3RyaW5nJyAmJiAvPHR0XHMreG1sL2lnLmV4ZWMoZCkgPyBfbWVqczIuZGVmYXVsdC5UcmFja0Zvcm1hdFBhcnNlci5kZnhwLnBhcnNlKGQpIDogX21lanMyLmRlZmF1bHQuVHJhY2tGb3JtYXRQYXJzZXIud2VidnR0LnBhcnNlKGQpOwoKICAgICAgICAgICAgICAgICAgICAgICAgIHRyYWNrLmlzTG9hZGVkID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgIHQuZW5hYmxlVHJhY2tCdXR0b24odHJhY2spOwogICAgICAgICAgICAgICAgICAgICAgICAgdC5sb2FkTmV4dFRyYWNrKCk7CgogICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRyYWNrLmtpbmQgPT09ICdzbGlkZXMnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5zZXR1cFNsaWRlcyh0cmFjayk7CiAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRyYWNrLmtpbmQgPT09ICdjaGFwdGVycycgJiYgIXQuaGFzQ2hhcHRlcnMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LmRyYXdDaGFwdGVycyh0cmFjayk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5oYXNDaGFwdGVycyA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHQucmVtb3ZlVHJhY2tCdXR0b24odHJhY2sudHJhY2tJZCk7CiAgICAgICAgICAgICAgICAgICAgICAgICB0LmxvYWROZXh0VHJhY2soKTsKICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgfSwKICAgICAgICAgICAgIGVuYWJsZVRyYWNrQnV0dG9uOiBmdW5jdGlvbiBlbmFibGVUcmFja0J1dHRvbih0cmFjaykgewogICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcywKICAgICAgICAgICAgICAgICAgICAgbGFuZyA9IHRyYWNrLnNyY2xhbmcsCiAgICAgICAgICAgICAgICAgICAgIHRhcmdldCA9IF9kb2N1bWVudDIuZGVmYXVsdC5nZXRFbGVtZW50QnlJZCgnJyArIHRyYWNrLnRyYWNrSWQpOwoKICAgICAgICAgICAgICAgICBpZiAoIXRhcmdldCkgewogICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICB2YXIgbGFiZWwgPSB0cmFjay5sYWJlbDsKCiAgICAgICAgICAgICAgICAgaWYgKGxhYmVsID09PSAnJykgewogICAgICAgICAgICAgICAgICAgICBsYWJlbCA9IF9pMThuMi5kZWZhdWx0LnQoX21lanMyLmRlZmF1bHQubGFuZ3VhZ2UuY29kZXNbbGFuZ10pIHx8IGxhbmc7CiAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgIHRhcmdldC5kaXNhYmxlZCA9IGZhbHNlOwogICAgICAgICAgICAgICAgIHZhciB0YXJnZXRTaWJsaW5ncyA9ICgwLCBfZG9tLnNpYmxpbmdzKSh0YXJnZXQsIGZ1bmN0aW9uIChlbCkgewogICAgICAgICAgICAgICAgICAgICByZXR1cm4gKDAsIF9kb20uaGFzQ2xhc3MpKGVsLCB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAnY2FwdGlvbnMtc2VsZWN0b3ItbGFiZWwnKTsKICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgdG90YWwgPSB0YXJnZXRTaWJsaW5ncy5sZW5ndGg7IGkgPCB0b3RhbDsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgIHRhcmdldFNpYmxpbmdzW2ldLmlubmVySFRNTCA9IGxhYmVsOwogICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgaWYgKHQub3B0aW9ucy5zdGFydExhbmd1YWdlID09PSBsYW5nKSB7CiAgICAgICAgICAgICAgICAgICAgIHRhcmdldC5jaGVja2VkID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgdmFyIGV2ZW50ID0gKDAsIF9nZW5lcmFsLmNyZWF0ZUV2ZW50KSgnY2xpY2snLCB0YXJnZXQpOwogICAgICAgICAgICAgICAgICAgICB0YXJnZXQuZGlzcGF0Y2hFdmVudChldmVudCk7CiAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgfSwKICAgICAgICAgICAgIHJlbW92ZVRyYWNrQnV0dG9uOiBmdW5jdGlvbiByZW1vdmVUcmFja0J1dHRvbih0cmFja0lkKSB7CiAgICAgICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSBfZG9jdW1lbnQyLmRlZmF1bHQuZ2V0RWxlbWVudEJ5SWQoJycgKyB0cmFja0lkKTsKICAgICAgICAgICAgICAgICBpZiAoZWxlbWVudCkgewogICAgICAgICAgICAgICAgICAgICB2YXIgYnV0dG9uID0gZWxlbWVudC5jbG9zZXN0KCdsaScpOwogICAgICAgICAgICAgICAgICAgICBpZiAoYnV0dG9uKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICBidXR0b24ucmVtb3ZlKCk7CiAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICB9LAogICAgICAgICAgICAgYWRkVHJhY2tCdXR0b246IGZ1bmN0aW9uIGFkZFRyYWNrQnV0dG9uKHRyYWNrSWQsIGxhbmcsIGxhYmVsKSB7CiAgICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzOwogICAgICAgICAgICAgICAgIGlmIChsYWJlbCA9PT0gJycpIHsKICAgICAgICAgICAgICAgICAgICAgbGFiZWwgPSBfaTE4bjIuZGVmYXVsdC50KF9tZWpzMi5kZWZhdWx0Lmxhbmd1YWdlLmNvZGVzW2xhbmddKSB8fCBsYW5nOwogICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgdC5jYXB0aW9uc0J1dHRvbi5xdWVyeVNlbGVjdG9yKCd1bCcpLmlubmVySFRNTCArPSAnPGxpIGNsYXNzPSInICsgdC5vcHRpb25zLmNsYXNzUHJlZml4ICsgJ2NhcHRpb25zLXNlbGVjdG9yLWxpc3QtaXRlbSI+JyArICgnPGlucHV0IHR5cGU9InJhZGlvIiBjbGFzcz0iJyArIHQub3B0aW9ucy5jbGFzc1ByZWZpeCArICdjYXB0aW9ucy1zZWxlY3Rvci1pbnB1dCIgJykgKyAoJ25hbWU9IicgKyB0LmlkICsgJ19jYXB0aW9ucyIgaWQ9IicgKyB0cmFja0lkICsgJyIgdmFsdWU9IicgKyB0cmFja0lkICsgJyIgZGlzYWJsZWQ+JykgKyAoJzxsYWJlbCBjbGFzcz0iJyArIHQub3B0aW9ucy5jbGFzc1ByZWZpeCArICdjYXB0aW9ucy1zZWxlY3Rvci1sYWJlbCInKSArICgnZm9yPSInICsgdHJhY2tJZCArICciPicgKyBsYWJlbCArICcgKGxvYWRpbmcpPC9sYWJlbD4nKSArICc8L2xpPic7CiAgICAgICAgICAgICB9LAogICAgICAgICAgICAgY2hlY2tGb3JUcmFja3M6IGZ1bmN0aW9uIGNoZWNrRm9yVHJhY2tzKCkgewogICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpczsKCiAgICAgICAgICAgICAgICAgdmFyIGhhc1N1YnRpdGxlcyA9IGZhbHNlOwoKICAgICAgICAgICAgICAgICBpZiAodC5vcHRpb25zLmhpZGVDYXB0aW9uc0J1dHRvbldoZW5FbXB0eSkgewogICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgdG90YWwgPSB0LnRyYWNrcy5sZW5ndGg7IGkgPCB0b3RhbDsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICB2YXIga2luZCA9IHQudHJhY2tzW2ldLmtpbmQ7CiAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoKGtpbmQgPT09ICdzdWJ0aXRsZXMnIHx8IGtpbmQgPT09ICdjYXB0aW9ucycpICYmIHQudHJhY2tzW2ldLmlzTG9hZGVkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzU3VidGl0bGVzID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgdC5jYXB0aW9uc0J1dHRvbi5zdHlsZS5kaXNwbGF5ID0gaGFzU3VidGl0bGVzID8gJycgOiAnbm9uZSc7CiAgICAgICAgICAgICAgICAgICAgIHQuc2V0Q29udHJvbHNTaXplKCk7CiAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgfSwKICAgICAgICAgICAgIGRpc3BsYXlDYXB0aW9uczogZnVuY3Rpb24gZGlzcGxheUNhcHRpb25zKCkgewogICAgICAgICAgICAgICAgIGlmICh0aGlzLnRyYWNrcyA9PT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcywKICAgICAgICAgICAgICAgICAgICAgdHJhY2sgPSB0LnNlbGVjdGVkVHJhY2ssCiAgICAgICAgICAgICAgICAgICAgIHNhbml0aXplID0gZnVuY3Rpb24gc2FuaXRpemUoaHRtbCkgewogICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRpdiA9IF9kb2N1bWVudDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKICAgICAgICAgICAgICAgICAgICAgICAgIGRpdi5pbm5lckhUTUwgPSBodG1sOwoKICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzY3JpcHRzID0gZGl2LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdzY3JpcHQnKTsKICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpID0gc2NyaXB0cy5sZW5ndGg7CiAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoaS0tKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NyaXB0c1tpXS5yZW1vdmUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWxsRWxlbWVudHMgPSBkaXYuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJyonKTsKICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9pMTIgPSAwLCBuID0gYWxsRWxlbWVudHMubGVuZ3RoOyBfaTEyIDwgbjsgX2kxMisrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZXNPYmogPSBhbGxFbGVtZW50c1tfaTEyXS5hdHRyaWJ1dGVzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXR0cmlidXRlc09iaik7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwLCB0b3RhbCA9IGF0dHJpYnV0ZXMubGVuZ3RoOyBqIDwgdG90YWw7IGorKykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXR0cmlidXRlc1tqXS5uYW1lLnN0YXJ0c1dpdGgoJ29uJykgfHwgYXR0cmlidXRlc1tqXS52YWx1ZS5zdGFydHNXaXRoKCdqYXZhc2NyaXB0JykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsbEVsZW1lbnRzW19pMTJdLnJlbW92ZSgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGF0dHJpYnV0ZXNbal0ubmFtZSA9PT0gJ3N0eWxlJykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsRWxlbWVudHNbX2kxMl0ucmVtb3ZlQXR0cmlidXRlKGF0dHJpYnV0ZXNbal0ubmFtZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGl2LmlubmVySFRNTDsKICAgICAgICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICAgaWYgKHRyYWNrICE9PSBudWxsICYmIHRyYWNrLmlzTG9hZGVkKSB7CiAgICAgICAgICAgICAgICAgICAgIHZhciBpID0gdC5zZWFyY2hUcmFja1Bvc2l0aW9uKHRyYWNrLmVudHJpZXMsIHQubWVkaWEuY3VycmVudFRpbWUpOwogICAgICAgICAgICAgICAgICAgICBpZiAoaSA+IC0xKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGV4dCA9IHRyYWNrLmVudHJpZXNbaV0udGV4dDsKICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdC5vcHRpb25zLmNhcHRpb25UZXh0UHJlcHJvY2Vzc29yID09PSAnZnVuY3Rpb24nKSB0ZXh0ID0gdC5vcHRpb25zLmNhcHRpb25UZXh0UHJlcHJvY2Vzc29yKHRleHQpOwogICAgICAgICAgICAgICAgICAgICAgICAgdC5jYXB0aW9uc1RleHQuaW5uZXJIVE1MID0gc2FuaXRpemUodGV4dCk7CiAgICAgICAgICAgICAgICAgICAgICAgICB0LmNhcHRpb25zVGV4dC5jbGFzc05hbWUgPSB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAnY2FwdGlvbnMtdGV4dCAnICsgKHRyYWNrLmVudHJpZXNbaV0uaWRlbnRpZmllciB8fCAnJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICB0LmNhcHRpb25zLnN0eWxlLmRpc3BsYXkgPSAnJzsKICAgICAgICAgICAgICAgICAgICAgICAgIHQuY2FwdGlvbnMuc3R5bGUuaGVpZ2h0ID0gJzBweCc7CiAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgdC5jYXB0aW9ucy5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOwogICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgIHQuY2FwdGlvbnMuc3R5bGUuZGlzcGxheSA9ICdub25lJzsKICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICB9LAogICAgICAgICAgICAgc2V0dXBTbGlkZXM6IGZ1bmN0aW9uIHNldHVwU2xpZGVzKHRyYWNrKSB7CiAgICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzOwogICAgICAgICAgICAgICAgIHQuc2xpZGVzID0gdHJhY2s7CiAgICAgICAgICAgICAgICAgdC5zbGlkZXMuZW50cmllcy5pbWdzID0gW3Quc2xpZGVzLmVudHJpZXMubGVuZ3RoXTsKICAgICAgICAgICAgICAgICB0LnNob3dTbGlkZSgwKTsKICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICBzaG93U2xpZGU6IGZ1bmN0aW9uIHNob3dTbGlkZShpbmRleCkgewogICAgICAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpczsKCiAgICAgICAgICAgICAgICAgaWYgKHQudHJhY2tzID09PSB1bmRlZmluZWQgfHwgdC5zbGlkZXNDb250YWluZXIgPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICB2YXIgdXJsID0gdC5zbGlkZXMuZW50cmllc1tpbmRleF0udGV4dDsKCiAgICAgICAgICAgICAgICAgdmFyIGltZyA9IHQuc2xpZGVzLmVudHJpZXNbaW5kZXhdLmltZ3M7CgogICAgICAgICAgICAgICAgIGlmIChpbWcgPT09IHVuZGVmaW5lZCB8fCBpbWcuZmFkZUluID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgICAgICAgdmFyIGltYWdlID0gX2RvY3VtZW50Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2ltZycpOwogICAgICAgICAgICAgICAgICAgICBpbWFnZS5zcmMgPSB1cmw7CiAgICAgICAgICAgICAgICAgICAgIGltYWdlLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VsZiA9IF90aGlzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpc2libGUgPSAoMCwgX2RvbS5zaWJsaW5ncykoc2VsZiwgZnVuY3Rpb24gKGVsKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2aXNpYmxlKGVsKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc3R5bGUuZGlzcGxheSA9ICdub25lJzsKICAgICAgICAgICAgICAgICAgICAgICAgIHQuc2xpZGVzQ29udGFpbmVyLmlubmVySFRNTCArPSBzZWxmLmlubmVySFRNTDsKICAgICAgICAgICAgICAgICAgICAgICAgICgwLCBfZG9tLmZhZGVJbikodC5zbGlkZXNDb250YWluZXIucXVlcnlTZWxlY3RvcihpbWFnZSkpOwogICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIHRvdGFsID0gdmlzaWJsZS5sZW5ndGg7IGkgPCB0b3RhbDsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKDAsIF9kb20uZmFkZU91dCkodmlzaWJsZVtpXSwgNDAwKTsKICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgIHQuc2xpZGVzLmVudHJpZXNbaW5kZXhdLmltZ3MgPSBpbWcgPSBpbWFnZTsKICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCEoMCwgX2RvbS52aXNpYmxlKShpbWcpKSB7CiAgICAgICAgICAgICAgICAgICAgIHZhciBfdmlzaWJsZSA9ICgwLCBfZG9tLnNpYmxpbmdzKShzZWxmLCBmdW5jdGlvbiAoZWwpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfdmlzaWJsZShlbCk7CiAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAoMCwgX2RvbS5mYWRlSW4pKHQuc2xpZGVzQ29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoaW1nKSk7CiAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCB0b3RhbCA9IF92aXNpYmxlLmxlbmd0aDsgaSA8IHRvdGFsOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgICgwLCBfZG9tLmZhZGVPdXQpKF92aXNpYmxlW2ldKTsKICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICBkaXNwbGF5U2xpZGVzOiBmdW5jdGlvbiBkaXNwbGF5U2xpZGVzKCkgewogICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpczsKCiAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc2xpZGVzID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgdmFyIHNsaWRlcyA9IHQuc2xpZGVzLAogICAgICAgICAgICAgICAgICAgICBpID0gdC5zZWFyY2hUcmFja1Bvc2l0aW9uKHNsaWRlcy5lbnRyaWVzLCB0Lm1lZGlhLmN1cnJlbnRUaW1lKTsKCiAgICAgICAgICAgICAgICAgaWYgKGkgPiAtMSkgewogICAgICAgICAgICAgICAgICAgICB0LnNob3dTbGlkZShpKTsKICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICB9LAogICAgICAgICAgICAgZHJhd0NoYXB0ZXJzOiBmdW5jdGlvbiBkcmF3Q2hhcHRlcnMoY2hhcHRlcnMpIHsKICAgICAgICAgICAgICAgICB2YXIgdCA9IHRoaXMsCiAgICAgICAgICAgICAgICAgICAgIHRvdGFsID0gY2hhcHRlcnMuZW50cmllcy5sZW5ndGg7CgogICAgICAgICAgICAgICAgIGlmICghdG90YWwpIHsKICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgdC5jaGFwdGVyc0J1dHRvbi5xdWVyeVNlbGVjdG9yKCd1bCcpLmlubmVySFRNTCA9ICcnOwoKICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRvdGFsOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICAgdC5jaGFwdGVyc0J1dHRvbi5xdWVyeVNlbGVjdG9yKCd1bCcpLmlubmVySFRNTCArPSAnPGxpIGNsYXNzPSInICsgdC5vcHRpb25zLmNsYXNzUHJlZml4ICsgJ2NoYXB0ZXJzLXNlbGVjdG9yLWxpc3QtaXRlbSIgJyArICdyb2xlPSJtZW51aXRlbWNoZWNrYm94IiBhcmlhLWxpdmU9InBvbGl0ZSIgYXJpYS1kaXNhYmxlZD0iZmFsc2UiIGFyaWEtY2hlY2tlZD0iZmFsc2UiPicgKyAoJzxpbnB1dCB0eXBlPSJyYWRpbyIgY2xhc3M9IicgKyB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAnY2FwdGlvbnMtc2VsZWN0b3ItaW5wdXQiICcpICsgKCduYW1lPSInICsgdC5pZCArICdfY2hhcHRlcnMiIGlkPSInICsgdC5pZCArICdfY2hhcHRlcnNfJyArIGkgKyAnIiB2YWx1ZT0iJyArIGNoYXB0ZXJzLmVudHJpZXNbaV0uc3RhcnQgKyAnIiBkaXNhYmxlZD4nKSArICgnPGxhYmVsIGNsYXNzPSInICsgdC5vcHRpb25zLmNsYXNzUHJlZml4ICsgJ2NoYXB0ZXJzLXNlbGVjdG9yLWxhYmVsIicpICsgKCdmb3I9IicgKyB0LmlkICsgJ19jaGFwdGVyc18nICsgaSArICciPicgKyBjaGFwdGVycy5lbnRyaWVzW2ldLnRleHQgKyAnPC9sYWJlbD4nKSArICc8L2xpPic7CiAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICB2YXIgcmFkaW9zID0gdC5jaGFwdGVyc0J1dHRvbi5xdWVyeVNlbGVjdG9yQWxsKCdpbnB1dFt0eXBlPSJyYWRpbyJdJyksCiAgICAgICAgICAgICAgICAgICAgIGxhYmVscyA9IHQuY2hhcHRlcnNCdXR0b24ucXVlcnlTZWxlY3RvckFsbCgnLicgKyB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAnY2hhcHRlcnMtc2VsZWN0b3ItbGFiZWwnKTsKCiAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2kxMyA9IDAsIF90b3RhbDEwID0gcmFkaW9zLmxlbmd0aDsgX2kxMyA8IF90b3RhbDEwOyBfaTEzKyspIHsKICAgICAgICAgICAgICAgICAgICAgcmFkaW9zW19pMTNdLmRpc2FibGVkID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgIHJhZGlvc1tfaTEzXS5jaGVja2VkID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgIHJhZGlvc1tfaTEzXS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlzdEl0ZW1zID0gdC5jaGFwdGVyc0J1dHRvbi5xdWVyeVNlbGVjdG9yQWxsKCdsaScpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsID0gKDAsIF9kb20uc2libGluZ3MpKHNlbGYsIGZ1bmN0aW9uIChlbCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKDAsIF9kb20uaGFzQ2xhc3MpKGVsLCB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAnY2hhcHRlcnMtc2VsZWN0b3ItbGFiZWwnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVswXTsKCiAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmNoZWNrZWQgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5wYXJlbnROb2RlLnNldEF0dHJpYnV0ZSgnYXJpYS1jaGVja2VkJywgdHJ1ZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAoMCwgX2RvbS5hZGRDbGFzcykobGFiZWwsIHQub3B0aW9ucy5jbGFzc1ByZWZpeCArICdjaGFwdGVycy1zZWxlY3RlZCcpOwogICAgICAgICAgICAgICAgICAgICAgICAgKDAsIF9kb20ucmVtb3ZlQ2xhc3MpKHQuY2hhcHRlcnNCdXR0b24ucXVlcnlTZWxlY3RvcignLicgKyB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAnY2hhcHRlcnMtc2VsZWN0ZWQnKSwgdC5vcHRpb25zLmNsYXNzUHJlZml4ICsgJ2NoYXB0ZXJzLXNlbGVjdGVkJyk7CgogICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2kxNCA9IDAsIF90b3RhbDExID0gbGlzdEl0ZW1zLmxlbmd0aDsgX2kxNCA8IF90b3RhbDExOyBfaTE0KyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXN0SXRlbXNbX2kxNF0uc2V0QXR0cmlidXRlKCdhcmlhLWNoZWNrZWQnLCBmYWxzZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGtleWJvYXJkID0gZS5rZXlDb2RlIHx8IGUud2hpY2g7CiAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGtleWJvYXJkID09PSAndW5kZWZpbmVkJykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LmdldEVsZW1lbnQodC5jb250YWluZXIpLmZvY3VzKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgNTAwKTsKICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICB0Lm1lZGlhLnNldEN1cnJlbnRUaW1lKHBhcnNlRmxvYXQoc2VsZi52YWx1ZSkpOwogICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHQubWVkaWEucGF1c2VkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5tZWRpYS5wbGF5KCk7CiAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2kxNSA9IDAsIF90b3RhbDEyID0gbGFiZWxzLmxlbmd0aDsgX2kxNSA8IF90b3RhbDEyOyBfaTE1KyspIHsKICAgICAgICAgICAgICAgICAgICAgbGFiZWxzW19pMTVdLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByYWRpbyA9ICgwLCBfZG9tLnNpYmxpbmdzKSh0aGlzLCBmdW5jdGlvbiAoZWwpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZWwudGFnTmFtZSA9PT0gJ0lOUFVUJzsKICAgICAgICAgICAgICAgICAgICAgICAgIH0pWzBdLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50ID0gKDAsIF9nZW5lcmFsLmNyZWF0ZUV2ZW50KSgnY2xpY2snLCByYWRpbyk7CiAgICAgICAgICAgICAgICAgICAgICAgICByYWRpby5kaXNwYXRjaEV2ZW50KGV2ZW50KTsKICAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgfSwKICAgICAgICAgICAgIHNlYXJjaFRyYWNrUG9zaXRpb246IGZ1bmN0aW9uIHNlYXJjaFRyYWNrUG9zaXRpb24odHJhY2tzLCBjdXJyZW50VGltZSkgewogICAgICAgICAgICAgICAgIHZhciBsbyA9IDAsCiAgICAgICAgICAgICAgICAgICAgIGhpID0gdHJhY2tzLmxlbmd0aCAtIDEsCiAgICAgICAgICAgICAgICAgICAgIG1pZCA9IHZvaWQgMCwKICAgICAgICAgICAgICAgICAgICAgc3RhcnQgPSB2b2lkIDAsCiAgICAgICAgICAgICAgICAgICAgIHN0b3AgPSB2b2lkIDA7CgogICAgICAgICAgICAgICAgIHdoaWxlIChsbyA8PSBoaSkgewogICAgICAgICAgICAgICAgICAgICBtaWQgPSBsbyArIGhpID4+IDE7CiAgICAgICAgICAgICAgICAgICAgIHN0YXJ0ID0gdHJhY2tzW21pZF0uc3RhcnQ7CiAgICAgICAgICAgICAgICAgICAgIHN0b3AgPSB0cmFja3NbbWlkXS5zdG9wOwoKICAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRUaW1lID49IHN0YXJ0ICYmIGN1cnJlbnRUaW1lIDwgc3RvcCkgewogICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1pZDsKICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChzdGFydCA8IGN1cnJlbnRUaW1lKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICBsbyA9IG1pZCArIDE7CiAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RhcnQgPiBjdXJyZW50VGltZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgaGkgPSBtaWQgLSAxOwogICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICByZXR1cm4gLTE7CiAgICAgICAgICAgICB9CiAgICAgICAgIH0pOwoKICAgICAgICAgX21lanMyLmRlZmF1bHQubGFuZ3VhZ2UgPSB7CiAgICAgICAgICAgICBjb2RlczogewogICAgICAgICAgICAgICAgIGFmOiAnbWVqcy5hZnJpa2FhbnMnLAogICAgICAgICAgICAgICAgIHNxOiAnbWVqcy5hbGJhbmlhbicsCiAgICAgICAgICAgICAgICAgYXI6ICdtZWpzLmFyYWJpYycsCiAgICAgICAgICAgICAgICAgYmU6ICdtZWpzLmJlbGFydXNpYW4nLAogICAgICAgICAgICAgICAgIGJnOiAnbWVqcy5idWxnYXJpYW4nLAogICAgICAgICAgICAgICAgIGNhOiAnbWVqcy5jYXRhbGFuJywKICAgICAgICAgICAgICAgICB6aDogJ21lanMuY2hpbmVzZScsCiAgICAgICAgICAgICAgICAgJ3poLWNuJzogJ21lanMuY2hpbmVzZS1zaW1wbGlmaWVkJywKICAgICAgICAgICAgICAgICAnemgtdHcnOiAnbWVqcy5jaGluZXMtdHJhZGl0aW9uYWwnLAogICAgICAgICAgICAgICAgIGhyOiAnbWVqcy5jcm9hdGlhbicsCiAgICAgICAgICAgICAgICAgY3M6ICdtZWpzLmN6ZWNoJywKICAgICAgICAgICAgICAgICBkYTogJ21lanMuZGFuaXNoJywKICAgICAgICAgICAgICAgICBubDogJ21lanMuZHV0Y2gnLAogICAgICAgICAgICAgICAgIGVuOiAnbWVqcy5lbmdsaXNoJywKICAgICAgICAgICAgICAgICBldDogJ21lanMuZXN0b25pYW4nLAogICAgICAgICAgICAgICAgIGZsOiAnbWVqcy5maWxpcGlubycsCiAgICAgICAgICAgICAgICAgZmk6ICdtZWpzLmZpbm5pc2gnLAogICAgICAgICAgICAgICAgIGZyOiAnbWVqcy5mcmVuY2gnLAogICAgICAgICAgICAgICAgIGdsOiAnbWVqcy5nYWxpY2lhbicsCiAgICAgICAgICAgICAgICAgZGU6ICdtZWpzLmdlcm1hbicsCiAgICAgICAgICAgICAgICAgZWw6ICdtZWpzLmdyZWVrJywKICAgICAgICAgICAgICAgICBodDogJ21lanMuaGFpdGlhbi1jcmVvbGUnLAogICAgICAgICAgICAgICAgIGl3OiAnbWVqcy5oZWJyZXcnLAogICAgICAgICAgICAgICAgIGhpOiAnbWVqcy5oaW5kaScsCiAgICAgICAgICAgICAgICAgaHU6ICdtZWpzLmh1bmdhcmlhbicsCiAgICAgICAgICAgICAgICAgaXM6ICdtZWpzLmljZWxhbmRpYycsCiAgICAgICAgICAgICAgICAgaWQ6ICdtZWpzLmluZG9uZXNpYW4nLAogICAgICAgICAgICAgICAgIGdhOiAnbWVqcy5pcmlzaCcsCiAgICAgICAgICAgICAgICAgaXQ6ICdtZWpzLml0YWxpYW4nLAogICAgICAgICAgICAgICAgIGphOiAnbWVqcy5qYXBhbmVzZScsCiAgICAgICAgICAgICAgICAga286ICdtZWpzLmtvcmVhbicsCiAgICAgICAgICAgICAgICAgbHY6ICdtZWpzLmxhdHZpYW4nLAogICAgICAgICAgICAgICAgIGx0OiAnbWVqcy5saXRodWFuaWFuJywKICAgICAgICAgICAgICAgICBtazogJ21lanMubWFjZWRvbmlhbicsCiAgICAgICAgICAgICAgICAgbXM6ICdtZWpzLm1hbGF5JywKICAgICAgICAgICAgICAgICBtdDogJ21lanMubWFsdGVzZScsCiAgICAgICAgICAgICAgICAgbm86ICdtZWpzLm5vcndlZ2lhbicsCiAgICAgICAgICAgICAgICAgZmE6ICdtZWpzLnBlcnNpYW4nLAogICAgICAgICAgICAgICAgIHBsOiAnbWVqcy5wb2xpc2gnLAogICAgICAgICAgICAgICAgIHB0OiAnbWVqcy5wb3J0dWd1ZXNlJywKICAgICAgICAgICAgICAgICBybzogJ21lanMucm9tYW5pYW4nLAogICAgICAgICAgICAgICAgIHJ1OiAnbWVqcy5ydXNzaWFuJywKICAgICAgICAgICAgICAgICBzcjogJ21lanMuc2VyYmlhbicsCiAgICAgICAgICAgICAgICAgc2s6ICdtZWpzLnNsb3ZhaycsCiAgICAgICAgICAgICAgICAgc2w6ICdtZWpzLnNsb3ZlbmlhbicsCiAgICAgICAgICAgICAgICAgZXM6ICdtZWpzLnNwYW5pc2gnLAogICAgICAgICAgICAgICAgIHN3OiAnbWVqcy5zd2FoaWxpJywKICAgICAgICAgICAgICAgICBzdjogJ21lanMuc3dlZGlzaCcsCiAgICAgICAgICAgICAgICAgdGw6ICdtZWpzLnRhZ2Fsb2cnLAogICAgICAgICAgICAgICAgIHRoOiAnbWVqcy50aGFpJywKICAgICAgICAgICAgICAgICB0cjogJ21lanMudHVya2lzaCcsCiAgICAgICAgICAgICAgICAgdWs6ICdtZWpzLnVrcmFpbmlhbicsCiAgICAgICAgICAgICAgICAgdmk6ICdtZWpzLnZpZXRuYW1lc2UnLAogICAgICAgICAgICAgICAgIGN5OiAnbWVqcy53ZWxzaCcsCiAgICAgICAgICAgICAgICAgeWk6ICdtZWpzLnlpZGRpc2gnCiAgICAgICAgICAgICB9CiAgICAgICAgIH07CgogICAgICAgICBfbWVqczIuZGVmYXVsdC5UcmFja0Zvcm1hdFBhcnNlciA9IHsKICAgICAgICAgICAgIHdlYnZ0dDogewogICAgICAgICAgICAgICAgIHBhdHRlcm46IC9eKCg/OlswLTldezEsMn06KT9bMC05XXsyfTpbMC05XXsyfShbLC5dWzAtOV17MSwzfSk/KSAtLVw+ICgoPzpbMC05XXsxLDJ9Oik/WzAtOV17Mn06WzAtOV17Mn0oWywuXVswLTldezN9KT8pKC4qKSQvLAoKICAgICAgICAgICAgICAgICBwYXJzZTogZnVuY3Rpb24gcGFyc2UodHJhY2tUZXh0KSB7CiAgICAgICAgICAgICAgICAgICAgIHZhciBsaW5lcyA9IHRyYWNrVGV4dC5zcGxpdCgvXHI/XG4vKSwKICAgICAgICAgICAgICAgICAgICAgICAgIGVudHJpZXMgPSBbXTsKCiAgICAgICAgICAgICAgICAgICAgIHZhciB0aW1lY29kZSA9IHZvaWQgMCwKICAgICAgICAgICAgICAgICAgICAgICAgIHRleHQgPSB2b2lkIDAsCiAgICAgICAgICAgICAgICAgICAgICAgICBpZGVudGlmaWVyID0gdm9pZCAwOwoKICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIHRvdGFsID0gbGluZXMubGVuZ3RoOyBpIDwgdG90YWw7IGkrKykgewogICAgICAgICAgICAgICAgICAgICAgICAgdGltZWNvZGUgPSB0aGlzLnBhdHRlcm4uZXhlYyhsaW5lc1tpXSk7CgogICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRpbWVjb2RlICYmIGkgPCBsaW5lcy5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaSAtIDEgPj0gMCAmJiBsaW5lc1tpIC0gMV0gIT09ICcnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkZW50aWZpZXIgPSBsaW5lc1tpIC0gMV07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkrKzsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dCA9IGxpbmVzW2ldOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkrKzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAobGluZXNbaV0gIT09ICcnICYmIGkgPCBsaW5lcy5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dCA9IHRleHQgKyAnXG4nICsgbGluZXNbaV07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkrKzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dCA9IHRleHQgPT09IG51bGwgPyAnJyA6IHRleHQudHJpbSgpLnJlcGxhY2UoLyhcYihodHRwcz98ZnRwfGZpbGUpOlwvXC9bLUEtWjAtOSsmQCNcLyU/PX5ffCE6LC47XSpbLUEtWjAtOSsmQCNcLyU9fl98XSkvaWcsICI8YSBocmVmPSckMScgdGFyZ2V0PSdfYmxhbmsnPiQxPC9hPiIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVudHJpZXMucHVzaCh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0OiAoMCwgX3RpbWUuY29udmVydFNNUFRFdG9TZWNvbmRzKSh0aW1lY29kZVsxXSkgPT09IDAgPyAwLjIwMCA6ICgwLCBfdGltZS5jb252ZXJ0U01QVEV0b1NlY29uZHMpKHRpbWVjb2RlWzFdKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RvcDogKDAsIF90aW1lLmNvbnZlcnRTTVBURXRvU2Vjb25kcykodGltZWNvZGVbM10pLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiB0ZXh0LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5nczogdGltZWNvZGVbNV0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgIGlkZW50aWZpZXIgPSAnJzsKICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICByZXR1cm4gZW50cmllczsKICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICB9LAoKICAgICAgICAgICAgIGRmeHA6IHsKICAgICAgICAgICAgICAgICBwYXJzZTogZnVuY3Rpb24gcGFyc2UodHJhY2tUZXh0KSB7CiAgICAgICAgICAgICAgICAgICAgIHRyYWNrVGV4dCA9ICQodHJhY2tUZXh0KS5maWx0ZXIoJ3R0Jyk7CiAgICAgICAgICAgICAgICAgICAgIHZhciBjb250YWluZXIgPSB0cmFja1RleHQuZmlyc3RDaGlsZCwKICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVzID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoJ3AnKSwKICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlTm9kZSA9IHRyYWNrVGV4dC5nZXRFbGVtZW50QnlJZCgnJyArIGNvbnRhaW5lci5hdHRyKCdzdHlsZScpKSwKICAgICAgICAgICAgICAgICAgICAgICAgIGVudHJpZXMgPSBbXTsKCiAgICAgICAgICAgICAgICAgICAgIHZhciBzdHlsZXMgPSB2b2lkIDA7CgogICAgICAgICAgICAgICAgICAgICBpZiAoc3R5bGVOb2RlLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGVOb2RlLnJlbW92ZUF0dHJpYnV0ZSgnaWQnKTsKICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhdHRyaWJ1dGVzID0gc3R5bGVOb2RlLmF0dHJpYnV0ZXM7CiAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYXR0cmlidXRlcy5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZXMgPSB7fTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgdG90YWwgPSBhdHRyaWJ1dGVzLmxlbmd0aDsgaSA8IHRvdGFsOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGVzW2F0dHJpYnV0ZXNbaV0ubmFtZS5zcGxpdCgiOiIpWzFdXSA9IGF0dHJpYnV0ZXNbaV0udmFsdWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfaTE2ID0gMCwgX3RvdGFsMTMgPSBsaW5lcy5sZW5ndGg7IF9pMTYgPCBfdG90YWwxMzsgX2kxNisrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3R5bGUgPSB2b2lkIDAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RlbXAgPSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBudWxsLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdG9wOiBudWxsLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogbnVsbCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogbnVsbAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxpbmVzLmVxKF9pMTYpLmF0dHIoJ2JlZ2luJykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGVtcC5zdGFydCA9ICgwLCBfdGltZS5jb252ZXJ0U01QVEV0b1NlY29uZHMpKGxpbmVzLmVxKF9pMTYpLmF0dHIoJ2JlZ2luJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFfdGVtcC5zdGFydCAmJiBsaW5lcy5lcShfaTE2IC0gMSkuYXR0cignZW5kJykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGVtcC5zdGFydCA9ICgwLCBfdGltZS5jb252ZXJ0U01QVEV0b1NlY29uZHMpKGxpbmVzLmVxKF9pMTYgLSAxKS5hdHRyKCdlbmQnKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGluZXMuZXEoX2kxNikuYXR0cignZW5kJykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGVtcC5zdG9wID0gKDAsIF90aW1lLmNvbnZlcnRTTVBURXRvU2Vjb25kcykobGluZXMuZXEoX2kxNikuYXR0cignZW5kJykpOwogICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFfdGVtcC5zdG9wICYmIGxpbmVzLmVxKF9pMTYgKyAxKS5hdHRyKCdiZWdpbicpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3RlbXAuc3RvcCA9ICgwLCBfdGltZS5jb252ZXJ0U01QVEV0b1NlY29uZHMpKGxpbmVzLmVxKF9pMTYgKyAxKS5hdHRyKCdiZWdpbicpKTsKICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3R5bGVzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGUgPSAnJzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfc3R5bGUgaW4gc3R5bGVzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlICs9IF9zdHlsZSArICc6JyArIHN0eWxlc1tfc3R5bGVdICsgJzsnOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdHlsZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIF90ZW1wLnN0eWxlID0gc3R5bGU7CiAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3RlbXAuc3RhcnQgPT09IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfdGVtcC5zdGFydCA9IDAuMjAwOwogICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgX3RlbXAudGV4dCA9IGxpbmVzLmVxKF9pMTYpLmlubmVySFRNTC50cmltKCkucmVwbGFjZSgvKFxiKGh0dHBzP3xmdHB8ZmlsZSk6XC9cL1stQS1aMC05KyZAI1wvJT89fl98ITosLjtdKlstQS1aMC05KyZAI1wvJT1+X3xdKS9pZywgIjxhIGhyZWY9JyQxJyB0YXJnZXQ9J19ibGFuayc+JDE8L2E+Iik7CiAgICAgICAgICAgICAgICAgICAgICAgICBlbnRyaWVzLnB1c2goX3RlbXApOwogICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlbnRyaWVzOwogICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgIH0KICAgICAgICAgfTsKCiAgICAgfSwgeyAiMTYiOiAxNiwgIjIiOiAyLCAiMjYiOiAyNiwgIjI3IjogMjcsICIzMCI6IDMwLCAiNSI6IDUsICI3IjogNyB9XSwgMTQ6IFtmdW5jdGlvbiAoX2RlcmVxXywgbW9kdWxlLCBleHBvcnRzKSB7CiAgICAgICAgICd1c2Ugc3RyaWN0JzsKCiAgICAgICAgIHZhciBfZG9jdW1lbnQgPSBfZGVyZXFfKDIpOwoKICAgICAgICAgdmFyIF9kb2N1bWVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kb2N1bWVudCk7CgogICAgICAgICB2YXIgX3BsYXllciA9IF9kZXJlcV8oMTYpOwoKICAgICAgICAgdmFyIF9wbGF5ZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcGxheWVyKTsKCiAgICAgICAgIHZhciBfaTE4biA9IF9kZXJlcV8oNSk7CgogICAgICAgICB2YXIgX2kxOG4yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaTE4bik7CgogICAgICAgICB2YXIgX2NvbnN0YW50cyA9IF9kZXJlcV8oMjUpOwoKICAgICAgICAgdmFyIF9nZW5lcmFsID0gX2RlcmVxXygyNyk7CgogICAgICAgICB2YXIgX2RvbSA9IF9kZXJlcV8oMjYpOwoKICAgICAgICAgZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCiAgICAgICAgIE9iamVjdC5hc3NpZ24oX3BsYXllci5jb25maWcsIHsKICAgICAgICAgICAgIG11dGVUZXh0OiBudWxsLAoKICAgICAgICAgICAgIHVubXV0ZVRleHQ6IG51bGwsCgogICAgICAgICAgICAgYWxseVZvbHVtZUNvbnRyb2xUZXh0OiBudWxsLAoKICAgICAgICAgICAgIGhpZGVWb2x1bWVPblRvdWNoRGV2aWNlczogdHJ1ZSwKCiAgICAgICAgICAgICBhdWRpb1ZvbHVtZTogJ2hvcml6b250YWwnLAoKICAgICAgICAgICAgIHZpZGVvVm9sdW1lOiAndmVydGljYWwnLAoKICAgICAgICAgICAgIHN0YXJ0Vm9sdW1lOiAwLjgKICAgICAgICAgfSk7CgogICAgICAgICBPYmplY3QuYXNzaWduKF9wbGF5ZXIyLmRlZmF1bHQucHJvdG90eXBlLCB7CiAgICAgICAgICAgICBidWlsZHZvbHVtZTogZnVuY3Rpb24gYnVpbGR2b2x1bWUocGxheWVyLCBjb250cm9scywgbGF5ZXJzLCBtZWRpYSkgewogICAgICAgICAgICAgICAgIGlmICgoX2NvbnN0YW50cy5JU19BTkRST0lEIHx8IF9jb25zdGFudHMuSVNfSU9TKSAmJiB0aGlzLm9wdGlvbnMuaGlkZVZvbHVtZU9uVG91Y2hEZXZpY2VzKSB7CiAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcywKICAgICAgICAgICAgICAgICAgICAgbW9kZSA9IHQuaXNWaWRlbyA/IHQub3B0aW9ucy52aWRlb1ZvbHVtZSA6IHQub3B0aW9ucy5hdWRpb1ZvbHVtZSwKICAgICAgICAgICAgICAgICAgICAgbXV0ZVRleHQgPSAoMCwgX2dlbmVyYWwuaXNTdHJpbmcpKHQub3B0aW9ucy5tdXRlVGV4dCkgPyB0Lm9wdGlvbnMubXV0ZVRleHQgOiBfaTE4bjIuZGVmYXVsdC50KCdtZWpzLm11dGUnKSwKICAgICAgICAgICAgICAgICAgICAgdW5tdXRlVGV4dCA9ICgwLCBfZ2VuZXJhbC5pc1N0cmluZykodC5vcHRpb25zLnVubXV0ZVRleHQpID8gdC5vcHRpb25zLnVubXV0ZVRleHQgOiBfaTE4bjIuZGVmYXVsdC50KCdtZWpzLnVubXV0ZScpLAogICAgICAgICAgICAgICAgICAgICB2b2x1bWVDb250cm9sVGV4dCA9ICgwLCBfZ2VuZXJhbC5pc1N0cmluZykodC5vcHRpb25zLmFsbHlWb2x1bWVDb250cm9sVGV4dCkgPyB0Lm9wdGlvbnMuYWxseVZvbHVtZUNvbnRyb2xUZXh0IDogX2kxOG4yLmRlZmF1bHQudCgnbWVqcy52b2x1bWUtaGVscC10ZXh0JyksCiAgICAgICAgICAgICAgICAgICAgIG11dGUgPSBfZG9jdW1lbnQyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CgogICAgICAgICAgICAgICAgIG11dGUuY2xhc3NOYW1lID0gdC5vcHRpb25zLmNsYXNzUHJlZml4ICsgJ2J1dHRvbiAnICsgdC5vcHRpb25zLmNsYXNzUHJlZml4ICsgJ3ZvbHVtZS1idXR0b24gJyArIHQub3B0aW9ucy5jbGFzc1ByZWZpeCArICdtdXRlJzsKICAgICAgICAgICAgICAgICBtdXRlLmlubmVySFRNTCA9IG1vZGUgPT09ICdob3Jpem9udGFsJyA/ICc8YnV0dG9uIHR5cGU9ImJ1dHRvbiIgYXJpYS1jb250cm9scz0iJyArIHQuaWQgKyAnIiB0aXRsZT0iJyArIG11dGVUZXh0ICsgJyIgYXJpYS1sYWJlbD0iJyArIG11dGVUZXh0ICsgJyIgdGFiaW5kZXg9IjAiPjwvYnV0dG9uPicgOiAnPGJ1dHRvbiB0eXBlPSJidXR0b24iIGFyaWEtY29udHJvbHM9IicgKyB0LmlkICsgJyIgdGl0bGU9IicgKyBtdXRlVGV4dCArICciIGFyaWEtbGFiZWw9IicgKyBtdXRlVGV4dCArICciIHRhYmluZGV4PSIwIj48L2J1dHRvbj4nICsgKCc8YSBocmVmPSJqYXZhc2NyaXB0OnZvaWQoMCk7IiBjbGFzcz0iJyArIHQub3B0aW9ucy5jbGFzc1ByZWZpeCArICd2b2x1bWUtc2xpZGVyIiAnKSArICgnYXJpYS1sYWJlbD0iJyArIF9pMThuMi5kZWZhdWx0LnQoJ21lanMudm9sdW1lLXNsaWRlcicpICsgJyIgYXJpYS12YWx1ZW1pbj0iMCIgYXJpYS12YWx1ZW1heD0iMTAwIiByb2xlPSJzbGlkZXIiICcpICsgJ2FyaWEtb3JpZW50YXRpb249InZlcnRpY2FsIj4nICsgKCc8c3BhbiBjbGFzcz0iJyArIHQub3B0aW9ucy5jbGFzc1ByZWZpeCArICdvZmZzY3JlZW4iPicgKyB2b2x1bWVDb250cm9sVGV4dCArICc8L3NwYW4+JykgKyAoJzxkaXYgY2xhc3M9IicgKyB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAndm9sdW1lLXRvdGFsIj4nKSArICgnPGRpdiBjbGFzcz0iJyArIHQub3B0aW9ucy5jbGFzc1ByZWZpeCArICd2b2x1bWUtY3VycmVudCI+PC9kaXY+JykgKyAoJzxkaXYgY2xhc3M9IicgKyB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAndm9sdW1lLWhhbmRsZSI+PC9kaXY+JykgKyAnPC9kaXY+JyArICc8L2E+JzsKCiAgICAgICAgICAgICAgICAgdC5hZGRDb250cm9sRWxlbWVudChtdXRlLCAndm9sdW1lJyk7CgogICAgICAgICAgICAgICAgIHQub3B0aW9ucy5rZXlBY3Rpb25zLnB1c2goewogICAgICAgICAgICAgICAgICAgICBrZXlzOiBbMzhdLAogICAgICAgICAgICAgICAgICAgICBhY3Rpb246IGZ1bmN0aW9uIGFjdGlvbihwbGF5ZXIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2b2x1bWVTbGlkZXIgPSBwbGF5ZXIuZ2V0RWxlbWVudChwbGF5ZXIuY29udGFpbmVyKS5xdWVyeVNlbGVjdG9yKCcuJyArIHQub3B0aW9ucy5jbGFzc1ByZWZpeCArICd2b2x1bWUtc2xpZGVyJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodm9sdW1lU2xpZGVyICYmIHZvbHVtZVNsaWRlci5tYXRjaGVzKCc6Zm9jdXMnKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZvbHVtZVNsaWRlci5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJzsKICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwbGF5ZXIuaXNWaWRlbykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllci5zaG93Q29udHJvbHMoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXIuc3RhcnRDb250cm9sc1RpbWVyKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5ld1ZvbHVtZSA9IE1hdGgubWluKHBsYXllci52b2x1bWUgKyAwLjEsIDEpOwogICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyLnNldFZvbHVtZShuZXdWb2x1bWUpOwogICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5ld1ZvbHVtZSA+IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXIuc2V0TXV0ZWQoZmFsc2UpOwogICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgICBrZXlzOiBbNDBdLAogICAgICAgICAgICAgICAgICAgICBhY3Rpb246IGZ1bmN0aW9uIGFjdGlvbihwbGF5ZXIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2b2x1bWVTbGlkZXIgPSBwbGF5ZXIuZ2V0RWxlbWVudChwbGF5ZXIuY29udGFpbmVyKS5xdWVyeVNlbGVjdG9yKCcuJyArIHQub3B0aW9ucy5jbGFzc1ByZWZpeCArICd2b2x1bWUtc2xpZGVyJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodm9sdW1lU2xpZGVyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdm9sdW1lU2xpZGVyLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snOwogICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwbGF5ZXIuaXNWaWRlbykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllci5zaG93Q29udHJvbHMoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXIuc3RhcnRDb250cm9sc1RpbWVyKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5ld1ZvbHVtZSA9IE1hdGgubWF4KHBsYXllci52b2x1bWUgLSAwLjEsIDApOwogICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyLnNldFZvbHVtZShuZXdWb2x1bWUpOwoKICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXdWb2x1bWUgPD0gMC4xKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyLnNldE11dGVkKHRydWUpOwogICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgICAgICBrZXlzOiBbNzddLAogICAgICAgICAgICAgICAgICAgICBhY3Rpb246IGZ1bmN0aW9uIGFjdGlvbihwbGF5ZXIpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2b2x1bWVTbGlkZXIgPSBwbGF5ZXIuZ2V0RWxlbWVudChwbGF5ZXIuY29udGFpbmVyKS5xdWVyeVNlbGVjdG9yKCcuJyArIHQub3B0aW9ucy5jbGFzc1ByZWZpeCArICd2b2x1bWUtc2xpZGVyJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodm9sdW1lU2xpZGVyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdm9sdW1lU2xpZGVyLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snOwogICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwbGF5ZXIuaXNWaWRlbykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllci5zaG93Q29udHJvbHMoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXIuc3RhcnRDb250cm9sc1RpbWVyKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGxheWVyLm1lZGlhLm11dGVkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyLnNldE11dGVkKGZhbHNlKTsKICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyLnNldE11dGVkKHRydWUpOwogICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgIGlmIChtb2RlID09PSAnaG9yaXpvbnRhbCcpIHsKICAgICAgICAgICAgICAgICAgICAgdmFyIGFuY2hvciA9IF9kb2N1bWVudDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdhJyk7CiAgICAgICAgICAgICAgICAgICAgIGFuY2hvci5jbGFzc05hbWUgPSB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAnaG9yaXpvbnRhbC12b2x1bWUtc2xpZGVyJzsKICAgICAgICAgICAgICAgICAgICAgYW5jaG9yLmhyZWYgPSAnamF2YXNjcmlwdDp2b2lkKDApOyc7CiAgICAgICAgICAgICAgICAgICAgIGFuY2hvci5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnLCBfaTE4bjIuZGVmYXVsdC50KCdtZWpzLnZvbHVtZS1zbGlkZXInKSk7CiAgICAgICAgICAgICAgICAgICAgIGFuY2hvci5zZXRBdHRyaWJ1dGUoJ2FyaWEtdmFsdWVtaW4nLCAwKTsKICAgICAgICAgICAgICAgICAgICAgYW5jaG9yLnNldEF0dHJpYnV0ZSgnYXJpYS12YWx1ZW1heCcsIDEwMCk7CiAgICAgICAgICAgICAgICAgICAgIGFuY2hvci5zZXRBdHRyaWJ1dGUoJ2FyaWEtdmFsdWVub3cnLCAxMDApOwogICAgICAgICAgICAgICAgICAgICBhbmNob3Iuc2V0QXR0cmlidXRlKCdyb2xlJywgJ3NsaWRlcicpOwogICAgICAgICAgICAgICAgICAgICBhbmNob3IuaW5uZXJIVE1MICs9ICc8c3BhbiBjbGFzcz0iJyArIHQub3B0aW9ucy5jbGFzc1ByZWZpeCArICdvZmZzY3JlZW4iPicgKyB2b2x1bWVDb250cm9sVGV4dCArICc8L3NwYW4+JyArICgnPGRpdiBjbGFzcz0iJyArIHQub3B0aW9ucy5jbGFzc1ByZWZpeCArICdob3Jpem9udGFsLXZvbHVtZS10b3RhbCI+JykgKyAoJzxkaXYgY2xhc3M9IicgKyB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAnaG9yaXpvbnRhbC12b2x1bWUtY3VycmVudCI+PC9kaXY+JykgKyAoJzxkaXYgY2xhc3M9IicgKyB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAnaG9yaXpvbnRhbC12b2x1bWUtaGFuZGxlIj48L2Rpdj4nKSArICc8L2Rpdj4nOwogICAgICAgICAgICAgICAgICAgICBtdXRlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGFuY2hvciwgbXV0ZS5uZXh0U2libGluZyk7CiAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICB2YXIgbW91c2VJc0Rvd24gPSBmYWxzZSwKICAgICAgICAgICAgICAgICAgICAgbW91c2VJc092ZXIgPSBmYWxzZSwKICAgICAgICAgICAgICAgICAgICAgbW9kaWZpZWQgPSBmYWxzZSwKICAgICAgICAgICAgICAgICAgICAgdXBkYXRlVm9sdW1lU2xpZGVyID0gZnVuY3Rpb24gdXBkYXRlVm9sdW1lU2xpZGVyKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZvbHVtZSA9IE1hdGguZmxvb3IobWVkaWEudm9sdW1lICogMTAwKTsKICAgICAgICAgICAgICAgICAgICAgICAgIHZvbHVtZVNsaWRlci5zZXRBdHRyaWJ1dGUoJ2FyaWEtdmFsdWVub3cnLCB2b2x1bWUpOwogICAgICAgICAgICAgICAgICAgICAgICAgdm9sdW1lU2xpZGVyLnNldEF0dHJpYnV0ZSgnYXJpYS12YWx1ZXRleHQnLCB2b2x1bWUgKyAnJScpOwogICAgICAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgICB2YXIgdm9sdW1lU2xpZGVyID0gbW9kZSA9PT0gJ3ZlcnRpY2FsJyA/IHQuZ2V0RWxlbWVudCh0LmNvbnRhaW5lcikucXVlcnlTZWxlY3RvcignLicgKyB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAndm9sdW1lLXNsaWRlcicpIDogdC5nZXRFbGVtZW50KHQuY29udGFpbmVyKS5xdWVyeVNlbGVjdG9yKCcuJyArIHQub3B0aW9ucy5jbGFzc1ByZWZpeCArICdob3Jpem9udGFsLXZvbHVtZS1zbGlkZXInKSwKICAgICAgICAgICAgICAgICAgICAgdm9sdW1lVG90YWwgPSBtb2RlID09PSAndmVydGljYWwnID8gdC5nZXRFbGVtZW50KHQuY29udGFpbmVyKS5xdWVyeVNlbGVjdG9yKCcuJyArIHQub3B0aW9ucy5jbGFzc1ByZWZpeCArICd2b2x1bWUtdG90YWwnKSA6IHQuZ2V0RWxlbWVudCh0LmNvbnRhaW5lcikucXVlcnlTZWxlY3RvcignLicgKyB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAnaG9yaXpvbnRhbC12b2x1bWUtdG90YWwnKSwKICAgICAgICAgICAgICAgICAgICAgdm9sdW1lQ3VycmVudCA9IG1vZGUgPT09ICd2ZXJ0aWNhbCcgPyB0LmdldEVsZW1lbnQodC5jb250YWluZXIpLnF1ZXJ5U2VsZWN0b3IoJy4nICsgdC5vcHRpb25zLmNsYXNzUHJlZml4ICsgJ3ZvbHVtZS1jdXJyZW50JykgOiB0LmdldEVsZW1lbnQodC5jb250YWluZXIpLnF1ZXJ5U2VsZWN0b3IoJy4nICsgdC5vcHRpb25zLmNsYXNzUHJlZml4ICsgJ2hvcml6b250YWwtdm9sdW1lLWN1cnJlbnQnKSwKICAgICAgICAgICAgICAgICAgICAgdm9sdW1lSGFuZGxlID0gbW9kZSA9PT0gJ3ZlcnRpY2FsJyA/IHQuZ2V0RWxlbWVudCh0LmNvbnRhaW5lcikucXVlcnlTZWxlY3RvcignLicgKyB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAndm9sdW1lLWhhbmRsZScpIDogdC5nZXRFbGVtZW50KHQuY29udGFpbmVyKS5xdWVyeVNlbGVjdG9yKCcuJyArIHQub3B0aW9ucy5jbGFzc1ByZWZpeCArICdob3Jpem9udGFsLXZvbHVtZS1oYW5kbGUnKSwKICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb25Wb2x1bWVIYW5kbGUgPSBmdW5jdGlvbiBwb3NpdGlvblZvbHVtZUhhbmRsZSh2b2x1bWUpIHsKCiAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodm9sdW1lID09PSBudWxsIHx8IGlzTmFOKHZvbHVtZSkgfHwgdm9sdW1lID09PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgdm9sdW1lID0gTWF0aC5tYXgoMCwgdm9sdW1lKTsKICAgICAgICAgICAgICAgICAgICAgICAgIHZvbHVtZSA9IE1hdGgubWluKHZvbHVtZSwgMSk7CgogICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZvbHVtZSA9PT0gMCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICgwLCBfZG9tLnJlbW92ZUNsYXNzKShtdXRlLCB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAnbXV0ZScpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICgwLCBfZG9tLmFkZENsYXNzKShtdXRlLCB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAndW5tdXRlJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJ1dHRvbiA9IG11dGUuZmlyc3RFbGVtZW50Q2hpbGQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uLnNldEF0dHJpYnV0ZSgndGl0bGUnLCB1bm11dGVUZXh0KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXR0b24uc2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsJywgdW5tdXRlVGV4dCk7CiAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICgwLCBfZG9tLnJlbW92ZUNsYXNzKShtdXRlLCB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAndW5tdXRlJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKDAsIF9kb20uYWRkQ2xhc3MpKG11dGUsIHQub3B0aW9ucy5jbGFzc1ByZWZpeCArICdtdXRlJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9idXR0b24gPSBtdXRlLmZpcnN0RWxlbWVudENoaWxkOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9idXR0b24uc2V0QXR0cmlidXRlKCd0aXRsZScsIG11dGVUZXh0KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfYnV0dG9uLnNldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcsIG11dGVUZXh0KTsKICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdm9sdW1lUGVyY2VudGFnZSA9IHZvbHVtZSAqIDEwMCArICclJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2b2x1bWVTdHlsZXMgPSBnZXRDb21wdXRlZFN0eWxlKHZvbHVtZUhhbmRsZSk7CgogICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1vZGUgPT09ICd2ZXJ0aWNhbCcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2b2x1bWVDdXJyZW50LnN0eWxlLmJvdHRvbSA9IDA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdm9sdW1lQ3VycmVudC5zdHlsZS5oZWlnaHQgPSB2b2x1bWVQZXJjZW50YWdlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZvbHVtZUhhbmRsZS5zdHlsZS5ib3R0b20gPSB2b2x1bWVQZXJjZW50YWdlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZvbHVtZUhhbmRsZS5zdHlsZS5tYXJnaW5Cb3R0b20gPSAtcGFyc2VGbG9hdCh2b2x1bWVTdHlsZXMuaGVpZ2h0KSAvIDIgKyAncHgnOwogICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2b2x1bWVDdXJyZW50LnN0eWxlLmxlZnQgPSAwOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZvbHVtZUN1cnJlbnQuc3R5bGUud2lkdGggPSB2b2x1bWVQZXJjZW50YWdlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZvbHVtZUhhbmRsZS5zdHlsZS5sZWZ0ID0gdm9sdW1lUGVyY2VudGFnZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2b2x1bWVIYW5kbGUuc3R5bGUubWFyZ2luTGVmdCA9IC1wYXJzZUZsb2F0KHZvbHVtZVN0eWxlcy53aWR0aCkgLyAyICsgJ3B4JzsKICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgaGFuZGxlVm9sdW1lTW92ZSA9IGZ1bmN0aW9uIGhhbmRsZVZvbHVtZU1vdmUoZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRvdGFsT2Zmc2V0ID0gKDAsIF9kb20ub2Zmc2V0KSh2b2x1bWVUb3RhbCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdm9sdW1lU3R5bGVzID0gZ2V0Q29tcHV0ZWRTdHlsZSh2b2x1bWVUb3RhbCk7CgogICAgICAgICAgICAgICAgICAgICAgICAgbW9kaWZpZWQgPSB0cnVlOwoKICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2b2x1bWUgPSBudWxsOwoKICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtb2RlID09PSAndmVydGljYWwnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJhaWxIZWlnaHQgPSBwYXJzZUZsb2F0KHZvbHVtZVN0eWxlcy5oZWlnaHQpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdZID0gZS5wYWdlWSAtIHRvdGFsT2Zmc2V0LnRvcDsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdm9sdW1lID0gKHJhaWxIZWlnaHQgLSBuZXdZKSAvIHJhaWxIZWlnaHQ7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0b3RhbE9mZnNldC50b3AgPT09IDAgfHwgdG90YWxPZmZzZXQubGVmdCA9PT0gMCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmFpbFdpZHRoID0gcGFyc2VGbG9hdCh2b2x1bWVTdHlsZXMud2lkdGgpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdYID0gZS5wYWdlWCAtIHRvdGFsT2Zmc2V0LmxlZnQ7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZvbHVtZSA9IG5ld1ggLyByYWlsV2lkdGg7CiAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgdm9sdW1lID0gTWF0aC5tYXgoMCwgdm9sdW1lKTsKICAgICAgICAgICAgICAgICAgICAgICAgIHZvbHVtZSA9IE1hdGgubWluKHZvbHVtZSwgMSk7CgogICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb25Wb2x1bWVIYW5kbGUodm9sdW1lKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICB0LnNldE11dGVkKHZvbHVtZSA9PT0gMCk7CiAgICAgICAgICAgICAgICAgICAgICAgICB0LnNldFZvbHVtZSh2b2x1bWUpOwoKICAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7CiAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgIHRvZ2dsZU11dGUgPSBmdW5jdGlvbiB0b2dnbGVNdXRlKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHQubXV0ZWQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvblZvbHVtZUhhbmRsZSgwKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoMCwgX2RvbS5yZW1vdmVDbGFzcykobXV0ZSwgdC5vcHRpb25zLmNsYXNzUHJlZml4ICsgJ211dGUnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoMCwgX2RvbS5hZGRDbGFzcykobXV0ZSwgdC5vcHRpb25zLmNsYXNzUHJlZml4ICsgJ3VubXV0ZScpOwogICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvblZvbHVtZUhhbmRsZShtZWRpYS52b2x1bWUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICgwLCBfZG9tLnJlbW92ZUNsYXNzKShtdXRlLCB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAndW5tdXRlJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKDAsIF9kb20uYWRkQ2xhc3MpKG11dGUsIHQub3B0aW9ucy5jbGFzc1ByZWZpeCArICdtdXRlJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgIHBsYXllci5nZXRFbGVtZW50KHBsYXllci5jb250YWluZXIpLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgICAgICB2YXIgaGFzRm9jdXMgPSAhIWUudGFyZ2V0LmNsb3Nlc3QoJy4nICsgdC5vcHRpb25zLmNsYXNzUHJlZml4ICsgJ2NvbnRhaW5lcicpOwogICAgICAgICAgICAgICAgICAgICBpZiAoIWhhc0ZvY3VzICYmIG1vZGUgPT09ICd2ZXJ0aWNhbCcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHZvbHVtZVNsaWRlci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOwogICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgIG11dGUuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VlbnRlcicsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgICAgICAgIGlmIChlLnRhcmdldCA9PT0gbXV0ZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgdm9sdW1lU2xpZGVyLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snOwogICAgICAgICAgICAgICAgICAgICAgICAgbW91c2VJc092ZXIgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTsKICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgIG11dGUuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXNpbicsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgdm9sdW1lU2xpZGVyLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snOwogICAgICAgICAgICAgICAgICAgICBtb3VzZUlzT3ZlciA9IHRydWU7CiAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgIG11dGUuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXNvdXQnLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgICAgICBpZiAoKCFlLnJlbGF0ZWRUYXJnZXQgfHwgZS5yZWxhdGVkVGFyZ2V0ICYmICFlLnJlbGF0ZWRUYXJnZXQubWF0Y2hlcygnLicgKyB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAndm9sdW1lLXNsaWRlcicpKSAmJiBtb2RlID09PSAndmVydGljYWwnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICB2b2x1bWVTbGlkZXIuc3R5bGUuZGlzcGxheSA9ICdub25lJzsKICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgIG11dGUuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgbW91c2VJc092ZXIgPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgaWYgKCFtb3VzZUlzRG93biAmJiBtb2RlID09PSAndmVydGljYWwnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICB2b2x1bWVTbGlkZXIuc3R5bGUuZGlzcGxheSA9ICdub25lJzsKICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgIG11dGUuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXNvdXQnLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgIG1vdXNlSXNPdmVyID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgbXV0ZS5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgICAgICAgaWYgKHQub3B0aW9ucy5lbmFibGVLZXlib2FyZCAmJiB0Lm9wdGlvbnMua2V5QWN0aW9ucy5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBrZXlDb2RlID0gZS53aGljaCB8fCBlLmtleUNvZGUgfHwgMCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2b2x1bWUgPSBtZWRpYS52b2x1bWU7CgogICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChrZXlDb2RlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzODoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdm9sdW1lID0gTWF0aC5taW4odm9sdW1lICsgMC4xLCAxKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA0MDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdm9sdW1lID0gTWF0aC5tYXgoMCwgdm9sdW1lIC0gMC4xKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgbW91c2VJc0Rvd24gPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uVm9sdW1lSGFuZGxlKHZvbHVtZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICBtZWRpYS5zZXRWb2x1bWUodm9sdW1lKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpOwogICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgbXV0ZS5xdWVyeVNlbGVjdG9yKCdidXR0b24nKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgbWVkaWEuc2V0TXV0ZWQoIW1lZGlhLm11dGVkKTsKICAgICAgICAgICAgICAgICAgICAgdmFyIGV2ZW50ID0gKDAsIF9nZW5lcmFsLmNyZWF0ZUV2ZW50KSgndm9sdW1lY2hhbmdlJywgbWVkaWEpOwogICAgICAgICAgICAgICAgICAgICBtZWRpYS5kaXNwYXRjaEV2ZW50KGV2ZW50KTsKICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgdm9sdW1lU2xpZGVyLmFkZEV2ZW50TGlzdGVuZXIoJ2RyYWdzdGFydCcsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICB2b2x1bWVTbGlkZXIuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VvdmVyJywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICBtb3VzZUlzT3ZlciA9IHRydWU7CiAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgdm9sdW1lU2xpZGVyLmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzaW4nLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgIHZvbHVtZVNsaWRlci5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJzsKICAgICAgICAgICAgICAgICAgICAgbW91c2VJc092ZXIgPSB0cnVlOwogICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgIHZvbHVtZVNsaWRlci5hZGRFdmVudExpc3RlbmVyKCdmb2N1c291dCcsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgbW91c2VJc092ZXIgPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgaWYgKCFtb3VzZUlzRG93biAmJiBtb2RlID09PSAndmVydGljYWwnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICB2b2x1bWVTbGlkZXIuc3R5bGUuZGlzcGxheSA9ICdub25lJzsKICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgIHZvbHVtZVNsaWRlci5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgICAgICBoYW5kbGVWb2x1bWVNb3ZlKGUpOwogICAgICAgICAgICAgICAgICAgICB0Lmdsb2JhbEJpbmQoJ21vdXNlbW92ZS52b2wnLCBmdW5jdGlvbiAoZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXQgPSBldmVudC50YXJnZXQ7CiAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobW91c2VJc0Rvd24gJiYgKHRhcmdldCA9PT0gdm9sdW1lU2xpZGVyIHx8IHRhcmdldC5jbG9zZXN0KG1vZGUgPT09ICd2ZXJ0aWNhbCcgPyAnLicgKyB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAndm9sdW1lLXNsaWRlcicgOiAnLicgKyB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAnaG9yaXpvbnRhbC12b2x1bWUtc2xpZGVyJykpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlVm9sdW1lTW92ZShldmVudCk7CiAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICB0Lmdsb2JhbEJpbmQoJ21vdXNldXAudm9sJywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgbW91c2VJc0Rvd24gPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbW91c2VJc092ZXIgJiYgbW9kZSA9PT0gJ3ZlcnRpY2FsJykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZvbHVtZVNsaWRlci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOwogICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgbW91c2VJc0Rvd24gPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7CiAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgIG1lZGlhLmFkZEV2ZW50TGlzdGVuZXIoJ3ZvbHVtZWNoYW5nZScsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgICAgICAgIGlmICghbW91c2VJc0Rvd24pIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHRvZ2dsZU11dGUoKTsKICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICB1cGRhdGVWb2x1bWVTbGlkZXIoZSk7CiAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgIHZhciByZW5kZXJlZCA9IGZhbHNlOwogICAgICAgICAgICAgICAgIG1lZGlhLmFkZEV2ZW50TGlzdGVuZXIoJ3JlbmRlcmVycmVhZHknLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgIGlmICghbW9kaWZpZWQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbmRlcmVkID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGxheWVyLm9wdGlvbnMuc3RhcnRWb2x1bWUgPT09IDAgfHwgbWVkaWEub3JpZ2luYWxOb2RlLm11dGVkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lZGlhLnNldE11dGVkKHRydWUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXIub3B0aW9ucy5zdGFydFZvbHVtZSA9IDA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lZGlhLnNldFZvbHVtZShwbGF5ZXIub3B0aW9ucy5zdGFydFZvbHVtZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5zZXRDb250cm9sc1NpemUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDI1MCk7CiAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgbWVkaWEuYWRkRXZlbnRMaXN0ZW5lcignbG9hZGVkbWV0YWRhdGEnLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFtb2RpZmllZCAmJiAhcmVuZGVyZWQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGxheWVyLm9wdGlvbnMuc3RhcnRWb2x1bWUgPT09IDAgfHwgbWVkaWEub3JpZ2luYWxOb2RlLm11dGVkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lZGlhLnNldE11dGVkKHRydWUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZWRpYS5zZXRWb2x1bWUocGxheWVyLm9wdGlvbnMuc3RhcnRWb2x1bWUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQuc2V0Q29udHJvbHNTaXplKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICByZW5kZXJlZCA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgICB9LCAyNTApOwogICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICBpZiAocGxheWVyLm9wdGlvbnMuc3RhcnRWb2x1bWUgPT09IDAgfHwgbWVkaWEub3JpZ2luYWxOb2RlLm11dGVkKSB7CiAgICAgICAgICAgICAgICAgICAgIG1lZGlhLnNldE11dGVkKHRydWUpOwogICAgICAgICAgICAgICAgICAgICBwbGF5ZXIub3B0aW9ucy5zdGFydFZvbHVtZSA9IDA7CiAgICAgICAgICAgICAgICAgICAgIHRvZ2dsZU11dGUoKTsKICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgIHQuZ2V0RWxlbWVudCh0LmNvbnRhaW5lcikuYWRkRXZlbnRMaXN0ZW5lcignY29udHJvbHNyZXNpemUnLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgIHRvZ2dsZU11dGUoKTsKICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgIH0KICAgICAgICAgfSk7CgogICAgIH0sIHsgIjE2IjogMTYsICIyIjogMiwgIjI1IjogMjUsICIyNiI6IDI2LCAiMjciOiAyNywgIjUiOiA1IH1dLCAxNTogW2Z1bmN0aW9uIChfZGVyZXFfLCBtb2R1bGUsIGV4cG9ydHMpIHsKICAgICAgICAgJ3VzZSBzdHJpY3QnOwoKICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogICAgICAgICAgICAgdmFsdWU6IHRydWUKICAgICAgICAgfSk7CiAgICAgICAgIHZhciBFTiA9IGV4cG9ydHMuRU4gPSB7CiAgICAgICAgICAgICAnbWVqcy5wbHVyYWwtZm9ybSc6IDEsCgogICAgICAgICAgICAgJ21lanMuZG93bmxvYWQtZmlsZSc6ICdEb3dubG9hZCBGaWxlJywKCiAgICAgICAgICAgICAnbWVqcy5pbnN0YWxsLWZsYXNoJzogJ1lvdSBhcmUgdXNpbmcgYSBicm93c2VyIHRoYXQgZG9lcyBub3QgaGF2ZSBGbGFzaCBwbGF5ZXIgZW5hYmxlZCBvciBpbnN0YWxsZWQuIFBsZWFzZSB0dXJuIG9uIHlvdXIgRmxhc2ggcGxheWVyIHBsdWdpbiBvciBkb3dubG9hZCB0aGUgbGF0ZXN0IHZlcnNpb24gZnJvbSBodHRwczovL2dldC5hZG9iZS5jb20vZmxhc2hwbGF5ZXIvJywKCiAgICAgICAgICAgICAnbWVqcy5mdWxsc2NyZWVuJzogJ0Z1bGxzY3JlZW4nLAoKICAgICAgICAgICAgICdtZWpzLnBsYXknOiAnUGxheScsCiAgICAgICAgICAgICAnbWVqcy5wYXVzZSc6ICdQYXVzZScsCgogICAgICAgICAgICAgJ21lanMudGltZS1zbGlkZXInOiAnVGltZSBTbGlkZXInLAogICAgICAgICAgICAgJ21lanMudGltZS1oZWxwLXRleHQnOiAnVXNlIExlZnQvUmlnaHQgQXJyb3cga2V5cyB0byBhZHZhbmNlIG9uZSBzZWNvbmQsIFVwL0Rvd24gYXJyb3dzIHRvIGFkdmFuY2UgdGVuIHNlY29uZHMuJywKICAgICAgICAgICAgICdtZWpzLmxpdmUtYnJvYWRjYXN0JzogJ0xpdmUgQnJvYWRjYXN0JywKCiAgICAgICAgICAgICAnbWVqcy52b2x1bWUtaGVscC10ZXh0JzogJ1VzZSBVcC9Eb3duIEFycm93IGtleXMgdG8gaW5jcmVhc2Ugb3IgZGVjcmVhc2Ugdm9sdW1lLicsCiAgICAgICAgICAgICAnbWVqcy51bm11dGUnOiAnVW5tdXRlJywKICAgICAgICAgICAgICdtZWpzLm11dGUnOiAnTXV0ZScsCiAgICAgICAgICAgICAnbWVqcy52b2x1bWUtc2xpZGVyJzogJ1ZvbHVtZSBTbGlkZXInLAoKICAgICAgICAgICAgICdtZWpzLnZpZGVvLXBsYXllcic6ICdWaWRlbyBQbGF5ZXInLAogICAgICAgICAgICAgJ21lanMuYXVkaW8tcGxheWVyJzogJ0F1ZGlvIFBsYXllcicsCgogICAgICAgICAgICAgJ21lanMuY2FwdGlvbnMtc3VidGl0bGVzJzogJ0NhcHRpb25zL1N1YnRpdGxlcycsCiAgICAgICAgICAgICAnbWVqcy5jYXB0aW9ucy1jaGFwdGVycyc6ICdDaGFwdGVycycsCiAgICAgICAgICAgICAnbWVqcy5ub25lJzogJ05vbmUnLAogICAgICAgICAgICAgJ21lanMuYWZyaWthYW5zJzogJ0FmcmlrYWFucycsCiAgICAgICAgICAgICAnbWVqcy5hbGJhbmlhbic6ICdBbGJhbmlhbicsCiAgICAgICAgICAgICAnbWVqcy5hcmFiaWMnOiAnQXJhYmljJywKICAgICAgICAgICAgICdtZWpzLmJlbGFydXNpYW4nOiAnQmVsYXJ1c2lhbicsCiAgICAgICAgICAgICAnbWVqcy5idWxnYXJpYW4nOiAnQnVsZ2FyaWFuJywKICAgICAgICAgICAgICdtZWpzLmNhdGFsYW4nOiAnQ2F0YWxhbicsCiAgICAgICAgICAgICAnbWVqcy5jaGluZXNlJzogJ0NoaW5lc2UnLAogICAgICAgICAgICAgJ21lanMuY2hpbmVzZS1zaW1wbGlmaWVkJzogJ0NoaW5lc2UgKFNpbXBsaWZpZWQpJywKICAgICAgICAgICAgICdtZWpzLmNoaW5lc2UtdHJhZGl0aW9uYWwnOiAnQ2hpbmVzZSAoVHJhZGl0aW9uYWwpJywKICAgICAgICAgICAgICdtZWpzLmNyb2F0aWFuJzogJ0Nyb2F0aWFuJywKICAgICAgICAgICAgICdtZWpzLmN6ZWNoJzogJ0N6ZWNoJywKICAgICAgICAgICAgICdtZWpzLmRhbmlzaCc6ICdEYW5pc2gnLAogICAgICAgICAgICAgJ21lanMuZHV0Y2gnOiAnRHV0Y2gnLAogICAgICAgICAgICAgJ21lanMuZW5nbGlzaCc6ICdFbmdsaXNoJywKICAgICAgICAgICAgICdtZWpzLmVzdG9uaWFuJzogJ0VzdG9uaWFuJywKICAgICAgICAgICAgICdtZWpzLmZpbGlwaW5vJzogJ0ZpbGlwaW5vJywKICAgICAgICAgICAgICdtZWpzLmZpbm5pc2gnOiAnRmlubmlzaCcsCiAgICAgICAgICAgICAnbWVqcy5mcmVuY2gnOiAnRnJlbmNoJywKICAgICAgICAgICAgICdtZWpzLmdhbGljaWFuJzogJ0dhbGljaWFuJywKICAgICAgICAgICAgICdtZWpzLmdlcm1hbic6ICdHZXJtYW4nLAogICAgICAgICAgICAgJ21lanMuZ3JlZWsnOiAnR3JlZWsnLAogICAgICAgICAgICAgJ21lanMuaGFpdGlhbi1jcmVvbGUnOiAnSGFpdGlhbiBDcmVvbGUnLAogICAgICAgICAgICAgJ21lanMuaGVicmV3JzogJ0hlYnJldycsCiAgICAgICAgICAgICAnbWVqcy5oaW5kaSc6ICdIaW5kaScsCiAgICAgICAgICAgICAnbWVqcy5odW5nYXJpYW4nOiAnSHVuZ2FyaWFuJywKICAgICAgICAgICAgICdtZWpzLmljZWxhbmRpYyc6ICdJY2VsYW5kaWMnLAogICAgICAgICAgICAgJ21lanMuaW5kb25lc2lhbic6ICdJbmRvbmVzaWFuJywKICAgICAgICAgICAgICdtZWpzLmlyaXNoJzogJ0lyaXNoJywKICAgICAgICAgICAgICdtZWpzLml0YWxpYW4nOiAnSXRhbGlhbicsCiAgICAgICAgICAgICAnbWVqcy5qYXBhbmVzZSc6ICdKYXBhbmVzZScsCiAgICAgICAgICAgICAnbWVqcy5rb3JlYW4nOiAnS29yZWFuJywKICAgICAgICAgICAgICdtZWpzLmxhdHZpYW4nOiAnTGF0dmlhbicsCiAgICAgICAgICAgICAnbWVqcy5saXRodWFuaWFuJzogJ0xpdGh1YW5pYW4nLAogICAgICAgICAgICAgJ21lanMubWFjZWRvbmlhbic6ICdNYWNlZG9uaWFuJywKICAgICAgICAgICAgICdtZWpzLm1hbGF5JzogJ01hbGF5JywKICAgICAgICAgICAgICdtZWpzLm1hbHRlc2UnOiAnTWFsdGVzZScsCiAgICAgICAgICAgICAnbWVqcy5ub3J3ZWdpYW4nOiAnTm9yd2VnaWFuJywKICAgICAgICAgICAgICdtZWpzLnBlcnNpYW4nOiAnUGVyc2lhbicsCiAgICAgICAgICAgICAnbWVqcy5wb2xpc2gnOiAnUG9saXNoJywKICAgICAgICAgICAgICdtZWpzLnBvcnR1Z3Vlc2UnOiAnUG9ydHVndWVzZScsCiAgICAgICAgICAgICAnbWVqcy5yb21hbmlhbic6ICdSb21hbmlhbicsCiAgICAgICAgICAgICAnbWVqcy5ydXNzaWFuJzogJ1J1c3NpYW4nLAogICAgICAgICAgICAgJ21lanMuc2VyYmlhbic6ICdTZXJiaWFuJywKICAgICAgICAgICAgICdtZWpzLnNsb3Zhayc6ICdTbG92YWsnLAogICAgICAgICAgICAgJ21lanMuc2xvdmVuaWFuJzogJ1Nsb3ZlbmlhbicsCiAgICAgICAgICAgICAnbWVqcy5zcGFuaXNoJzogJ1NwYW5pc2gnLAogICAgICAgICAgICAgJ21lanMuc3dhaGlsaSc6ICdTd2FoaWxpJywKICAgICAgICAgICAgICdtZWpzLnN3ZWRpc2gnOiAnU3dlZGlzaCcsCiAgICAgICAgICAgICAnbWVqcy50YWdhbG9nJzogJ1RhZ2Fsb2cnLAogICAgICAgICAgICAgJ21lanMudGhhaSc6ICdUaGFpJywKICAgICAgICAgICAgICdtZWpzLnR1cmtpc2gnOiAnVHVya2lzaCcsCiAgICAgICAgICAgICAnbWVqcy51a3JhaW5pYW4nOiAnVWtyYWluaWFuJywKICAgICAgICAgICAgICdtZWpzLnZpZXRuYW1lc2UnOiAnVmlldG5hbWVzZScsCiAgICAgICAgICAgICAnbWVqcy53ZWxzaCc6ICdXZWxzaCcsCiAgICAgICAgICAgICAnbWVqcy55aWRkaXNoJzogJ1lpZGRpc2gnCiAgICAgICAgIH07CgogICAgIH0sIHt9XSwgMTY6IFtmdW5jdGlvbiAoX2RlcmVxXywgbW9kdWxlLCBleHBvcnRzKSB7CiAgICAgICAgICd1c2Ugc3RyaWN0JzsKCiAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICAgICAgICAgICAgIHZhbHVlOiB0cnVlCiAgICAgICAgIH0pOwogICAgICAgICBleHBvcnRzLmNvbmZpZyA9IHVuZGVmaW5lZDsKCiAgICAgICAgIHZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAic3ltYm9sIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IHR5cGVvZiBvYmo7IH07CgogICAgICAgICB2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTsKCiAgICAgICAgIHZhciBfd2luZG93ID0gX2RlcmVxXygzKTsKCiAgICAgICAgIHZhciBfd2luZG93MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dpbmRvdyk7CgogICAgICAgICB2YXIgX2RvY3VtZW50ID0gX2RlcmVxXygyKTsKCiAgICAgICAgIHZhciBfZG9jdW1lbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZG9jdW1lbnQpOwoKICAgICAgICAgdmFyIF9tZWpzID0gX2RlcmVxXyg3KTsKCiAgICAgICAgIHZhciBfbWVqczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9tZWpzKTsKCiAgICAgICAgIHZhciBfbWVkaWFlbGVtZW50ID0gX2RlcmVxXyg2KTsKCiAgICAgICAgIHZhciBfbWVkaWFlbGVtZW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21lZGlhZWxlbWVudCk7CgogICAgICAgICB2YXIgX2RlZmF1bHQgPSBfZGVyZXFfKDE3KTsKCiAgICAgICAgIHZhciBfZGVmYXVsdDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kZWZhdWx0KTsKCiAgICAgICAgIHZhciBfaTE4biA9IF9kZXJlcV8oNSk7CgogICAgICAgICB2YXIgX2kxOG4yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaTE4bik7CgogICAgICAgICB2YXIgX2NvbnN0YW50cyA9IF9kZXJlcV8oMjUpOwoKICAgICAgICAgdmFyIF9nZW5lcmFsID0gX2RlcmVxXygyNyk7CgogICAgICAgICB2YXIgX3RpbWUgPSBfZGVyZXFfKDMwKTsKCiAgICAgICAgIHZhciBfbWVkaWEgPSBfZGVyZXFfKDI4KTsKCiAgICAgICAgIHZhciBfZG9tID0gX2RlcmVxXygyNik7CgogICAgICAgICB2YXIgZG9tID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoX2RvbSk7CgogICAgICAgICBmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGVsc2UgeyB2YXIgbmV3T2JqID0ge307IGlmIChvYmogIT0gbnVsbCkgeyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IHJldHVybiBuZXdPYmo7IH0gfQoKICAgICAgICAgZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCiAgICAgICAgIGZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcigiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uIik7IH0gfQoKICAgICAgICAgX21lanMyLmRlZmF1bHQubWVwSW5kZXggPSAwOwoKICAgICAgICAgX21lanMyLmRlZmF1bHQucGxheWVycyA9IHt9OwoKICAgICAgICAgdmFyIGNvbmZpZyA9IGV4cG9ydHMuY29uZmlnID0gewogICAgICAgICAgICAgcG9zdGVyOiAnJywKCiAgICAgICAgICAgICBzaG93UG9zdGVyV2hlbkVuZGVkOiBmYWxzZSwKCiAgICAgICAgICAgICBzaG93UG9zdGVyV2hlblBhdXNlZDogZmFsc2UsCgogICAgICAgICAgICAgZGVmYXVsdFZpZGVvV2lkdGg6IDQ4MCwKCiAgICAgICAgICAgICBkZWZhdWx0VmlkZW9IZWlnaHQ6IDI3MCwKCiAgICAgICAgICAgICB2aWRlb1dpZHRoOiAtMSwKCiAgICAgICAgICAgICB2aWRlb0hlaWdodDogLTEsCgogICAgICAgICAgICAgZGVmYXVsdEF1ZGlvV2lkdGg6IDQwMCwKCiAgICAgICAgICAgICBkZWZhdWx0QXVkaW9IZWlnaHQ6IDQwLAoKICAgICAgICAgICAgIGRlZmF1bHRTZWVrQmFja3dhcmRJbnRlcnZhbDogZnVuY3Rpb24gZGVmYXVsdFNlZWtCYWNrd2FyZEludGVydmFsKG1lZGlhKSB7CiAgICAgICAgICAgICAgICAgcmV0dXJuIG1lZGlhLmdldER1cmF0aW9uKCkgKiAwLjA1OwogICAgICAgICAgICAgfSwKCiAgICAgICAgICAgICBkZWZhdWx0U2Vla0ZvcndhcmRJbnRlcnZhbDogZnVuY3Rpb24gZGVmYXVsdFNlZWtGb3J3YXJkSW50ZXJ2YWwobWVkaWEpIHsKICAgICAgICAgICAgICAgICByZXR1cm4gbWVkaWEuZ2V0RHVyYXRpb24oKSAqIDAuMDU7CiAgICAgICAgICAgICB9LAoKICAgICAgICAgICAgIHNldERpbWVuc2lvbnM6IHRydWUsCgogICAgICAgICAgICAgYXVkaW9XaWR0aDogLTEsCgogICAgICAgICAgICAgYXVkaW9IZWlnaHQ6IC0xLAoKICAgICAgICAgICAgIGxvb3A6IGZhbHNlLAoKICAgICAgICAgICAgIGF1dG9SZXdpbmQ6IHRydWUsCgogICAgICAgICAgICAgZW5hYmxlQXV0b3NpemU6IHRydWUsCgogICAgICAgICAgICAgdGltZUZvcm1hdDogJycsCgogICAgICAgICAgICAgYWx3YXlzU2hvd0hvdXJzOiBmYWxzZSwKCiAgICAgICAgICAgICBzaG93VGltZWNvZGVGcmFtZUNvdW50OiBmYWxzZSwKCiAgICAgICAgICAgICBmcmFtZXNQZXJTZWNvbmQ6IDI1LAoKICAgICAgICAgICAgIGFsd2F5c1Nob3dDb250cm9sczogZmFsc2UsCgogICAgICAgICAgICAgaGlkZVZpZGVvQ29udHJvbHNPbkxvYWQ6IGZhbHNlLAoKICAgICAgICAgICAgIGhpZGVWaWRlb0NvbnRyb2xzT25QYXVzZTogZmFsc2UsCgogICAgICAgICAgICAgY2xpY2tUb1BsYXlQYXVzZTogdHJ1ZSwKCiAgICAgICAgICAgICBjb250cm9sc1RpbWVvdXREZWZhdWx0OiAxNTAwLAoKICAgICAgICAgICAgIGNvbnRyb2xzVGltZW91dE1vdXNlRW50ZXI6IDI1MDAsCgogICAgICAgICAgICAgY29udHJvbHNUaW1lb3V0TW91c2VMZWF2ZTogMTAwMCwKCiAgICAgICAgICAgICBpUGFkVXNlTmF0aXZlQ29udHJvbHM6IGZhbHNlLAoKICAgICAgICAgICAgIGlQaG9uZVVzZU5hdGl2ZUNvbnRyb2xzOiBmYWxzZSwKCiAgICAgICAgICAgICBBbmRyb2lkVXNlTmF0aXZlQ29udHJvbHM6IGZhbHNlLAoKICAgICAgICAgICAgIGZlYXR1cmVzOiBbJ3BsYXlwYXVzZScsICdjdXJyZW50JywgJ3Byb2dyZXNzJywgJ2R1cmF0aW9uJywgJ3RyYWNrcycsICd2b2x1bWUnLCAnZnVsbHNjcmVlbiddLAoKICAgICAgICAgICAgIHVzZURlZmF1bHRDb250cm9sczogZmFsc2UsCgogICAgICAgICAgICAgaXNWaWRlbzogdHJ1ZSwKCiAgICAgICAgICAgICBzdHJldGNoaW5nOiAnYXV0bycsCgogICAgICAgICAgICAgY2xhc3NQcmVmaXg6ICdtZWpzX18nLAoKICAgICAgICAgICAgIGVuYWJsZUtleWJvYXJkOiB0cnVlLAoKICAgICAgICAgICAgIHBhdXNlT3RoZXJQbGF5ZXJzOiB0cnVlLAoKICAgICAgICAgICAgIHNlY29uZHNEZWNpbWFsTGVuZ3RoOiAwLAoKICAgICAgICAgICAgIGN1c3RvbUVycm9yOiBudWxsLAoKICAgICAgICAgICAgIGtleUFjdGlvbnM6IFt7CiAgICAgICAgICAgICAgICAga2V5czogWzMyLCAxNzldLAogICAgICAgICAgICAgICAgIGFjdGlvbjogZnVuY3Rpb24gYWN0aW9uKHBsYXllcikgewoKICAgICAgICAgICAgICAgICAgICAgaWYgKCFfY29uc3RhbnRzLklTX0ZJUkVGT1gpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwbGF5ZXIucGF1c2VkIHx8IHBsYXllci5lbmRlZCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllci5wbGF5KCk7CiAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllci5wYXVzZSgpOwogICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgfV0KICAgICAgICAgfTsKCiAgICAgICAgIF9tZWpzMi5kZWZhdWx0Lk1lcERlZmF1bHRzID0gY29uZmlnOwoKICAgICAgICAgdmFyIE1lZGlhRWxlbWVudFBsYXllciA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgIGZ1bmN0aW9uIE1lZGlhRWxlbWVudFBsYXllcihub2RlLCBvKSB7CiAgICAgICAgICAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIE1lZGlhRWxlbWVudFBsYXllcik7CgogICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcywKICAgICAgICAgICAgICAgICAgICAgZWxlbWVudCA9IHR5cGVvZiBub2RlID09PSAnc3RyaW5nJyA/IF9kb2N1bWVudDIuZGVmYXVsdC5nZXRFbGVtZW50QnlJZChub2RlKSA6IG5vZGU7CgogICAgICAgICAgICAgICAgIGlmICghKHQgaW5zdGFuY2VvZiBNZWRpYUVsZW1lbnRQbGF5ZXIpKSB7CiAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgTWVkaWFFbGVtZW50UGxheWVyKGVsZW1lbnQsIG8pOwogICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgdC5ub2RlID0gdC5tZWRpYSA9IGVsZW1lbnQ7CgogICAgICAgICAgICAgICAgIGlmICghdC5ub2RlKSB7CiAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgIGlmICh0Lm1lZGlhLnBsYXllcikgewogICAgICAgICAgICAgICAgICAgICByZXR1cm4gdC5tZWRpYS5wbGF5ZXI7CiAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICB0Lmhhc0ZvY3VzID0gZmFsc2U7CgogICAgICAgICAgICAgICAgIHQuY29udHJvbHNBcmVWaXNpYmxlID0gdHJ1ZTsKCiAgICAgICAgICAgICAgICAgdC5jb250cm9sc0VuYWJsZWQgPSB0cnVlOwoKICAgICAgICAgICAgICAgICB0LmNvbnRyb2xzVGltZXIgPSBudWxsOwoKICAgICAgICAgICAgICAgICB0LmN1cnJlbnRNZWRpYVRpbWUgPSAwOwoKICAgICAgICAgICAgICAgICB0LnByb3h5ID0gbnVsbDsKCiAgICAgICAgICAgICAgICAgaWYgKG8gPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgICAgICB2YXIgb3B0aW9ucyA9IHQubm9kZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtbWVqc29wdGlvbnMnKTsKICAgICAgICAgICAgICAgICAgICAgbyA9IG9wdGlvbnMgPyBKU09OLnBhcnNlKG9wdGlvbnMpIDoge307CiAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICB0Lm9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBjb25maWcsIG8pOwoKICAgICAgICAgICAgICAgICBpZiAodC5vcHRpb25zLmxvb3AgJiYgIXQubWVkaWEuZ2V0QXR0cmlidXRlKCdsb29wJykpIHsKICAgICAgICAgICAgICAgICAgICAgdC5tZWRpYS5sb29wID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgdC5ub2RlLmxvb3AgPSB0cnVlOwogICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodC5tZWRpYS5sb29wKSB7CiAgICAgICAgICAgICAgICAgICAgIHQub3B0aW9ucy5sb29wID0gdHJ1ZTsKICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgIGlmICghdC5vcHRpb25zLnRpbWVGb3JtYXQpIHsKICAgICAgICAgICAgICAgICAgICAgdC5vcHRpb25zLnRpbWVGb3JtYXQgPSAnbW06c3MnOwogICAgICAgICAgICAgICAgICAgICBpZiAodC5vcHRpb25zLmFsd2F5c1Nob3dIb3VycykgewogICAgICAgICAgICAgICAgICAgICAgICAgdC5vcHRpb25zLnRpbWVGb3JtYXQgPSAnaGg6bW06c3MnOwogICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgIGlmICh0Lm9wdGlvbnMuc2hvd1RpbWVjb2RlRnJhbWVDb3VudCkgewogICAgICAgICAgICAgICAgICAgICAgICAgdC5vcHRpb25zLnRpbWVGb3JtYXQgKz0gJzpmZic7CiAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICgwLCBfdGltZS5jYWxjdWxhdGVUaW1lRm9ybWF0KSgwLCB0Lm9wdGlvbnMsIHQub3B0aW9ucy5mcmFtZXNQZXJTZWNvbmQgfHwgMjUpOwoKICAgICAgICAgICAgICAgICB0LmlkID0gJ21lcF8nICsgX21lanMyLmRlZmF1bHQubWVwSW5kZXgrKzsKCiAgICAgICAgICAgICAgICAgX21lanMyLmRlZmF1bHQucGxheWVyc1t0LmlkXSA9IHQ7CgogICAgICAgICAgICAgICAgIHQuaW5pdCgpOwoKICAgICAgICAgICAgICAgICByZXR1cm4gdDsKICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICBfY3JlYXRlQ2xhc3MoTWVkaWFFbGVtZW50UGxheWVyLCBbewogICAgICAgICAgICAgICAgIGtleTogJ2dldEVsZW1lbnQnLAogICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRFbGVtZW50KGVsZW1lbnQpIHsKICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQ7CiAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgIGtleTogJ2luaXQnLAogICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBpbml0KCkgewogICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IHRoaXMsCiAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXJPcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgdC5vcHRpb25zLCB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gc3VjY2VzcyhtZWRpYSwgZG9tTm9kZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0Ll9tZVJlYWR5KG1lZGlhLCBkb21Ob2RlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiBlcnJvcihlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQuX2hhbmRsZUVycm9yKGUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgICAgICAgdGFnTmFtZSA9IHQubm9kZS50YWdOYW1lLnRvTG93ZXJDYXNlKCk7CgogICAgICAgICAgICAgICAgICAgICB0LmlzRHluYW1pYyA9IHRhZ05hbWUgIT09ICdhdWRpbycgJiYgdGFnTmFtZSAhPT0gJ3ZpZGVvJyAmJiB0YWdOYW1lICE9PSAnaWZyYW1lJzsKICAgICAgICAgICAgICAgICAgICAgdC5pc1ZpZGVvID0gdC5pc0R5bmFtaWMgPyB0Lm9wdGlvbnMuaXNWaWRlbyA6IHRhZ05hbWUgIT09ICdhdWRpbycgJiYgdC5vcHRpb25zLmlzVmlkZW87CiAgICAgICAgICAgICAgICAgICAgIHQubWVkaWFGaWxlcyA9IG51bGw7CiAgICAgICAgICAgICAgICAgICAgIHQudHJhY2tGaWxlcyA9IG51bGw7CgogICAgICAgICAgICAgICAgICAgICBpZiAoX2NvbnN0YW50cy5JU19JUEFEICYmIHQub3B0aW9ucy5pUGFkVXNlTmF0aXZlQ29udHJvbHMgfHwgX2NvbnN0YW50cy5JU19JUEhPTkUgJiYgdC5vcHRpb25zLmlQaG9uZVVzZU5hdGl2ZUNvbnRyb2xzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICB0Lm5vZGUuc2V0QXR0cmlidXRlKCdjb250cm9scycsIHRydWUpOwoKICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfY29uc3RhbnRzLklTX0lQQUQgJiYgdC5ub2RlLmdldEF0dHJpYnV0ZSgnYXV0b3BsYXknKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQucGxheSgpOwogICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCh0LmlzVmlkZW8gfHwgIXQuaXNWaWRlbyAmJiAodC5vcHRpb25zLmZlYXR1cmVzLmxlbmd0aCB8fCB0Lm9wdGlvbnMudXNlRGVmYXVsdENvbnRyb2xzKSkgJiYgIShfY29uc3RhbnRzLklTX0FORFJPSUQgJiYgdC5vcHRpb25zLkFuZHJvaWRVc2VOYXRpdmVDb250cm9scykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHQubm9kZS5yZW1vdmVBdHRyaWJ1dGUoJ2NvbnRyb2xzJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmlkZW9QbGF5ZXJUaXRsZSA9IHQuaXNWaWRlbyA/IF9pMThuMi5kZWZhdWx0LnQoJ21lanMudmlkZW8tcGxheWVyJykgOiBfaTE4bjIuZGVmYXVsdC50KCdtZWpzLmF1ZGlvLXBsYXllcicpOwoKICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvZmZzY3JlZW4gPSBfZG9jdW1lbnQyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2NyZWVuLmNsYXNzTmFtZSA9IHQub3B0aW9ucy5jbGFzc1ByZWZpeCArICdvZmZzY3JlZW4nOwogICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2NyZWVuLmlubmVyVGV4dCA9IHZpZGVvUGxheWVyVGl0bGU7CiAgICAgICAgICAgICAgICAgICAgICAgICB0Lm1lZGlhLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG9mZnNjcmVlbiwgdC5tZWRpYSk7CgogICAgICAgICAgICAgICAgICAgICAgICAgdC5jb250YWluZXIgPSBfZG9jdW1lbnQyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CiAgICAgICAgICAgICAgICAgICAgICAgICB0LmdldEVsZW1lbnQodC5jb250YWluZXIpLmlkID0gdC5pZDsKICAgICAgICAgICAgICAgICAgICAgICAgIHQuZ2V0RWxlbWVudCh0LmNvbnRhaW5lcikuY2xhc3NOYW1lID0gdC5vcHRpb25zLmNsYXNzUHJlZml4ICsgJ2NvbnRhaW5lciAnICsgdC5vcHRpb25zLmNsYXNzUHJlZml4ICsgJ2NvbnRhaW5lci1rZXlib2FyZC1pbmFjdGl2ZSAnICsgdC5tZWRpYS5jbGFzc05hbWU7CiAgICAgICAgICAgICAgICAgICAgICAgICB0LmdldEVsZW1lbnQodC5jb250YWluZXIpLnRhYkluZGV4ID0gMDsKICAgICAgICAgICAgICAgICAgICAgICAgIHQuZ2V0RWxlbWVudCh0LmNvbnRhaW5lcikuc2V0QXR0cmlidXRlKCdyb2xlJywgJ2FwcGxpY2F0aW9uJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICB0LmdldEVsZW1lbnQodC5jb250YWluZXIpLnNldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcsIHZpZGVvUGxheWVyVGl0bGUpOwogICAgICAgICAgICAgICAgICAgICAgICAgdC5nZXRFbGVtZW50KHQuY29udGFpbmVyKS5pbm5lckhUTUwgPSAnPGRpdiBjbGFzcz0iJyArIHQub3B0aW9ucy5jbGFzc1ByZWZpeCArICdpbm5lciI+JyArICgnPGRpdiBjbGFzcz0iJyArIHQub3B0aW9ucy5jbGFzc1ByZWZpeCArICdtZWRpYWVsZW1lbnQiPjwvZGl2PicpICsgKCc8ZGl2IGNsYXNzPSInICsgdC5vcHRpb25zLmNsYXNzUHJlZml4ICsgJ2xheWVycyI+PC9kaXY+JykgKyAoJzxkaXYgY2xhc3M9IicgKyB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAnY29udHJvbHMiPjwvZGl2PicpICsgJzwvZGl2Pic7CiAgICAgICAgICAgICAgICAgICAgICAgICB0LmdldEVsZW1lbnQodC5jb250YWluZXIpLmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXQuY29udHJvbHNBcmVWaXNpYmxlICYmICF0Lmhhc0ZvY3VzICYmIHQuY29udHJvbHNFbmFibGVkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQuc2hvd0NvbnRyb2xzKHRydWUpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJ0blNlbGVjdG9yID0gKDAsIF9nZW5lcmFsLmlzTm9kZUFmdGVyKShlLnJlbGF0ZWRUYXJnZXQsIHQuZ2V0RWxlbWVudCh0LmNvbnRhaW5lcikpID8gJy4nICsgdC5vcHRpb25zLmNsYXNzUHJlZml4ICsgJ2NvbnRyb2xzIC4nICsgdC5vcHRpb25zLmNsYXNzUHJlZml4ICsgJ2J1dHRvbjpsYXN0LWNoaWxkID4gYnV0dG9uJyA6ICcuJyArIHQub3B0aW9ucy5jbGFzc1ByZWZpeCArICdwbGF5cGF1c2UtYnV0dG9uID4gYnV0dG9uJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbiA9IHQuZ2V0RWxlbWVudCh0LmNvbnRhaW5lcikucXVlcnlTZWxlY3RvcihidG5TZWxlY3Rvcik7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidXR0b24uZm9jdXMoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgIHQubm9kZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0LmdldEVsZW1lbnQodC5jb250YWluZXIpLCB0Lm5vZGUpOwoKICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdC5vcHRpb25zLmZlYXR1cmVzLmxlbmd0aCAmJiAhdC5vcHRpb25zLnVzZURlZmF1bHRDb250cm9scykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQuZ2V0RWxlbWVudCh0LmNvbnRhaW5lcikuc3R5bGUuYmFja2dyb3VuZCA9ICd0cmFuc3BhcmVudCc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5nZXRFbGVtZW50KHQuY29udGFpbmVyKS5xdWVyeVNlbGVjdG9yKCcuJyArIHQub3B0aW9ucy5jbGFzc1ByZWZpeCArICdjb250cm9scycpLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CiAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHQuaXNWaWRlbyAmJiB0Lm9wdGlvbnMuc3RyZXRjaGluZyA9PT0gJ2ZpbGwnICYmICFkb20uaGFzQ2xhc3ModC5nZXRFbGVtZW50KHQuY29udGFpbmVyKS5wYXJlbnROb2RlLCB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAnZmlsbC1jb250YWluZXInKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQub3V0ZXJDb250YWluZXIgPSB0Lm1lZGlhLnBhcmVudE5vZGU7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB3cmFwcGVyID0gX2RvY3VtZW50Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdyYXBwZXIuY2xhc3NOYW1lID0gdC5vcHRpb25zLmNsYXNzUHJlZml4ICsgJ2ZpbGwtY29udGFpbmVyJzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LmdldEVsZW1lbnQodC5jb250YWluZXIpLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHdyYXBwZXIsIHQuZ2V0RWxlbWVudCh0LmNvbnRhaW5lcikpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdyYXBwZXIuYXBwZW5kQ2hpbGQodC5nZXRFbGVtZW50KHQuY29udGFpbmVyKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9jb25zdGFudHMuSVNfQU5EUk9JRCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbS5hZGRDbGFzcyh0LmdldEVsZW1lbnQodC5jb250YWluZXIpLCB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAnYW5kcm9pZCcpOwogICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9jb25zdGFudHMuSVNfSU9TKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9tLmFkZENsYXNzKHQuZ2V0RWxlbWVudCh0LmNvbnRhaW5lciksIHQub3B0aW9ucy5jbGFzc1ByZWZpeCArICdpb3MnKTsKICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfY29uc3RhbnRzLklTX0lQQUQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb20uYWRkQ2xhc3ModC5nZXRFbGVtZW50KHQuY29udGFpbmVyKSwgdC5vcHRpb25zLmNsYXNzUHJlZml4ICsgJ2lwYWQnKTsKICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfY29uc3RhbnRzLklTX0lQSE9ORSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbS5hZGRDbGFzcyh0LmdldEVsZW1lbnQodC5jb250YWluZXIpLCB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAnaXBob25lJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICBkb20uYWRkQ2xhc3ModC5nZXRFbGVtZW50KHQuY29udGFpbmVyKSwgdC5pc1ZpZGVvID8gdC5vcHRpb25zLmNsYXNzUHJlZml4ICsgJ3ZpZGVvJyA6IHQub3B0aW9ucy5jbGFzc1ByZWZpeCArICdhdWRpbycpOwoKICAgICAgICAgICAgICAgICAgICAgICAgIHQuZ2V0RWxlbWVudCh0LmNvbnRhaW5lcikucXVlcnlTZWxlY3RvcignLicgKyB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAnbWVkaWFlbGVtZW50JykuYXBwZW5kQ2hpbGQodC5ub2RlKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICB0Lm1lZGlhLnBsYXllciA9IHQ7CgogICAgICAgICAgICAgICAgICAgICAgICAgdC5jb250cm9scyA9IHQuZ2V0RWxlbWVudCh0LmNvbnRhaW5lcikucXVlcnlTZWxlY3RvcignLicgKyB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAnY29udHJvbHMnKTsKICAgICAgICAgICAgICAgICAgICAgICAgIHQubGF5ZXJzID0gdC5nZXRFbGVtZW50KHQuY29udGFpbmVyKS5xdWVyeVNlbGVjdG9yKCcuJyArIHQub3B0aW9ucy5jbGFzc1ByZWZpeCArICdsYXllcnMnKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGFnVHlwZSA9IHQuaXNWaWRlbyA/ICd2aWRlbycgOiAnYXVkaW8nLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcHNUYWdOYW1lID0gdGFnVHlwZS5zdWJzdHJpbmcoMCwgMSkudG9VcHBlckNhc2UoKSArIHRhZ1R5cGUuc3Vic3RyaW5nKDEpOwoKICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0Lm9wdGlvbnNbdGFnVHlwZSArICdXaWR0aCddID4gMCB8fCB0Lm9wdGlvbnNbdGFnVHlwZSArICdXaWR0aCddLnRvU3RyaW5nKCkuaW5kZXhPZignJScpID4gLTEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LndpZHRoID0gdC5vcHRpb25zW3RhZ1R5cGUgKyAnV2lkdGgnXTsKICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodC5ub2RlLnN0eWxlLndpZHRoICE9PSAnJyAmJiB0Lm5vZGUuc3R5bGUud2lkdGggIT09IG51bGwpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LndpZHRoID0gdC5ub2RlLnN0eWxlLndpZHRoOwogICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0Lm5vZGUuZ2V0QXR0cmlidXRlKCd3aWR0aCcpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC53aWR0aCA9IHQubm9kZS5nZXRBdHRyaWJ1dGUoJ3dpZHRoJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQud2lkdGggPSB0Lm9wdGlvbnNbJ2RlZmF1bHQnICsgY2Fwc1RhZ05hbWUgKyAnV2lkdGgnXTsKICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodC5vcHRpb25zW3RhZ1R5cGUgKyAnSGVpZ2h0J10gPiAwIHx8IHQub3B0aW9uc1t0YWdUeXBlICsgJ0hlaWdodCddLnRvU3RyaW5nKCkuaW5kZXhPZignJScpID4gLTEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LmhlaWdodCA9IHQub3B0aW9uc1t0YWdUeXBlICsgJ0hlaWdodCddOwogICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0Lm5vZGUuc3R5bGUuaGVpZ2h0ICE9PSAnJyAmJiB0Lm5vZGUuc3R5bGUuaGVpZ2h0ICE9PSBudWxsKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5oZWlnaHQgPSB0Lm5vZGUuc3R5bGUuaGVpZ2h0OwogICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0Lm5vZGUuZ2V0QXR0cmlidXRlKCdoZWlnaHQnKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQuaGVpZ2h0ID0gdC5ub2RlLmdldEF0dHJpYnV0ZSgnaGVpZ2h0Jyk7CiAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQuaGVpZ2h0ID0gdC5vcHRpb25zWydkZWZhdWx0JyArIGNhcHNUYWdOYW1lICsgJ0hlaWdodCddOwogICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgIHQuaW5pdGlhbEFzcGVjdFJhdGlvID0gdC5oZWlnaHQgPj0gdC53aWR0aCA/IHQud2lkdGggLyB0LmhlaWdodCA6IHQuaGVpZ2h0IC8gdC53aWR0aDsKCiAgICAgICAgICAgICAgICAgICAgICAgICB0LnNldFBsYXllclNpemUodC53aWR0aCwgdC5oZWlnaHQpOwoKICAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllck9wdGlvbnMucGx1Z2luV2lkdGggPSB0LndpZHRoOwogICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyT3B0aW9ucy5wbHVnaW5IZWlnaHQgPSB0LmhlaWdodDsKICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICghdC5pc1ZpZGVvICYmICF0Lm9wdGlvbnMuZmVhdHVyZXMubGVuZ3RoICYmICF0Lm9wdGlvbnMudXNlRGVmYXVsdENvbnRyb2xzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICB0Lm5vZGUuc3R5bGUuZGlzcGxheSA9ICdub25lJzsKICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgX21lanMyLmRlZmF1bHQuTWVwRGVmYXVsdHMgPSBwbGF5ZXJPcHRpb25zOwoKICAgICAgICAgICAgICAgICAgICAgbmV3IF9tZWRpYWVsZW1lbnQyLmRlZmF1bHQodC5tZWRpYSwgcGxheWVyT3B0aW9ucywgdC5tZWRpYUZpbGVzKTsKCiAgICAgICAgICAgICAgICAgICAgIGlmICh0LmdldEVsZW1lbnQodC5jb250YWluZXIpICE9PSB1bmRlZmluZWQgJiYgdC5vcHRpb25zLmZlYXR1cmVzLmxlbmd0aCAmJiB0LmNvbnRyb2xzQXJlVmlzaWJsZSAmJiAhdC5vcHRpb25zLmhpZGVWaWRlb0NvbnRyb2xzT25Mb2FkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXZlbnQgPSAoMCwgX2dlbmVyYWwuY3JlYXRlRXZlbnQpKCdjb250cm9sc3Nob3duJywgdC5nZXRFbGVtZW50KHQuY29udGFpbmVyKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICB0LmdldEVsZW1lbnQodC5jb250YWluZXIpLmRpc3BhdGNoRXZlbnQoZXZlbnQpOwogICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgIGtleTogJ3Nob3dDb250cm9scycsCiAgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNob3dDb250cm9scyhkb0FuaW1hdGlvbikgewogICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IHRoaXM7CgogICAgICAgICAgICAgICAgICAgICBkb0FuaW1hdGlvbiA9IGRvQW5pbWF0aW9uID09PSB1bmRlZmluZWQgfHwgZG9BbmltYXRpb247CgogICAgICAgICAgICAgICAgICAgICBpZiAodC5jb250cm9sc0FyZVZpc2libGUgfHwgIXQuaXNWaWRlbykgewogICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICBpZiAoZG9BbmltYXRpb24pIHsKICAgICAgICAgICAgICAgICAgICAgICAgIChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9tLmZhZGVJbih0LmdldEVsZW1lbnQodC5jb250cm9scyksIDIwMCwgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb20ucmVtb3ZlQ2xhc3ModC5nZXRFbGVtZW50KHQuY29udHJvbHMpLCB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAnb2Zmc2NyZWVuJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBldmVudCA9ICgwLCBfZ2VuZXJhbC5jcmVhdGVFdmVudCkoJ2NvbnRyb2xzc2hvd24nLCB0LmdldEVsZW1lbnQodC5jb250YWluZXIpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5nZXRFbGVtZW50KHQuY29udGFpbmVyKS5kaXNwYXRjaEV2ZW50KGV2ZW50KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnRyb2xzID0gdC5nZXRFbGVtZW50KHQuY29udGFpbmVyKS5xdWVyeVNlbGVjdG9yQWxsKCcuJyArIHQub3B0aW9ucy5jbGFzc1ByZWZpeCArICdjb250cm9sJyk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfbG9vcCA9IGZ1bmN0aW9uIF9sb29wKGksIHRvdGFsKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbS5mYWRlSW4oY29udHJvbHNbaV0sIDIwMCwgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9tLnJlbW92ZUNsYXNzKGNvbnRyb2xzW2ldLCB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAnb2Zmc2NyZWVuJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCB0b3RhbCA9IGNvbnRyb2xzLmxlbmd0aDsgaSA8IHRvdGFsOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2xvb3AoaSwgdG90YWwpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgIH0pKCk7CiAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICBkb20ucmVtb3ZlQ2xhc3ModC5nZXRFbGVtZW50KHQuY29udHJvbHMpLCB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAnb2Zmc2NyZWVuJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICB0LmdldEVsZW1lbnQodC5jb250cm9scykuc3R5bGUuZGlzcGxheSA9ICcnOwogICAgICAgICAgICAgICAgICAgICAgICAgdC5nZXRFbGVtZW50KHQuY29udHJvbHMpLnN0eWxlLm9wYWNpdHkgPSAxOwoKICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb250cm9scyA9IHQuZ2V0RWxlbWVudCh0LmNvbnRhaW5lcikucXVlcnlTZWxlY3RvckFsbCgnLicgKyB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAnY29udHJvbCcpOwogICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIHRvdGFsID0gY29udHJvbHMubGVuZ3RoOyBpIDwgdG90YWw7IGkrKykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbS5yZW1vdmVDbGFzcyhjb250cm9sc1tpXSwgdC5vcHRpb25zLmNsYXNzUHJlZml4ICsgJ29mZnNjcmVlbicpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xzW2ldLnN0eWxlLmRpc3BsYXkgPSAnJzsKICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXZlbnQgPSAoMCwgX2dlbmVyYWwuY3JlYXRlRXZlbnQpKCdjb250cm9sc3Nob3duJywgdC5nZXRFbGVtZW50KHQuY29udGFpbmVyKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICB0LmdldEVsZW1lbnQodC5jb250YWluZXIpLmRpc3BhdGNoRXZlbnQoZXZlbnQpOwogICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICB0LmNvbnRyb2xzQXJlVmlzaWJsZSA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgIHQuc2V0Q29udHJvbHNTaXplKCk7CiAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgIGtleTogJ2hpZGVDb250cm9scycsCiAgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGhpZGVDb250cm9scyhkb0FuaW1hdGlvbiwgZm9yY2VIaWRlKSB7CiAgICAgICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpczsKCiAgICAgICAgICAgICAgICAgICAgIGRvQW5pbWF0aW9uID0gZG9BbmltYXRpb24gPT09IHVuZGVmaW5lZCB8fCBkb0FuaW1hdGlvbjsKCiAgICAgICAgICAgICAgICAgICAgIGlmIChmb3JjZUhpZGUgIT09IHRydWUgJiYgKCF0LmNvbnRyb2xzQXJlVmlzaWJsZSB8fCB0Lm9wdGlvbnMuYWx3YXlzU2hvd0NvbnRyb2xzIHx8IHQucGF1c2VkICYmIHQucmVhZHlTdGF0ZSA9PT0gNCAmJiAoIXQub3B0aW9ucy5oaWRlVmlkZW9Db250cm9sc09uTG9hZCAmJiB0LmN1cnJlbnRUaW1lIDw9IDAgfHwgIXQub3B0aW9ucy5oaWRlVmlkZW9Db250cm9sc09uUGF1c2UgJiYgdC5jdXJyZW50VGltZSA+IDApIHx8IHQuaXNWaWRlbyAmJiAhdC5vcHRpb25zLmhpZGVWaWRlb0NvbnRyb2xzT25Mb2FkICYmICF0LnJlYWR5U3RhdGUgfHwgdC5lbmRlZCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgaWYgKGRvQW5pbWF0aW9uKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbS5mYWRlT3V0KHQuZ2V0RWxlbWVudCh0LmNvbnRyb2xzKSwgMjAwLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbS5hZGRDbGFzcyh0LmdldEVsZW1lbnQodC5jb250cm9scyksIHQub3B0aW9ucy5jbGFzc1ByZWZpeCArICdvZmZzY3JlZW4nKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5nZXRFbGVtZW50KHQuY29udHJvbHMpLnN0eWxlLmRpc3BsYXkgPSAnJzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV2ZW50ID0gKDAsIF9nZW5lcmFsLmNyZWF0ZUV2ZW50KSgnY29udHJvbHNoaWRkZW4nLCB0LmdldEVsZW1lbnQodC5jb250YWluZXIpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5nZXRFbGVtZW50KHQuY29udGFpbmVyKS5kaXNwYXRjaEV2ZW50KGV2ZW50KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvbnRyb2xzID0gdC5nZXRFbGVtZW50KHQuY29udGFpbmVyKS5xdWVyeVNlbGVjdG9yQWxsKCcuJyArIHQub3B0aW9ucy5jbGFzc1ByZWZpeCArICdjb250cm9sJyk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfbG9vcDIgPSBmdW5jdGlvbiBfbG9vcDIoaSwgdG90YWwpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9tLmZhZGVPdXQoY29udHJvbHNbaV0sIDIwMCwgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9tLmFkZENsYXNzKGNvbnRyb2xzW2ldLCB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAnb2Zmc2NyZWVuJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sc1tpXS5zdHlsZS5kaXNwbGF5ID0gJyc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCB0b3RhbCA9IGNvbnRyb2xzLmxlbmd0aDsgaSA8IHRvdGFsOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2xvb3AyKGksIHRvdGFsKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICB9KSgpOwogICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgZG9tLmFkZENsYXNzKHQuZ2V0RWxlbWVudCh0LmNvbnRyb2xzKSwgdC5vcHRpb25zLmNsYXNzUHJlZml4ICsgJ29mZnNjcmVlbicpOwogICAgICAgICAgICAgICAgICAgICAgICAgdC5nZXRFbGVtZW50KHQuY29udHJvbHMpLnN0eWxlLmRpc3BsYXkgPSAnJzsKICAgICAgICAgICAgICAgICAgICAgICAgIHQuZ2V0RWxlbWVudCh0LmNvbnRyb2xzKS5zdHlsZS5vcGFjaXR5ID0gMDsKCiAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29udHJvbHMgPSB0LmdldEVsZW1lbnQodC5jb250YWluZXIpLnF1ZXJ5U2VsZWN0b3JBbGwoJy4nICsgdC5vcHRpb25zLmNsYXNzUHJlZml4ICsgJ2NvbnRyb2wnKTsKICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCB0b3RhbCA9IGNvbnRyb2xzLmxlbmd0aDsgaSA8IHRvdGFsOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb20uYWRkQ2xhc3MoY29udHJvbHNbaV0sIHQub3B0aW9ucy5jbGFzc1ByZWZpeCArICdvZmZzY3JlZW4nKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sc1tpXS5zdHlsZS5kaXNwbGF5ID0gJyc7CiAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV2ZW50ID0gKDAsIF9nZW5lcmFsLmNyZWF0ZUV2ZW50KSgnY29udHJvbHNoaWRkZW4nLCB0LmdldEVsZW1lbnQodC5jb250YWluZXIpKTsKICAgICAgICAgICAgICAgICAgICAgICAgIHQuZ2V0RWxlbWVudCh0LmNvbnRhaW5lcikuZGlzcGF0Y2hFdmVudChldmVudCk7CiAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgIHQuY29udHJvbHNBcmVWaXNpYmxlID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgIGtleTogJ3N0YXJ0Q29udHJvbHNUaW1lcicsCiAgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHN0YXJ0Q29udHJvbHNUaW1lcih0aW1lb3V0KSB7CiAgICAgICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpczsKCiAgICAgICAgICAgICAgICAgICAgIHRpbWVvdXQgPSB0eXBlb2YgdGltZW91dCAhPT0gJ3VuZGVmaW5lZCcgPyB0aW1lb3V0IDogdC5vcHRpb25zLmNvbnRyb2xzVGltZW91dERlZmF1bHQ7CgogICAgICAgICAgICAgICAgICAgICB0LmtpbGxDb250cm9sc1RpbWVyKCdzdGFydCcpOwoKICAgICAgICAgICAgICAgICAgICAgdC5jb250cm9sc1RpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICB0LmhpZGVDb250cm9scygpOwogICAgICAgICAgICAgICAgICAgICAgICAgdC5raWxsQ29udHJvbHNUaW1lcignaGlkZScpOwogICAgICAgICAgICAgICAgICAgICB9LCB0aW1lb3V0KTsKICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAga2V5OiAna2lsbENvbnRyb2xzVGltZXInLAogICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBraWxsQ29udHJvbHNUaW1lcigpIHsKICAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzOwoKICAgICAgICAgICAgICAgICAgICAgaWYgKHQuY29udHJvbHNUaW1lciAhPT0gbnVsbCkgewogICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHQuY29udHJvbHNUaW1lcik7CiAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgdC5jb250cm9sc1RpbWVyOwogICAgICAgICAgICAgICAgICAgICAgICAgdC5jb250cm9sc1RpbWVyID0gbnVsbDsKICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICBrZXk6ICdkaXNhYmxlQ29udHJvbHMnLAogICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBkaXNhYmxlQ29udHJvbHMoKSB7CiAgICAgICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpczsKCiAgICAgICAgICAgICAgICAgICAgIHQua2lsbENvbnRyb2xzVGltZXIoKTsKICAgICAgICAgICAgICAgICAgICAgdC5jb250cm9sc0VuYWJsZWQgPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgdC5oaWRlQ29udHJvbHMoZmFsc2UsIHRydWUpOwogICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICBrZXk6ICdlbmFibGVDb250cm9scycsCiAgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGVuYWJsZUNvbnRyb2xzKCkgewogICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IHRoaXM7CgogICAgICAgICAgICAgICAgICAgICB0LmNvbnRyb2xzRW5hYmxlZCA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgIHQuc2hvd0NvbnRyb2xzKGZhbHNlKTsKICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAga2V5OiAnX3NldERlZmF1bHRQbGF5ZXInLAogICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBfc2V0RGVmYXVsdFBsYXllcigpIHsKICAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzOwogICAgICAgICAgICAgICAgICAgICBpZiAodC5wcm94eSkgewogICAgICAgICAgICAgICAgICAgICAgICAgdC5wcm94eS5wYXVzZSgpOwogICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgIHQucHJveHkgPSBuZXcgX2RlZmF1bHQyLmRlZmF1bHQodCk7CiAgICAgICAgICAgICAgICAgICAgIHQubWVkaWEuYWRkRXZlbnRMaXN0ZW5lcignbG9hZGVkbWV0YWRhdGEnLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodC5nZXRDdXJyZW50VGltZSgpID4gMCAmJiB0LmN1cnJlbnRNZWRpYVRpbWUgPiAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5zZXRDdXJyZW50VGltZSh0LmN1cnJlbnRNZWRpYVRpbWUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghX2NvbnN0YW50cy5JU19JT1MgJiYgIV9jb25zdGFudHMuSVNfQU5EUk9JRCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LnBsYXkoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICBrZXk6ICdfbWVSZWFkeScsCiAgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIF9tZVJlYWR5KG1lZGlhLCBkb21Ob2RlKSB7CiAgICAgICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcywKICAgICAgICAgICAgICAgICAgICAgICAgIGF1dG9wbGF5QXR0ciA9IGRvbU5vZGUuZ2V0QXR0cmlidXRlKCdhdXRvcGxheScpLAogICAgICAgICAgICAgICAgICAgICAgICAgYXV0b3BsYXkgPSAhKGF1dG9wbGF5QXR0ciA9PT0gdW5kZWZpbmVkIHx8IGF1dG9wbGF5QXR0ciA9PT0gbnVsbCB8fCBhdXRvcGxheUF0dHIgPT09ICdmYWxzZScpLAogICAgICAgICAgICAgICAgICAgICAgICAgaXNOYXRpdmUgPSBtZWRpYS5yZW5kZXJlck5hbWUgIT09IG51bGwgJiYgLyhuYXRpdmV8aHRtbDUpL2kudGVzdCh0Lm1lZGlhLnJlbmRlcmVyTmFtZSk7CgogICAgICAgICAgICAgICAgICAgICBpZiAodC5nZXRFbGVtZW50KHQuY29udHJvbHMpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICB0LmVuYWJsZUNvbnRyb2xzKCk7CiAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgIGlmICh0LmdldEVsZW1lbnQodC5jb250YWluZXIpICYmIHQuZ2V0RWxlbWVudCh0LmNvbnRhaW5lcikucXVlcnlTZWxlY3RvcignLicgKyB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAnb3ZlcmxheS1wbGF5JykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHQuZ2V0RWxlbWVudCh0LmNvbnRhaW5lcikucXVlcnlTZWxlY3RvcignLicgKyB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAnb3ZlcmxheS1wbGF5Jykuc3R5bGUuZGlzcGxheSA9ICcnOwogICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICBpZiAodC5jcmVhdGVkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgIHQuY3JlYXRlZCA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgIHQubWVkaWEgPSBtZWRpYTsKICAgICAgICAgICAgICAgICAgICAgdC5kb21Ob2RlID0gZG9tTm9kZTsKCiAgICAgICAgICAgICAgICAgICAgIGlmICghKF9jb25zdGFudHMuSVNfQU5EUk9JRCAmJiB0Lm9wdGlvbnMuQW5kcm9pZFVzZU5hdGl2ZUNvbnRyb2xzKSAmJiAhKF9jb25zdGFudHMuSVNfSVBBRCAmJiB0Lm9wdGlvbnMuaVBhZFVzZU5hdGl2ZUNvbnRyb2xzKSAmJiAhKF9jb25zdGFudHMuSVNfSVBIT05FICYmIHQub3B0aW9ucy5pUGhvbmVVc2VOYXRpdmVDb250cm9scykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdC5pc1ZpZGVvICYmICF0Lm9wdGlvbnMuZmVhdHVyZXMubGVuZ3RoICYmICF0Lm9wdGlvbnMudXNlRGVmYXVsdENvbnRyb2xzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGF1dG9wbGF5ICYmIGlzTmF0aXZlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQucGxheSgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHQub3B0aW9ucy5zdWNjZXNzKSB7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHQub3B0aW9ucy5zdWNjZXNzID09PSAnc3RyaW5nJykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX3dpbmRvdzIuZGVmYXVsdFt0Lm9wdGlvbnMuc3VjY2Vzc10odC5tZWRpYSwgdC5kb21Ob2RlLCB0KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQub3B0aW9ucy5zdWNjZXNzKHQubWVkaWEsIHQuZG9tTm9kZSwgdCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICB0LmZlYXR1cmVQb3NpdGlvbiA9IHt9OwoKICAgICAgICAgICAgICAgICAgICAgICAgIHQuX3NldERlZmF1bHRQbGF5ZXIoKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICB0LmJ1aWxkcG9zdGVyKHQsIHQuZ2V0RWxlbWVudCh0LmNvbnRyb2xzKSwgdC5nZXRFbGVtZW50KHQubGF5ZXJzKSwgdC5tZWRpYSk7CiAgICAgICAgICAgICAgICAgICAgICAgICB0LmJ1aWxka2V5Ym9hcmQodCwgdC5nZXRFbGVtZW50KHQuY29udHJvbHMpLCB0LmdldEVsZW1lbnQodC5sYXllcnMpLCB0Lm1lZGlhKTsKICAgICAgICAgICAgICAgICAgICAgICAgIHQuYnVpbGRvdmVybGF5cyh0LCB0LmdldEVsZW1lbnQodC5jb250cm9scyksIHQuZ2V0RWxlbWVudCh0LmxheWVycyksIHQubWVkaWEpOwoKICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0Lm9wdGlvbnMudXNlRGVmYXVsdENvbnRyb2xzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRlZmF1bHRDb250cm9scyA9IFsncGxheXBhdXNlJywgJ2N1cnJlbnQnLCAncHJvZ3Jlc3MnLCAnZHVyYXRpb24nLCAndHJhY2tzJywgJ3ZvbHVtZScsICdmdWxsc2NyZWVuJ107CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5vcHRpb25zLmZlYXR1cmVzID0gZGVmYXVsdENvbnRyb2xzLmNvbmNhdCh0Lm9wdGlvbnMuZmVhdHVyZXMuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkZWZhdWx0Q29udHJvbHMuaW5kZXhPZihpdGVtKSA9PT0gLTE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpOwogICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgIHQuYnVpbGRmZWF0dXJlcyh0LCB0LmdldEVsZW1lbnQodC5jb250cm9scyksIHQuZ2V0RWxlbWVudCh0LmxheWVycyksIHQubWVkaWEpOwoKICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBldmVudCA9ICgwLCBfZ2VuZXJhbC5jcmVhdGVFdmVudCkoJ2NvbnRyb2xzcmVhZHknLCB0LmdldEVsZW1lbnQodC5jb250YWluZXIpKTsKICAgICAgICAgICAgICAgICAgICAgICAgIHQuZ2V0RWxlbWVudCh0LmNvbnRhaW5lcikuZGlzcGF0Y2hFdmVudChldmVudCk7CgogICAgICAgICAgICAgICAgICAgICAgICAgdC5zZXRQbGF5ZXJTaXplKHQud2lkdGgsIHQuaGVpZ2h0KTsKICAgICAgICAgICAgICAgICAgICAgICAgIHQuc2V0Q29udHJvbHNTaXplKCk7CgogICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHQuaXNWaWRlbykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQuY2xpY2tUb1BsYXlQYXVzZUNhbGxiYWNrID0gZnVuY3Rpb24gKCkgewoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHQub3B0aW9ucy5jbGlja1RvUGxheVBhdXNlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYnV0dG9uID0gdC5nZXRFbGVtZW50KHQuY29udGFpbmVyKS5xdWVyeVNlbGVjdG9yKCcuJyArIHQub3B0aW9ucy5jbGFzc1ByZWZpeCArICdvdmVybGF5LWJ1dHRvbicpLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByZXNzZWQgPSBidXR0b24uZ2V0QXR0cmlidXRlKCdhcmlhLXByZXNzZWQnKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodC5wYXVzZWQgJiYgcHJlc3NlZCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQucGF1c2UoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodC5wYXVzZWQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LnBsYXkoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5wYXVzZSgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ2FyaWEtcHJlc3NlZCcsICFwcmVzc2VkKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQuZ2V0RWxlbWVudCh0LmNvbnRhaW5lcikuZm9jdXMoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQuY3JlYXRlSWZyYW1lTGF5ZXIoKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5tZWRpYS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHQuY2xpY2tUb1BsYXlQYXVzZUNhbGxiYWNrKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChfY29uc3RhbnRzLklTX0FORFJPSUQgfHwgX2NvbnN0YW50cy5JU19JT1MpICYmICF0Lm9wdGlvbnMuYWx3YXlzU2hvd0NvbnRyb2xzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQubm9kZS5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHQuY29udHJvbHNBcmVWaXNpYmxlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5oaWRlQ29udHJvbHMoZmFsc2UpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodC5jb250cm9sc0VuYWJsZWQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5zaG93Q29udHJvbHMoZmFsc2UpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgX2NvbnN0YW50cy5TVVBQT1JUX1BBU1NJVkVfRVZFTlQgPyB7IHBhc3NpdmU6IHRydWUgfSA6IGZhbHNlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LmdldEVsZW1lbnQodC5jb250YWluZXIpLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZW50ZXInLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodC5jb250cm9sc0VuYWJsZWQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXQub3B0aW9ucy5hbHdheXNTaG93Q29udHJvbHMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5raWxsQ29udHJvbHNUaW1lcignZW50ZXInKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5zaG93Q29udHJvbHMoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5zdGFydENvbnRyb2xzVGltZXIodC5vcHRpb25zLmNvbnRyb2xzVGltZW91dE1vdXNlRW50ZXIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQuZ2V0RWxlbWVudCh0LmNvbnRhaW5lcikuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHQuY29udHJvbHNFbmFibGVkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0LmNvbnRyb2xzQXJlVmlzaWJsZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LnNob3dDb250cm9scygpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXQub3B0aW9ucy5hbHdheXNTaG93Q29udHJvbHMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5zdGFydENvbnRyb2xzVGltZXIodC5vcHRpb25zLmNvbnRyb2xzVGltZW91dE1vdXNlRW50ZXIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQuZ2V0RWxlbWVudCh0LmNvbnRhaW5lcikuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0LmNvbnRyb2xzRW5hYmxlZCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdC5wYXVzZWQgJiYgIXQub3B0aW9ucy5hbHdheXNTaG93Q29udHJvbHMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5zdGFydENvbnRyb2xzVGltZXIodC5vcHRpb25zLmNvbnRyb2xzVGltZW91dE1vdXNlTGVhdmUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodC5vcHRpb25zLmhpZGVWaWRlb0NvbnRyb2xzT25Mb2FkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQuaGlkZUNvbnRyb2xzKGZhbHNlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0Lm9wdGlvbnMuZW5hYmxlQXV0b3NpemUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5tZWRpYS5hZGRFdmVudExpc3RlbmVyKCdsb2FkZWRtZXRhZGF0YScsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGFyZ2V0ID0gZSAhPT0gdW5kZWZpbmVkID8gZS5kZXRhaWwudGFyZ2V0IHx8IGUudGFyZ2V0IDogdC5tZWRpYTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0Lm9wdGlvbnMudmlkZW9IZWlnaHQgPD0gMCAmJiAhdC5kb21Ob2RlLmdldEF0dHJpYnV0ZSgnaGVpZ2h0JykgJiYgIXQuZG9tTm9kZS5zdHlsZS5oZWlnaHQgJiYgdGFyZ2V0ICE9PSBudWxsICYmICFpc05hTih0YXJnZXQudmlkZW9IZWlnaHQpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5zZXRQbGF5ZXJTaXplKHRhcmdldC52aWRlb1dpZHRoLCB0YXJnZXQudmlkZW9IZWlnaHQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQuc2V0Q29udHJvbHNTaXplKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5tZWRpYS5zZXRTaXplKHRhcmdldC52aWRlb1dpZHRoLCB0YXJnZXQudmlkZW9IZWlnaHQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgdC5tZWRpYS5hZGRFdmVudExpc3RlbmVyKCdwbGF5JywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQuaGFzRm9jdXMgPSB0cnVlOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBwbGF5ZXJJbmRleCBpbiBfbWVqczIuZGVmYXVsdC5wbGF5ZXJzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfbWVqczIuZGVmYXVsdC5wbGF5ZXJzLmhhc093blByb3BlcnR5KHBsYXllckluZGV4KSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHAgPSBfbWVqczIuZGVmYXVsdC5wbGF5ZXJzW3BsYXllckluZGV4XTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocC5pZCAhPT0gdC5pZCAmJiB0Lm9wdGlvbnMucGF1c2VPdGhlclBsYXllcnMgJiYgIXAucGF1c2VkICYmICFwLmVuZGVkICYmIHAub3B0aW9ucy5pZ25vcmVQYXVzZU90aGVyUGxheWVyc09wdGlvbiAhPT0gdHJ1ZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHAucGF1c2UoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwLmhhc0ZvY3VzID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKF9jb25zdGFudHMuSVNfQU5EUk9JRCB8fCBfY29uc3RhbnRzLklTX0lPUykgJiYgIXQub3B0aW9ucy5hbHdheXNTaG93Q29udHJvbHMgJiYgdC5pc1ZpZGVvKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQuaGlkZUNvbnRyb2xzKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgICAgICAgICAgdC5tZWRpYS5hZGRFdmVudExpc3RlbmVyKCdlbmRlZCcsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodC5vcHRpb25zLmF1dG9SZXdpbmQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQuc2V0Q3VycmVudFRpbWUoMCk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxvYWRpbmdFbGVtZW50ID0gdC5nZXRFbGVtZW50KHQuY29udGFpbmVyKS5xdWVyeVNlbGVjdG9yKCcuJyArIHQub3B0aW9ucy5jbGFzc1ByZWZpeCArICdvdmVybGF5LWxvYWRpbmcnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobG9hZGluZ0VsZW1lbnQgJiYgbG9hZGluZ0VsZW1lbnQucGFyZW50Tm9kZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2FkaW5nRWxlbWVudC5wYXJlbnROb2RlLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgMjApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChleHApIHsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdC5tZWRpYS5yZW5kZXJlci5zdG9wID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQubWVkaWEucmVuZGVyZXIuc3RvcCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQucGF1c2UoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0LnNldFByb2dyZXNzUmFpbCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LnNldFByb2dyZXNzUmFpbCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodC5zZXRDdXJyZW50UmFpbCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LnNldEN1cnJlbnRSYWlsKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodC5vcHRpb25zLmxvb3ApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5wbGF5KCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICghdC5vcHRpb25zLmFsd2F5c1Nob3dDb250cm9scyAmJiB0LmNvbnRyb2xzRW5hYmxlZCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LnNob3dDb250cm9scygpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICAgICAgICAgIHQubWVkaWEuYWRkRXZlbnRMaXN0ZW5lcignbG9hZGVkbWV0YWRhdGEnLCBmdW5jdGlvbiAoKSB7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICgwLCBfdGltZS5jYWxjdWxhdGVUaW1lRm9ybWF0KSh0LmdldER1cmF0aW9uKCksIHQub3B0aW9ucywgdC5vcHRpb25zLmZyYW1lc1BlclNlY29uZCB8fCAyNSk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0LnVwZGF0ZUR1cmF0aW9uKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQudXBkYXRlRHVyYXRpb24oKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHQudXBkYXRlQ3VycmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LnVwZGF0ZUN1cnJlbnQoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdC5pc0Z1bGxTY3JlZW4pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5zZXRQbGF5ZXJTaXplKHQud2lkdGgsIHQuaGVpZ2h0KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5zZXRDb250cm9sc1NpemUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZHVyYXRpb24gPSBudWxsOwogICAgICAgICAgICAgICAgICAgICAgICAgdC5tZWRpYS5hZGRFdmVudExpc3RlbmVyKCd0aW1ldXBkYXRlJywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNOYU4odC5nZXREdXJhdGlvbigpKSAmJiBkdXJhdGlvbiAhPT0gdC5nZXREdXJhdGlvbigpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uID0gdC5nZXREdXJhdGlvbigpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoMCwgX3RpbWUuY2FsY3VsYXRlVGltZUZvcm1hdCkoZHVyYXRpb24sIHQub3B0aW9ucywgdC5vcHRpb25zLmZyYW1lc1BlclNlY29uZCB8fCAyNSk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodC51cGRhdGVEdXJhdGlvbikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC51cGRhdGVEdXJhdGlvbigpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0LnVwZGF0ZUN1cnJlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQudXBkYXRlQ3VycmVudCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LnNldENvbnRyb2xzU2l6ZSgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICAgICAgICAgIHQuZ2V0RWxlbWVudCh0LmNvbnRhaW5lcikuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbS5hZGRDbGFzcyhlLmN1cnJlbnRUYXJnZXQsIHQub3B0aW9ucy5jbGFzc1ByZWZpeCArICdjb250YWluZXIta2V5Ym9hcmQtaW5hY3RpdmUnKTsKICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICAgICAgICAgIHQuZ2V0RWxlbWVudCh0LmNvbnRhaW5lcikuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXNpbicsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9tLnJlbW92ZUNsYXNzKGUuY3VycmVudFRhcmdldCwgdC5vcHRpb25zLmNsYXNzUHJlZml4ICsgJ2NvbnRhaW5lci1rZXlib2FyZC1pbmFjdGl2ZScpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0LmlzVmlkZW8gJiYgIV9jb25zdGFudHMuSVNfQU5EUk9JRCAmJiAhX2NvbnN0YW50cy5JU19JT1MgJiYgdC5jb250cm9sc0VuYWJsZWQgJiYgIXQub3B0aW9ucy5hbHdheXNTaG93Q29udHJvbHMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5raWxsQ29udHJvbHNUaW1lcignZW50ZXInKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5zaG93Q29udHJvbHMoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5zdGFydENvbnRyb2xzVGltZXIodC5vcHRpb25zLmNvbnRyb2xzVGltZW91dE1vdXNlRW50ZXIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICAgICAgICAgIHQuZ2V0RWxlbWVudCh0LmNvbnRhaW5lcikuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXNvdXQnLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZS5yZWxhdGVkVGFyZ2V0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodC5rZXlib2FyZEFjdGlvbiAmJiAhZS5yZWxhdGVkVGFyZ2V0LmNsb3Nlc3QoJy4nICsgdC5vcHRpb25zLmNsYXNzUHJlZml4ICsgJ2NvbnRhaW5lcicpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5rZXlib2FyZEFjdGlvbiA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0LmlzVmlkZW8gJiYgIXQub3B0aW9ucy5hbHdheXNTaG93Q29udHJvbHMgJiYgIXQucGF1c2VkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQuc3RhcnRDb250cm9sc1RpbWVyKHQub3B0aW9ucy5jb250cm9sc1RpbWVvdXRNb3VzZUxlYXZlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCAwKTsKICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQuc2V0UGxheWVyU2l6ZSh0LndpZHRoLCB0LmhlaWdodCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5zZXRDb250cm9sc1NpemUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDApOwoKICAgICAgICAgICAgICAgICAgICAgICAgIHQuZ2xvYmFsUmVzaXplQ2FsbGJhY2sgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEodC5pc0Z1bGxTY3JlZW4gfHwgX2NvbnN0YW50cy5IQVNfVFJVRV9OQVRJVkVfRlVMTFNDUkVFTiAmJiBfZG9jdW1lbnQyLmRlZmF1bHQud2Via2l0SXNGdWxsU2NyZWVuKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LnNldFBsYXllclNpemUodC53aWR0aCwgdC5oZWlnaHQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5zZXRDb250cm9sc1NpemUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgICAgICAgICAgdC5nbG9iYWxCaW5kKCdyZXNpemUnLCB0Lmdsb2JhbFJlc2l6ZUNhbGxiYWNrKTsKICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgaWYgKGF1dG9wbGF5ICYmIGlzTmF0aXZlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICB0LnBsYXkoKTsKICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgaWYgKHQub3B0aW9ucy5zdWNjZXNzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHQub3B0aW9ucy5zdWNjZXNzID09PSAnc3RyaW5nJykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIF93aW5kb3cyLmRlZmF1bHRbdC5vcHRpb25zLnN1Y2Nlc3NdKHQubWVkaWEsIHQuZG9tTm9kZSwgdCk7CiAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQub3B0aW9ucy5zdWNjZXNzKHQubWVkaWEsIHQuZG9tTm9kZSwgdCk7CiAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAga2V5OiAnX2hhbmRsZUVycm9yJywKICAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gX2hhbmRsZUVycm9yKGUsIG1lZGlhLCBub2RlKSB7CiAgICAgICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcywKICAgICAgICAgICAgICAgICAgICAgICAgIHBsYXkgPSB0LmdldEVsZW1lbnQodC5sYXllcnMpLnF1ZXJ5U2VsZWN0b3IoJy4nICsgdC5vcHRpb25zLmNsYXNzUHJlZml4ICsgJ292ZXJsYXktcGxheScpOwoKICAgICAgICAgICAgICAgICAgICAgaWYgKHBsYXkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHBsYXkuc3R5bGUuZGlzcGxheSA9ICdub25lJzsKICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgaWYgKHQub3B0aW9ucy5lcnJvcikgewogICAgICAgICAgICAgICAgICAgICAgICAgdC5vcHRpb25zLmVycm9yKGUsIG1lZGlhLCBub2RlKTsKICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgaWYgKHQuZ2V0RWxlbWVudCh0LmNvbnRhaW5lcikucXVlcnlTZWxlY3RvcignLicgKyB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAnY2Fubm90cGxheScpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICB0LmdldEVsZW1lbnQodC5jb250YWluZXIpLnF1ZXJ5U2VsZWN0b3IoJy4nICsgdC5vcHRpb25zLmNsYXNzUHJlZml4ICsgJ2Nhbm5vdHBsYXknKS5yZW1vdmUoKTsKICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgdmFyIGVycm9yQ29udGFpbmVyID0gX2RvY3VtZW50Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogICAgICAgICAgICAgICAgICAgICBlcnJvckNvbnRhaW5lci5jbGFzc05hbWUgPSB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAnY2Fubm90cGxheSc7CiAgICAgICAgICAgICAgICAgICAgIGVycm9yQ29udGFpbmVyLnN0eWxlLndpZHRoID0gJzEwMCUnOwogICAgICAgICAgICAgICAgICAgICBlcnJvckNvbnRhaW5lci5zdHlsZS5oZWlnaHQgPSAnMTAwJSc7CgogICAgICAgICAgICAgICAgICAgICB2YXIgZXJyb3JDb250ZW50ID0gdHlwZW9mIHQub3B0aW9ucy5jdXN0b21FcnJvciA9PT0gJ2Z1bmN0aW9uJyA/IHQub3B0aW9ucy5jdXN0b21FcnJvcih0Lm1lZGlhLCB0Lm1lZGlhLm9yaWdpbmFsTm9kZSkgOiB0Lm9wdGlvbnMuY3VzdG9tRXJyb3IsCiAgICAgICAgICAgICAgICAgICAgICAgICBpbWdFcnJvciA9ICcnOwoKICAgICAgICAgICAgICAgICAgICAgaWYgKCFlcnJvckNvbnRlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwb3N0ZXIgPSB0Lm1lZGlhLm9yaWdpbmFsTm9kZS5nZXRBdHRyaWJ1dGUoJ3Bvc3RlcicpOwogICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBvc3RlcikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltZ0Vycm9yID0gJzxpbWcgc3JjPSInICsgcG9zdGVyICsgJyIgYWx0PSInICsgX21lanMyLmRlZmF1bHQuaTE4bi50KCdtZWpzLmRvd25sb2FkLWZpbGUnKSArICciPic7CiAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUubWVzc2FnZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yQ29udGVudCA9ICc8cD4nICsgZS5tZXNzYWdlICsgJzwvcD4nOwogICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlLnVybHMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgdG90YWwgPSBlLnVybHMubGVuZ3RoOyBpIDwgdG90YWw7IGkrKykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXJsID0gZS51cmxzW2ldOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvckNvbnRlbnQgKz0gJzxhIGhyZWY9IicgKyB1cmwuc3JjICsgJyIgZGF0YS10eXBlPSInICsgdXJsLnR5cGUgKyAnIj48c3Bhbj4nICsgX21lanMyLmRlZmF1bHQuaTE4bi50KCdtZWpzLmRvd25sb2FkLWZpbGUnKSArICc6ICcgKyB1cmwuc3JjICsgJzwvc3Bhbj48L2E+JzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgIGlmIChlcnJvckNvbnRlbnQgJiYgdC5nZXRFbGVtZW50KHQubGF5ZXJzKS5xdWVyeVNlbGVjdG9yKCcuJyArIHQub3B0aW9ucy5jbGFzc1ByZWZpeCArICdvdmVybGF5LWVycm9yJykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yQ29udGFpbmVyLmlubmVySFRNTCA9IGVycm9yQ29udGVudDsKICAgICAgICAgICAgICAgICAgICAgICAgIHQuZ2V0RWxlbWVudCh0LmxheWVycykucXVlcnlTZWxlY3RvcignLicgKyB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAnb3ZlcmxheS1lcnJvcicpLmlubmVySFRNTCA9ICcnICsgaW1nRXJyb3IgKyBlcnJvckNvbnRhaW5lci5vdXRlckhUTUw7CiAgICAgICAgICAgICAgICAgICAgICAgICB0LmdldEVsZW1lbnQodC5sYXllcnMpLnF1ZXJ5U2VsZWN0b3IoJy4nICsgdC5vcHRpb25zLmNsYXNzUHJlZml4ICsgJ292ZXJsYXktZXJyb3InKS5wYXJlbnROb2RlLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snOwogICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICBpZiAodC5jb250cm9sc0VuYWJsZWQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHQuZGlzYWJsZUNvbnRyb2xzKCk7CiAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAga2V5OiAnc2V0UGxheWVyU2l6ZScsCiAgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldFBsYXllclNpemUod2lkdGgsIGhlaWdodCkgewogICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IHRoaXM7CgogICAgICAgICAgICAgICAgICAgICBpZiAoIXQub3B0aW9ucy5zZXREaW1lbnNpb25zKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygd2lkdGggIT09ICd1bmRlZmluZWQnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICB0LndpZHRoID0gd2lkdGg7CiAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgaGVpZ2h0ICE9PSAndW5kZWZpbmVkJykgewogICAgICAgICAgICAgICAgICAgICAgICAgdC5oZWlnaHQgPSBoZWlnaHQ7CiAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAodC5vcHRpb25zLnN0cmV0Y2hpbmcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2ZpbGwnOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0LmlzVmlkZW8pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5zZXRGaWxsTW9kZSgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQuc2V0RGltZW5zaW9ucyh0LndpZHRoLCB0LmhlaWdodCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAncmVzcG9uc2l2ZSc6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5zZXRSZXNwb25zaXZlTW9kZSgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnbm9uZSc6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5zZXREaW1lbnNpb25zKHQud2lkdGgsIHQuaGVpZ2h0KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0Lmhhc0ZsdWlkTW9kZSgpID09PSB0cnVlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQuc2V0UmVzcG9uc2l2ZU1vZGUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LnNldERpbWVuc2lvbnModC53aWR0aCwgdC5oZWlnaHQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICBrZXk6ICdoYXNGbHVpZE1vZGUnLAogICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBoYXNGbHVpZE1vZGUoKSB7CiAgICAgICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpczsKCiAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0LmhlaWdodC50b1N0cmluZygpLmluZGV4T2YoJyUnKSAhPT0gLTEgfHwgdC5ub2RlICYmIHQubm9kZS5zdHlsZS5tYXhXaWR0aCAmJiB0Lm5vZGUuc3R5bGUubWF4V2lkdGggIT09ICdub25lJyAmJiB0Lm5vZGUuc3R5bGUubWF4V2lkdGggIT09IHQud2lkdGggfHwgdC5ub2RlICYmIHQubm9kZS5jdXJyZW50U3R5bGUgJiYgdC5ub2RlLmN1cnJlbnRTdHlsZS5tYXhXaWR0aCA9PT0gJzEwMCUnOwogICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICBrZXk6ICdzZXRSZXNwb25zaXZlTW9kZScsCiAgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldFJlc3BvbnNpdmVNb2RlKCkgewogICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IHRoaXMsCiAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQgPSBmdW5jdGlvbiAoKSB7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXJlbnRFbCA9IHZvaWQgMCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWwgPSB0LmdldEVsZW1lbnQodC5jb250YWluZXIpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoZWwpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfY29uc3RhbnRzLklTX0ZJUkVGT1ggJiYgZWwudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnaHRtbCcgJiYgX3dpbmRvdzIuZGVmYXVsdC5zZWxmICE9PSBfd2luZG93Mi5kZWZhdWx0LnRvcCAmJiBfd2luZG93Mi5kZWZhdWx0LmZyYW1lRWxlbWVudCAhPT0gbnVsbCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfd2luZG93Mi5kZWZhdWx0LmZyYW1lRWxlbWVudDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50RWwgPSBlbC5wYXJlbnRFbGVtZW50OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnRFbCA9IGVsLnBhcmVudEVsZW1lbnQ7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXJlbnRFbCAmJiBkb20udmlzaWJsZShwYXJlbnRFbCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwYXJlbnRFbDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbCA9IHBhcmVudEVsOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgICAgICAgICAgICAgICAgICB9KCksCiAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnRTdHlsZXMgPSBwYXJlbnQgPyBnZXRDb21wdXRlZFN0eWxlKHBhcmVudCwgbnVsbCkgOiBnZXRDb21wdXRlZFN0eWxlKF9kb2N1bWVudDIuZGVmYXVsdC5ib2R5LCBudWxsKSwKICAgICAgICAgICAgICAgICAgICAgICAgIG5hdGl2ZVdpZHRoID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0LmlzVmlkZW8pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHQubm9kZS52aWRlb1dpZHRoICYmIHQubm9kZS52aWRlb1dpZHRoID4gMCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQubm9kZS52aWRlb1dpZHRoOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHQubm9kZS5nZXRBdHRyaWJ1dGUoJ3dpZHRoJykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0Lm5vZGUuZ2V0QXR0cmlidXRlKCd3aWR0aCcpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQub3B0aW9ucy5kZWZhdWx0VmlkZW9XaWR0aDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0Lm9wdGlvbnMuZGVmYXVsdEF1ZGlvV2lkdGg7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgfSgpLAogICAgICAgICAgICAgICAgICAgICAgICAgbmF0aXZlSGVpZ2h0ID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0LmlzVmlkZW8pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHQubm9kZS52aWRlb0hlaWdodCAmJiB0Lm5vZGUudmlkZW9IZWlnaHQgPiAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdC5ub2RlLnZpZGVvSGVpZ2h0OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHQubm9kZS5nZXRBdHRyaWJ1dGUoJ2hlaWdodCcpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdC5ub2RlLmdldEF0dHJpYnV0ZSgnaGVpZ2h0Jyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdC5vcHRpb25zLmRlZmF1bHRWaWRlb0hlaWdodDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0Lm9wdGlvbnMuZGVmYXVsdEF1ZGlvSGVpZ2h0OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgIH0oKSwKICAgICAgICAgICAgICAgICAgICAgICAgIGFzcGVjdFJhdGlvID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByYXRpbyA9IDE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0LmlzVmlkZW8pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJhdGlvOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHQubm9kZS52aWRlb1dpZHRoICYmIHQubm9kZS52aWRlb1dpZHRoID4gMCAmJiB0Lm5vZGUudmlkZW9IZWlnaHQgJiYgdC5ub2RlLnZpZGVvSGVpZ2h0ID4gMCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYXRpbyA9IHQuaGVpZ2h0ID49IHQud2lkdGggPyB0Lm5vZGUudmlkZW9XaWR0aCAvIHQubm9kZS52aWRlb0hlaWdodCA6IHQubm9kZS52aWRlb0hlaWdodCAvIHQubm9kZS52aWRlb1dpZHRoOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhdGlvID0gdC5pbml0aWFsQXNwZWN0UmF0aW87CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNOYU4ocmF0aW8pIHx8IHJhdGlvIDwgMC4wMSB8fCByYXRpbyA+IDEwMCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByYXRpbyA9IDE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmF0aW87CiAgICAgICAgICAgICAgICAgICAgICAgICB9KCksCiAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnRIZWlnaHQgPSBwYXJzZUZsb2F0KHBhcmVudFN0eWxlcy5oZWlnaHQpOwoKICAgICAgICAgICAgICAgICAgICAgdmFyIG5ld0hlaWdodCA9IHZvaWQgMCwKICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudFdpZHRoID0gcGFyc2VGbG9hdChwYXJlbnRTdHlsZXMud2lkdGgpOwoKICAgICAgICAgICAgICAgICAgICAgaWYgKHQuaXNWaWRlbykgewogICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHQuaGVpZ2h0ID09PSAnMTAwJScpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdIZWlnaHQgPSBwYXJzZUZsb2F0KHBhcmVudFdpZHRoICogbmF0aXZlSGVpZ2h0IC8gbmF0aXZlV2lkdGgsIDEwKTsKICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3SGVpZ2h0ID0gdC5oZWlnaHQgPj0gdC53aWR0aCA/IHBhcnNlRmxvYXQocGFyZW50V2lkdGggLyBhc3BlY3RSYXRpbywgMTApIDogcGFyc2VGbG9hdChwYXJlbnRXaWR0aCAqIGFzcGVjdFJhdGlvLCAxMCk7CiAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICBuZXdIZWlnaHQgPSBuYXRpdmVIZWlnaHQ7CiAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgIGlmIChpc05hTihuZXdIZWlnaHQpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICBuZXdIZWlnaHQgPSBwYXJlbnRIZWlnaHQ7CiAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgIGlmICh0LmdldEVsZW1lbnQodC5jb250YWluZXIpLnBhcmVudE5vZGUubGVuZ3RoID4gMCAmJiB0LmdldEVsZW1lbnQodC5jb250YWluZXIpLnBhcmVudE5vZGUudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnYm9keScpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudFdpZHRoID0gX3dpbmRvdzIuZGVmYXVsdC5pbm5lcldpZHRoIHx8IF9kb2N1bWVudDIuZGVmYXVsdC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGggfHwgX2RvY3VtZW50Mi5kZWZhdWx0LmJvZHkuY2xpZW50V2lkdGg7CiAgICAgICAgICAgICAgICAgICAgICAgICBuZXdIZWlnaHQgPSBfd2luZG93Mi5kZWZhdWx0LmlubmVySGVpZ2h0IHx8IF9kb2N1bWVudDIuZGVmYXVsdC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0IHx8IF9kb2N1bWVudDIuZGVmYXVsdC5ib2R5LmNsaWVudEhlaWdodDsKICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgaWYgKG5ld0hlaWdodCAmJiBwYXJlbnRXaWR0aCkgewogICAgICAgICAgICAgICAgICAgICAgICAgdC5nZXRFbGVtZW50KHQuY29udGFpbmVyKS5zdHlsZS53aWR0aCA9IHBhcmVudFdpZHRoICsgJ3B4JzsKICAgICAgICAgICAgICAgICAgICAgICAgIHQuZ2V0RWxlbWVudCh0LmNvbnRhaW5lcikuc3R5bGUuaGVpZ2h0ID0gbmV3SGVpZ2h0ICsgJ3B4JzsKCiAgICAgICAgICAgICAgICAgICAgICAgICB0Lm5vZGUuc3R5bGUud2lkdGggPSAnMTAwJSc7CiAgICAgICAgICAgICAgICAgICAgICAgICB0Lm5vZGUuc3R5bGUuaGVpZ2h0ID0gJzEwMCUnOwoKICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0LmlzVmlkZW8gJiYgdC5tZWRpYS5zZXRTaXplKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5tZWRpYS5zZXRTaXplKHBhcmVudFdpZHRoLCBuZXdIZWlnaHQpOwogICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsYXllckNoaWxkcmVuID0gdC5nZXRFbGVtZW50KHQubGF5ZXJzKS5jaGlsZHJlbjsKICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCB0b3RhbCA9IGxheWVyQ2hpbGRyZW4ubGVuZ3RoOyBpIDwgdG90YWw7IGkrKykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyQ2hpbGRyZW5baV0uc3R5bGUud2lkdGggPSAnMTAwJSc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJDaGlsZHJlbltpXS5zdHlsZS5oZWlnaHQgPSAnMTAwJSc7CiAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAga2V5OiAnc2V0RmlsbE1vZGUnLAogICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRGaWxsTW9kZSgpIHsKICAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzOwogICAgICAgICAgICAgICAgICAgICB2YXIgaXNJZnJhbWUgPSBfd2luZG93Mi5kZWZhdWx0LnNlbGYgIT09IF93aW5kb3cyLmRlZmF1bHQudG9wICYmIF93aW5kb3cyLmRlZmF1bHQuZnJhbWVFbGVtZW50ICE9PSBudWxsOwogICAgICAgICAgICAgICAgICAgICB2YXIgcGFyZW50ID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhcmVudEVsID0gdm9pZCAwLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsID0gdC5nZXRFbGVtZW50KHQuY29udGFpbmVyKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoZWwpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2NvbnN0YW50cy5JU19GSVJFRk9YICYmIGVsLnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2h0bWwnICYmIF93aW5kb3cyLmRlZmF1bHQuc2VsZiAhPT0gX3dpbmRvdzIuZGVmYXVsdC50b3AgJiYgX3dpbmRvdzIuZGVmYXVsdC5mcmFtZUVsZW1lbnQgIT09IG51bGwpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfd2luZG93Mi5kZWZhdWx0LmZyYW1lRWxlbWVudDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudEVsID0gZWwucGFyZW50RWxlbWVudDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50RWwgPSBlbC5wYXJlbnRFbGVtZW50OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhcmVudEVsICYmIGRvbS52aXNpYmxlKHBhcmVudEVsKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFyZW50RWw7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsID0gcGFyZW50RWw7CiAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgICAgICAgICAgICAgIH0oKTsKICAgICAgICAgICAgICAgICAgICAgdmFyIHBhcmVudFN0eWxlcyA9IHBhcmVudCA/IGdldENvbXB1dGVkU3R5bGUocGFyZW50LCBudWxsKSA6IGdldENvbXB1dGVkU3R5bGUoX2RvY3VtZW50Mi5kZWZhdWx0LmJvZHksIG51bGwpOwoKICAgICAgICAgICAgICAgICAgICAgaWYgKHQubm9kZS5zdHlsZS5oZWlnaHQgIT09ICdub25lJyAmJiB0Lm5vZGUuc3R5bGUuaGVpZ2h0ICE9PSB0LmhlaWdodCkgewogICAgICAgICAgICAgICAgICAgICAgICAgdC5ub2RlLnN0eWxlLmhlaWdodCA9ICdhdXRvJzsKICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICBpZiAodC5ub2RlLnN0eWxlLm1heFdpZHRoICE9PSAnbm9uZScgJiYgdC5ub2RlLnN0eWxlLm1heFdpZHRoICE9PSB0LndpZHRoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICB0Lm5vZGUuc3R5bGUubWF4V2lkdGggPSAnbm9uZSc7CiAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgIGlmICh0Lm5vZGUuc3R5bGUubWF4SGVpZ2h0ICE9PSAnbm9uZScgJiYgdC5ub2RlLnN0eWxlLm1heEhlaWdodCAhPT0gdC5oZWlnaHQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHQubm9kZS5zdHlsZS5tYXhIZWlnaHQgPSAnbm9uZSc7CiAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgIGlmICh0Lm5vZGUuY3VycmVudFN0eWxlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodC5ub2RlLmN1cnJlbnRTdHlsZS5oZWlnaHQgPT09ICcxMDAlJykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQubm9kZS5jdXJyZW50U3R5bGUuaGVpZ2h0ID0gJ2F1dG8nOwogICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHQubm9kZS5jdXJyZW50U3R5bGUubWF4V2lkdGggPT09ICcxMDAlJykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQubm9kZS5jdXJyZW50U3R5bGUubWF4V2lkdGggPSAnbm9uZSc7CiAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodC5ub2RlLmN1cnJlbnRTdHlsZS5tYXhIZWlnaHQgPT09ICcxMDAlJykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQubm9kZS5jdXJyZW50U3R5bGUubWF4SGVpZ2h0ID0gJ25vbmUnOwogICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICBpZiAoIWlzSWZyYW1lICYmICFwYXJzZUZsb2F0KHBhcmVudFN0eWxlcy53aWR0aCkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudC5zdHlsZS53aWR0aCA9IHQubWVkaWEub2Zmc2V0V2lkdGggKyAncHgnOwogICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICBpZiAoIWlzSWZyYW1lICYmICFwYXJzZUZsb2F0KHBhcmVudFN0eWxlcy5oZWlnaHQpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQuc3R5bGUuaGVpZ2h0ID0gdC5tZWRpYS5vZmZzZXRIZWlnaHQgKyAncHgnOwogICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICBwYXJlbnRTdHlsZXMgPSBnZXRDb21wdXRlZFN0eWxlKHBhcmVudCk7CgogICAgICAgICAgICAgICAgICAgICB2YXIgcGFyZW50V2lkdGggPSBwYXJzZUZsb2F0KHBhcmVudFN0eWxlcy53aWR0aCksCiAgICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnRIZWlnaHQgPSBwYXJzZUZsb2F0KHBhcmVudFN0eWxlcy5oZWlnaHQpOwoKICAgICAgICAgICAgICAgICAgICAgdC5zZXREaW1lbnNpb25zKCcxMDAlJywgJzEwMCUnKTsKCiAgICAgICAgICAgICAgICAgICAgIHZhciBwb3N0ZXIgPSB0LmdldEVsZW1lbnQodC5jb250YWluZXIpLnF1ZXJ5U2VsZWN0b3IoJy4nICsgdC5vcHRpb25zLmNsYXNzUHJlZml4ICsgJ3Bvc3Rlcj5pbWcnKTsKICAgICAgICAgICAgICAgICAgICAgaWYgKHBvc3RlcikgewogICAgICAgICAgICAgICAgICAgICAgICAgcG9zdGVyLnN0eWxlLmRpc3BsYXkgPSAnJzsKICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgdmFyIHRhcmdldEVsZW1lbnQgPSB0LmdldEVsZW1lbnQodC5jb250YWluZXIpLnF1ZXJ5U2VsZWN0b3JBbGwoJ29iamVjdCwgZW1iZWQsIGlmcmFtZSwgdmlkZW8nKSwKICAgICAgICAgICAgICAgICAgICAgICAgIGluaXRIZWlnaHQgPSB0LmhlaWdodCwKICAgICAgICAgICAgICAgICAgICAgICAgIGluaXRXaWR0aCA9IHQud2lkdGgsCiAgICAgICAgICAgICAgICAgICAgICAgICBzY2FsZVgxID0gcGFyZW50V2lkdGgsCiAgICAgICAgICAgICAgICAgICAgICAgICBzY2FsZVkxID0gaW5pdEhlaWdodCAqIHBhcmVudFdpZHRoIC8gaW5pdFdpZHRoLAogICAgICAgICAgICAgICAgICAgICAgICAgc2NhbGVYMiA9IGluaXRXaWR0aCAqIHBhcmVudEhlaWdodCAvIGluaXRIZWlnaHQsCiAgICAgICAgICAgICAgICAgICAgICAgICBzY2FsZVkyID0gcGFyZW50SGVpZ2h0LAogICAgICAgICAgICAgICAgICAgICAgICAgYlNjYWxlT25XaWR0aCA9IHNjYWxlWDIgPiBwYXJlbnRXaWR0aCA9PT0gZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgICAgICBmaW5hbFdpZHRoID0gYlNjYWxlT25XaWR0aCA/IE1hdGguZmxvb3Ioc2NhbGVYMSkgOiBNYXRoLmZsb29yKHNjYWxlWDIpLAogICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxIZWlnaHQgPSBiU2NhbGVPbldpZHRoID8gTWF0aC5mbG9vcihzY2FsZVkxKSA6IE1hdGguZmxvb3Ioc2NhbGVZMiksCiAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aCA9IGJTY2FsZU9uV2lkdGggPyBwYXJlbnRXaWR0aCArICdweCcgOiBmaW5hbFdpZHRoICsgJ3B4JywKICAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodCA9IGJTY2FsZU9uV2lkdGggPyBmaW5hbEhlaWdodCArICdweCcgOiBwYXJlbnRIZWlnaHQgKyAncHgnOwoKICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIHRvdGFsID0gdGFyZ2V0RWxlbWVudC5sZW5ndGg7IGkgPCB0b3RhbDsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRFbGVtZW50W2ldLnN0eWxlLmhlaWdodCA9IGhlaWdodDsKICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldEVsZW1lbnRbaV0uc3R5bGUud2lkdGggPSB3aWR0aDsKICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0Lm1lZGlhLnNldFNpemUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0Lm1lZGlhLnNldFNpemUod2lkdGgsIGhlaWdodCk7CiAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0RWxlbWVudFtpXS5zdHlsZS5tYXJnaW5MZWZ0ID0gTWF0aC5mbG9vcigocGFyZW50V2lkdGggLSBmaW5hbFdpZHRoKSAvIDIpICsgJ3B4JzsKICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldEVsZW1lbnRbaV0uc3R5bGUubWFyZ2luVG9wID0gMDsKICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICBrZXk6ICdzZXREaW1lbnNpb25zJywKICAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0RGltZW5zaW9ucyh3aWR0aCwgaGVpZ2h0KSB7CiAgICAgICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpczsKCiAgICAgICAgICAgICAgICAgICAgIHdpZHRoID0gKDAsIF9nZW5lcmFsLmlzU3RyaW5nKSh3aWR0aCkgJiYgd2lkdGguaW5kZXhPZignJScpID4gLTEgPyB3aWR0aCA6IHBhcnNlRmxvYXQod2lkdGgpICsgJ3B4JzsKICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gKDAsIF9nZW5lcmFsLmlzU3RyaW5nKShoZWlnaHQpICYmIGhlaWdodC5pbmRleE9mKCclJykgPiAtMSA/IGhlaWdodCA6IHBhcnNlRmxvYXQoaGVpZ2h0KSArICdweCc7CgogICAgICAgICAgICAgICAgICAgICB0LmdldEVsZW1lbnQodC5jb250YWluZXIpLnN0eWxlLndpZHRoID0gd2lkdGg7CiAgICAgICAgICAgICAgICAgICAgIHQuZ2V0RWxlbWVudCh0LmNvbnRhaW5lcikuc3R5bGUuaGVpZ2h0ID0gaGVpZ2h0OwoKICAgICAgICAgICAgICAgICAgICAgdmFyIGxheWVycyA9IHQuZ2V0RWxlbWVudCh0LmxheWVycykuY2hpbGRyZW47CiAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCB0b3RhbCA9IGxheWVycy5sZW5ndGg7IGkgPCB0b3RhbDsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICBsYXllcnNbaV0uc3R5bGUud2lkdGggPSB3aWR0aDsKICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyc1tpXS5zdHlsZS5oZWlnaHQgPSBoZWlnaHQ7CiAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAga2V5OiAnc2V0Q29udHJvbHNTaXplJywKICAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0Q29udHJvbHNTaXplKCkgewogICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IHRoaXM7CgogICAgICAgICAgICAgICAgICAgICBpZiAoIWRvbS52aXNpYmxlKHQuZ2V0RWxlbWVudCh0LmNvbnRhaW5lcikpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgIGlmICh0LnJhaWwgJiYgZG9tLnZpc2libGUodC5yYWlsKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRvdGFsU3R5bGVzID0gdC50b3RhbCA/IGdldENvbXB1dGVkU3R5bGUodC50b3RhbCwgbnVsbCkgOiBudWxsLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvdGFsTWFyZ2luID0gdG90YWxTdHlsZXMgPyBwYXJzZUZsb2F0KHRvdGFsU3R5bGVzLm1hcmdpbkxlZnQpICsgcGFyc2VGbG9hdCh0b3RhbFN0eWxlcy5tYXJnaW5SaWdodCkgOiAwLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhaWxTdHlsZXMgPSBnZXRDb21wdXRlZFN0eWxlKHQucmFpbCksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFpbE1hcmdpbiA9IHBhcnNlRmxvYXQocmFpbFN0eWxlcy5tYXJnaW5MZWZ0KSArIHBhcnNlRmxvYXQocmFpbFN0eWxlcy5tYXJnaW5SaWdodCk7CgogICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNpYmxpbmdzV2lkdGggPSAwOwoKICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzaWJsaW5ncyA9IGRvbS5zaWJsaW5ncyh0LnJhaWwsIGZ1bmN0aW9uIChlbCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlbCAhPT0gdC5yYWlsOwogICAgICAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG90YWwgPSBzaWJsaW5ncy5sZW5ndGg7CiAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRvdGFsOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWJsaW5nc1dpZHRoICs9IHNpYmxpbmdzW2ldLm9mZnNldFdpZHRoOwogICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgIHNpYmxpbmdzV2lkdGggKz0gdG90YWxNYXJnaW4gKyAodG90YWxNYXJnaW4gPT09IDAgPyByYWlsTWFyZ2luICogMiA6IHJhaWxNYXJnaW4pICsgMTsKCiAgICAgICAgICAgICAgICAgICAgICAgICB0LmdldEVsZW1lbnQodC5jb250YWluZXIpLnN0eWxlLm1pbldpZHRoID0gc2libGluZ3NXaWR0aCArICdweCc7CgogICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV2ZW50ID0gKDAsIF9nZW5lcmFsLmNyZWF0ZUV2ZW50KSgnY29udHJvbHNyZXNpemUnLCB0LmdldEVsZW1lbnQodC5jb250YWluZXIpKTsKICAgICAgICAgICAgICAgICAgICAgICAgIHQuZ2V0RWxlbWVudCh0LmNvbnRhaW5lcikuZGlzcGF0Y2hFdmVudChldmVudCk7CiAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGRyZW4gPSB0LmdldEVsZW1lbnQodC5jb250cm9scykuY2hpbGRyZW47CiAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWluV2lkdGggPSAwOwoKICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX3RvdGFsID0gY2hpbGRyZW4ubGVuZ3RoOyBfaSA8IF90b3RhbDsgX2krKykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbldpZHRoICs9IGNoaWxkcmVuW19pXS5vZmZzZXRXaWR0aDsKICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICB0LmdldEVsZW1lbnQodC5jb250YWluZXIpLnN0eWxlLm1pbldpZHRoID0gbWluV2lkdGggKyAncHgnOwogICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgIGtleTogJ2FkZENvbnRyb2xFbGVtZW50JywKICAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gYWRkQ29udHJvbEVsZW1lbnQoZWxlbWVudCwga2V5KSB7CgogICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IHRoaXM7CgogICAgICAgICAgICAgICAgICAgICBpZiAodC5mZWF0dXJlUG9zaXRpb25ba2V5XSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2hpbGQgPSB0LmdldEVsZW1lbnQodC5jb250cm9scykuY2hpbGRyZW5bdC5mZWF0dXJlUG9zaXRpb25ba2V5XSAtIDFdOwogICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZWxlbWVudCwgY2hpbGQubmV4dFNpYmxpbmcpOwogICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgdC5nZXRFbGVtZW50KHQuY29udHJvbHMpLmFwcGVuZENoaWxkKGVsZW1lbnQpOwogICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNoaWxkcmVuID0gdC5nZXRFbGVtZW50KHQuY29udHJvbHMpLmNoaWxkcmVuOwogICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIHRvdGFsID0gY2hpbGRyZW4ubGVuZ3RoOyBpIDwgdG90YWw7IGkrKykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50ID09PSBjaGlsZHJlbltpXSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LmZlYXR1cmVQb3NpdGlvbltrZXldID0gaTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgIGtleTogJ2NyZWF0ZUlmcmFtZUxheWVyJywKICAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY3JlYXRlSWZyYW1lTGF5ZXIoKSB7CiAgICAgICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpczsKCiAgICAgICAgICAgICAgICAgICAgIGlmICh0LmlzVmlkZW8gJiYgdC5tZWRpYS5yZW5kZXJlck5hbWUgIT09IG51bGwgJiYgdC5tZWRpYS5yZW5kZXJlck5hbWUuaW5kZXhPZignaWZyYW1lJykgPiAtMSAmJiAhX2RvY3VtZW50Mi5kZWZhdWx0LmdldEVsZW1lbnRCeUlkKHQubWVkaWEuaWQgKyAnLWlmcmFtZS1vdmVybGF5JykpIHsKCiAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGF5ZXIgPSBfZG9jdW1lbnQyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JyksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0ID0gX2RvY3VtZW50Mi5kZWZhdWx0LmdldEVsZW1lbnRCeUlkKHQubWVkaWEuaWQgKyAnXycgKyB0Lm1lZGlhLnJlbmRlcmVyTmFtZSk7CgogICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXIuaWQgPSB0Lm1lZGlhLmlkICsgJy1pZnJhbWUtb3ZlcmxheSc7CiAgICAgICAgICAgICAgICAgICAgICAgICBsYXllci5jbGFzc05hbWUgPSB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAnaWZyYW1lLW92ZXJsYXknOwogICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXIuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0Lm9wdGlvbnMuY2xpY2tUb1BsYXlQYXVzZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodC5wYXVzZWQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQucGxheSgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5wYXVzZSgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGxheWVyLCB0YXJnZXQpOwogICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgIGtleTogJ3Jlc2V0U2l6ZScsCiAgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlc2V0U2l6ZSgpIHsKICAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzOwoKICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICB0LnNldFBsYXllclNpemUodC53aWR0aCwgdC5oZWlnaHQpOwogICAgICAgICAgICAgICAgICAgICAgICAgdC5zZXRDb250cm9sc1NpemUoKTsKICAgICAgICAgICAgICAgICAgICAgfSwgNTApOwogICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICBrZXk6ICdzZXRQb3N0ZXInLAogICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRQb3N0ZXIodXJsKSB7CiAgICAgICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpczsKCiAgICAgICAgICAgICAgICAgICAgIGlmICh0LmdldEVsZW1lbnQodC5jb250YWluZXIpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcG9zdGVyRGl2ID0gdC5nZXRFbGVtZW50KHQuY29udGFpbmVyKS5xdWVyeVNlbGVjdG9yKCcuJyArIHQub3B0aW9ucy5jbGFzc1ByZWZpeCArICdwb3N0ZXInKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXBvc3RlckRpdikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc3RlckRpdiA9IF9kb2N1bWVudDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3N0ZXJEaXYuY2xhc3NOYW1lID0gdC5vcHRpb25zLmNsYXNzUHJlZml4ICsgJ3Bvc3RlciAnICsgdC5vcHRpb25zLmNsYXNzUHJlZml4ICsgJ2xheWVyJzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LmdldEVsZW1lbnQodC5sYXllcnMpLmFwcGVuZENoaWxkKHBvc3RlckRpdik7CiAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBvc3RlckltZyA9IHBvc3RlckRpdi5xdWVyeVNlbGVjdG9yKCdpbWcnKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXBvc3RlckltZyAmJiB1cmwpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3N0ZXJJbWcgPSBfZG9jdW1lbnQyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnaW1nJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zdGVySW1nLmNsYXNzTmFtZSA9IHQub3B0aW9ucy5jbGFzc1ByZWZpeCArICdwb3N0ZXItaW1nJzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3N0ZXJJbWcud2lkdGggPSAnMTAwJSc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zdGVySW1nLmhlaWdodCA9ICcxMDAlJzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3N0ZXJEaXYuc3R5bGUuZGlzcGxheSA9ICcnOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc3RlckRpdi5hcHBlbmRDaGlsZChwb3N0ZXJJbWcpOwogICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1cmwpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3N0ZXJJbWcuc2V0QXR0cmlidXRlKCdzcmMnLCB1cmwpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc3RlckRpdi5zdHlsZS5iYWNrZ3JvdW5kSW1hZ2UgPSAndXJsKCInICsgdXJsICsgJyIpJzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3N0ZXJEaXYuc3R5bGUuZGlzcGxheSA9ICcnOwogICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwb3N0ZXJJbWcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3N0ZXJEaXYuc3R5bGUuYmFja2dyb3VuZEltYWdlID0gJ25vbmUnOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc3RlckRpdi5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc3RlckltZy5yZW1vdmUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zdGVyRGl2LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CiAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoX2NvbnN0YW50cy5JU19JUEFEICYmIHQub3B0aW9ucy5pUGFkVXNlTmF0aXZlQ29udHJvbHMgfHwgX2NvbnN0YW50cy5JU19JUEhPTkUgJiYgdC5vcHRpb25zLmlQaG9uZVVzZU5hdGl2ZUNvbnRyb2xzIHx8IF9jb25zdGFudHMuSVNfQU5EUk9JRCAmJiB0Lm9wdGlvbnMuQW5kcm9pZFVzZU5hdGl2ZUNvbnRyb2xzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICB0Lm1lZGlhLm9yaWdpbmFsTm9kZS5wb3N0ZXIgPSB1cmw7CiAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAga2V5OiAnY2hhbmdlU2tpbicsCiAgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNoYW5nZVNraW4oY2xhc3NOYW1lKSB7CiAgICAgICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpczsKCiAgICAgICAgICAgICAgICAgICAgIHQuZ2V0RWxlbWVudCh0LmNvbnRhaW5lcikuY2xhc3NOYW1lID0gdC5vcHRpb25zLmNsYXNzUHJlZml4ICsgJ2NvbnRhaW5lciAnICsgY2xhc3NOYW1lOwogICAgICAgICAgICAgICAgICAgICB0LnNldFBsYXllclNpemUodC53aWR0aCwgdC5oZWlnaHQpOwogICAgICAgICAgICAgICAgICAgICB0LnNldENvbnRyb2xzU2l6ZSgpOwogICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICBrZXk6ICdnbG9iYWxCaW5kJywKICAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2xvYmFsQmluZChldmVudHMsIGNhbGxiYWNrKSB7CiAgICAgICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcywKICAgICAgICAgICAgICAgICAgICAgICAgIGRvYyA9IHQubm9kZSA/IHQubm9kZS5vd25lckRvY3VtZW50IDogX2RvY3VtZW50Mi5kZWZhdWx0OwoKICAgICAgICAgICAgICAgICAgICAgZXZlbnRzID0gKDAsIF9nZW5lcmFsLnNwbGl0RXZlbnRzKShldmVudHMsIHQuaWQpOwogICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnRzLmQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBldmVudExpc3QgPSBldmVudHMuZC5zcGxpdCgnICcpOwogICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIHRvdGFsID0gZXZlbnRMaXN0Lmxlbmd0aDsgaSA8IHRvdGFsOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudExpc3RbaV0uc3BsaXQoJy4nKS5yZWR1Y2UoZnVuY3Rpb24gKHBhcnQsIGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoZSwgY2FsbGJhY2ssIGZhbHNlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgJycpOwogICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgIGlmIChldmVudHMudykgewogICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9ldmVudExpc3QgPSBldmVudHMudy5zcGxpdCgnICcpOwogICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2kyID0gMCwgX3RvdGFsMiA9IF9ldmVudExpc3QubGVuZ3RoOyBfaTIgPCBfdG90YWwyOyBfaTIrKykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9ldmVudExpc3RbX2kyXS5zcGxpdCgnLicpLnJlZHVjZShmdW5jdGlvbiAocGFydCwgZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfd2luZG93Mi5kZWZhdWx0LmFkZEV2ZW50TGlzdGVuZXIoZSwgY2FsbGJhY2ssIGZhbHNlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgJycpOwogICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgIGtleTogJ2dsb2JhbFVuYmluZCcsCiAgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdsb2JhbFVuYmluZChldmVudHMsIGNhbGxiYWNrKSB7CiAgICAgICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpcywKICAgICAgICAgICAgICAgICAgICAgICAgIGRvYyA9IHQubm9kZSA/IHQubm9kZS5vd25lckRvY3VtZW50IDogX2RvY3VtZW50Mi5kZWZhdWx0OwoKICAgICAgICAgICAgICAgICAgICAgZXZlbnRzID0gKDAsIF9nZW5lcmFsLnNwbGl0RXZlbnRzKShldmVudHMsIHQuaWQpOwogICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnRzLmQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBldmVudExpc3QgPSBldmVudHMuZC5zcGxpdCgnICcpOwogICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIHRvdGFsID0gZXZlbnRMaXN0Lmxlbmd0aDsgaSA8IHRvdGFsOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudExpc3RbaV0uc3BsaXQoJy4nKS5yZWR1Y2UoZnVuY3Rpb24gKHBhcnQsIGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jLnJlbW92ZUV2ZW50TGlzdGVuZXIoZSwgY2FsbGJhY2ssIGZhbHNlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgJycpOwogICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgIGlmIChldmVudHMudykgewogICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9ldmVudExpc3QyID0gZXZlbnRzLncuc3BsaXQoJyAnKTsKICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9pMyA9IDAsIF90b3RhbDMgPSBfZXZlbnRMaXN0Mi5sZW5ndGg7IF9pMyA8IF90b3RhbDM7IF9pMysrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2V2ZW50TGlzdDJbX2kzXS5zcGxpdCgnLicpLnJlZHVjZShmdW5jdGlvbiAocGFydCwgZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfd2luZG93Mi5kZWZhdWx0LnJlbW92ZUV2ZW50TGlzdGVuZXIoZSwgY2FsbGJhY2ssIGZhbHNlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgJycpOwogICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgIGtleTogJ2J1aWxkZmVhdHVyZXMnLAogICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBidWlsZGZlYXR1cmVzKHBsYXllciwgY29udHJvbHMsIGxheWVycywgbWVkaWEpIHsKICAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzOwoKICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIHRvdGFsID0gdC5vcHRpb25zLmZlYXR1cmVzLmxlbmd0aDsgaSA8IHRvdGFsOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmZWF0dXJlID0gdC5vcHRpb25zLmZlYXR1cmVzW2ldOwogICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRbJ2J1aWxkJyArIGZlYXR1cmVdKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdFsnYnVpbGQnICsgZmVhdHVyZV0ocGxheWVyLCBjb250cm9scywgbGF5ZXJzLCBtZWRpYSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCdlcnJvciBidWlsZGluZyAnICsgZmVhdHVyZSwgZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgIGtleTogJ2J1aWxkcG9zdGVyJywKICAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gYnVpbGRwb3N0ZXIocGxheWVyLCBjb250cm9scywgbGF5ZXJzLCBtZWRpYSkgewogICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IHRoaXMsCiAgICAgICAgICAgICAgICAgICAgICAgICBwb3N0ZXIgPSBfZG9jdW1lbnQyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CgogICAgICAgICAgICAgICAgICAgICBwb3N0ZXIuY2xhc3NOYW1lID0gdC5vcHRpb25zLmNsYXNzUHJlZml4ICsgJ3Bvc3RlciAnICsgdC5vcHRpb25zLmNsYXNzUHJlZml4ICsgJ2xheWVyJzsKICAgICAgICAgICAgICAgICAgICAgbGF5ZXJzLmFwcGVuZENoaWxkKHBvc3Rlcik7CgogICAgICAgICAgICAgICAgICAgICB2YXIgcG9zdGVyVXJsID0gbWVkaWEub3JpZ2luYWxOb2RlLmdldEF0dHJpYnV0ZSgncG9zdGVyJyk7CgogICAgICAgICAgICAgICAgICAgICBpZiAocGxheWVyLm9wdGlvbnMucG9zdGVyICE9PSAnJykgewogICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBvc3RlclVybCAmJiBfY29uc3RhbnRzLklTX0lPUykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lZGlhLm9yaWdpbmFsTm9kZS5yZW1vdmVBdHRyaWJ1dGUoJ3Bvc3RlcicpOwogICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgcG9zdGVyVXJsID0gcGxheWVyLm9wdGlvbnMucG9zdGVyOwogICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICBpZiAocG9zdGVyVXJsKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICB0LnNldFBvc3Rlcihwb3N0ZXJVcmwpOwogICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHQubWVkaWEucmVuZGVyZXIgIT09IG51bGwgJiYgdHlwZW9mIHQubWVkaWEucmVuZGVyZXIuZ2V0UG9zdGVyVXJsID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICB0LnNldFBvc3Rlcih0Lm1lZGlhLnJlbmRlcmVyLmdldFBvc3RlclVybCgpKTsKICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHBvc3Rlci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOwogICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICBtZWRpYS5hZGRFdmVudExpc3RlbmVyKCdwbGF5JywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgcG9zdGVyLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CiAgICAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICAgICAgbWVkaWEuYWRkRXZlbnRMaXN0ZW5lcigncGxheWluZycsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHBvc3Rlci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOwogICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgICAgIGlmIChwbGF5ZXIub3B0aW9ucy5zaG93UG9zdGVyV2hlbkVuZGVkICYmIHBsYXllci5vcHRpb25zLmF1dG9SZXdpbmQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIG1lZGlhLmFkZEV2ZW50TGlzdGVuZXIoJ2VuZGVkJywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc3Rlci5zdHlsZS5kaXNwbGF5ID0gJyc7CiAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgbWVkaWEuYWRkRXZlbnRMaXN0ZW5lcignZXJyb3InLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICBwb3N0ZXIuc3R5bGUuZGlzcGxheSA9ICdub25lJzsKICAgICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgICAgICBpZiAocGxheWVyLm9wdGlvbnMuc2hvd1Bvc3RlcldoZW5QYXVzZWQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIG1lZGlhLmFkZEV2ZW50TGlzdGVuZXIoJ3BhdXNlJywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcGxheWVyLmVuZGVkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc3Rlci5zdHlsZS5kaXNwbGF5ID0gJyc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAga2V5OiAnYnVpbGRvdmVybGF5cycsCiAgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGJ1aWxkb3ZlcmxheXMocGxheWVyLCBjb250cm9scywgbGF5ZXJzLCBtZWRpYSkgewoKICAgICAgICAgICAgICAgICAgICAgaWYgKCFwbGF5ZXIuaXNWaWRlbykgewogICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IHRoaXMsCiAgICAgICAgICAgICAgICAgICAgICAgICBsb2FkaW5nID0gX2RvY3VtZW50Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicpLAogICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3IgPSBfZG9jdW1lbnQyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2JyksCiAgICAgICAgICAgICAgICAgICAgICAgICBiaWdQbGF5ID0gX2RvY3VtZW50Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwoKICAgICAgICAgICAgICAgICAgICAgbG9hZGluZy5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOwogICAgICAgICAgICAgICAgICAgICBsb2FkaW5nLmNsYXNzTmFtZSA9IHQub3B0aW9ucy5jbGFzc1ByZWZpeCArICdvdmVybGF5ICcgKyB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAnbGF5ZXInOwogICAgICAgICAgICAgICAgICAgICBsb2FkaW5nLmlubmVySFRNTCA9ICc8ZGl2IGNsYXNzPSInICsgdC5vcHRpb25zLmNsYXNzUHJlZml4ICsgJ292ZXJsYXktbG9hZGluZyI+JyArICgnPHNwYW4gY2xhc3M9IicgKyB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAnb3ZlcmxheS1sb2FkaW5nLWJnLWltZyI+PC9zcGFuPicpICsgJzwvZGl2Pic7CiAgICAgICAgICAgICAgICAgICAgIGxheWVycy5hcHBlbmRDaGlsZChsb2FkaW5nKTsKCiAgICAgICAgICAgICAgICAgICAgIGVycm9yLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CiAgICAgICAgICAgICAgICAgICAgIGVycm9yLmNsYXNzTmFtZSA9IHQub3B0aW9ucy5jbGFzc1ByZWZpeCArICdvdmVybGF5ICcgKyB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAnbGF5ZXInOwogICAgICAgICAgICAgICAgICAgICBlcnJvci5pbm5lckhUTUwgPSAnPGRpdiBjbGFzcz0iJyArIHQub3B0aW9ucy5jbGFzc1ByZWZpeCArICdvdmVybGF5LWVycm9yIj48L2Rpdj4nOwogICAgICAgICAgICAgICAgICAgICBsYXllcnMuYXBwZW5kQ2hpbGQoZXJyb3IpOwoKICAgICAgICAgICAgICAgICAgICAgYmlnUGxheS5jbGFzc05hbWUgPSB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAnb3ZlcmxheSAnICsgdC5vcHRpb25zLmNsYXNzUHJlZml4ICsgJ2xheWVyICcgKyB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAnb3ZlcmxheS1wbGF5JzsKICAgICAgICAgICAgICAgICAgICAgYmlnUGxheS5pbm5lckhUTUwgPSAnPGRpdiBjbGFzcz0iJyArIHQub3B0aW9ucy5jbGFzc1ByZWZpeCArICdvdmVybGF5LWJ1dHRvbiIgcm9sZT0iYnV0dG9uIiB0YWJpbmRleD0iMCIgJyArICgnYXJpYS1sYWJlbD0iJyArIF9pMThuMi5kZWZhdWx0LnQoJ21lanMucGxheScpICsgJyIgYXJpYS1wcmVzc2VkPSJmYWxzZSI+PC9kaXY+Jyk7CiAgICAgICAgICAgICAgICAgICAgIGJpZ1BsYXkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodC5vcHRpb25zLmNsaWNrVG9QbGF5UGF1c2UpIHsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJ1dHRvbiA9IHQuZ2V0RWxlbWVudCh0LmNvbnRhaW5lcikucXVlcnlTZWxlY3RvcignLicgKyB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAnb3ZlcmxheS1idXR0b24nKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJlc3NlZCA9IGJ1dHRvbi5nZXRBdHRyaWJ1dGUoJ2FyaWEtcHJlc3NlZCcpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodC5wYXVzZWQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5wbGF5KCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5wYXVzZSgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnV0dG9uLnNldEF0dHJpYnV0ZSgnYXJpYS1wcmVzc2VkJywgISFwcmVzc2VkKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LmdldEVsZW1lbnQodC5jb250YWluZXIpLmZvY3VzKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICAgICAgYmlnUGxheS5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBrZXlQcmVzc2VkID0gZS5rZXlDb2RlIHx8IGUud2hpY2ggfHwgMDsKCiAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoa2V5UHJlc3NlZCA9PT0gMTMgfHwgX2NvbnN0YW50cy5JU19GSVJFRk9YICYmIGtleVByZXNzZWQgPT09IDMyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV2ZW50ID0gKDAsIF9nZW5lcmFsLmNyZWF0ZUV2ZW50KSgnY2xpY2snLCBiaWdQbGF5KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiaWdQbGF5LmRpc3BhdGNoRXZlbnQoZXZlbnQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgICAgICBsYXllcnMuYXBwZW5kQ2hpbGQoYmlnUGxheSk7CgogICAgICAgICAgICAgICAgICAgICBpZiAodC5tZWRpYS5yZW5kZXJlck5hbWUgIT09IG51bGwgJiYgKC8oeW91dHViZXxmYWNlYm9vaykvaS50ZXN0KHQubWVkaWEucmVuZGVyZXJOYW1lKSAmJiAhKHQubWVkaWEub3JpZ2luYWxOb2RlLmdldEF0dHJpYnV0ZSgncG9zdGVyJykgfHwgcGxheWVyLm9wdGlvbnMucG9zdGVyIHx8IHR5cGVvZiB0Lm1lZGlhLnJlbmRlcmVyLmdldFBvc3RlclVybCA9PT0gJ2Z1bmN0aW9uJyAmJiB0Lm1lZGlhLnJlbmRlcmVyLmdldFBvc3RlclVybCgpKSB8fCBfY29uc3RhbnRzLklTX1NUT0NLX0FORFJPSUQgfHwgdC5tZWRpYS5vcmlnaW5hbE5vZGUuZ2V0QXR0cmlidXRlKCdhdXRvcGxheScpKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgYmlnUGxheS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOwogICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICB2YXIgaGFzRXJyb3IgPSBmYWxzZTsKCiAgICAgICAgICAgICAgICAgICAgIG1lZGlhLmFkZEV2ZW50TGlzdGVuZXIoJ3BsYXknLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICBiaWdQbGF5LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CiAgICAgICAgICAgICAgICAgICAgICAgICBsb2FkaW5nLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CiAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOwogICAgICAgICAgICAgICAgICAgICAgICAgaGFzRXJyb3IgPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgIG1lZGlhLmFkZEV2ZW50TGlzdGVuZXIoJ3BsYXlpbmcnLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICBiaWdQbGF5LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CiAgICAgICAgICAgICAgICAgICAgICAgICBsb2FkaW5nLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CiAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOwogICAgICAgICAgICAgICAgICAgICAgICAgaGFzRXJyb3IgPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgIG1lZGlhLmFkZEV2ZW50TGlzdGVuZXIoJ3NlZWtpbmcnLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICBiaWdQbGF5LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CiAgICAgICAgICAgICAgICAgICAgICAgICBsb2FkaW5nLnN0eWxlLmRpc3BsYXkgPSAnJzsKICAgICAgICAgICAgICAgICAgICAgICAgIGhhc0Vycm9yID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICBtZWRpYS5hZGRFdmVudExpc3RlbmVyKCdzZWVrZWQnLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICBiaWdQbGF5LnN0eWxlLmRpc3BsYXkgPSB0LnBhdXNlZCAmJiAhX2NvbnN0YW50cy5JU19TVE9DS19BTkRST0lEID8gJycgOiAnbm9uZSc7CiAgICAgICAgICAgICAgICAgICAgICAgICBsb2FkaW5nLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CiAgICAgICAgICAgICAgICAgICAgICAgICBoYXNFcnJvciA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgbWVkaWEuYWRkRXZlbnRMaXN0ZW5lcigncGF1c2UnLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICBsb2FkaW5nLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CiAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIV9jb25zdGFudHMuSVNfU1RPQ0tfQU5EUk9JRCAmJiAhaGFzRXJyb3IpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiaWdQbGF5LnN0eWxlLmRpc3BsYXkgPSAnJzsKICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgIGhhc0Vycm9yID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICBtZWRpYS5hZGRFdmVudExpc3RlbmVyKCd3YWl0aW5nJywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgbG9hZGluZy5zdHlsZS5kaXNwbGF5ID0gJyc7CiAgICAgICAgICAgICAgICAgICAgICAgICBoYXNFcnJvciA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgICAgIG1lZGlhLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWRlZGRhdGEnLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICBsb2FkaW5nLnN0eWxlLmRpc3BsYXkgPSAnJzsKCiAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2NvbnN0YW50cy5JU19BTkRST0lEKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVkaWEuY2FucGxheVRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9kb2N1bWVudDIuZGVmYXVsdC5jcmVhdGVFdmVudCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV2dCA9IF9kb2N1bWVudDIuZGVmYXVsdC5jcmVhdGVFdmVudCgnSFRNTEV2ZW50cycpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZ0LmluaXRFdmVudCgnY2FucGxheScsIHRydWUsIHRydWUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1lZGlhLmRpc3BhdGNoRXZlbnQoZXZ0KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDMwMCk7CiAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICBoYXNFcnJvciA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgbWVkaWEuYWRkRXZlbnRMaXN0ZW5lcignY2FucGxheScsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIGxvYWRpbmcuc3R5bGUuZGlzcGxheSA9ICdub25lJzsKCiAgICAgICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQobWVkaWEuY2FucGxheVRpbWVvdXQpOwogICAgICAgICAgICAgICAgICAgICAgICAgaGFzRXJyb3IgPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgICAgICBtZWRpYS5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICB0Ll9oYW5kbGVFcnJvcihlLCB0Lm1lZGlhLCB0Lm5vZGUpOwogICAgICAgICAgICAgICAgICAgICAgICAgbG9hZGluZy5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOwogICAgICAgICAgICAgICAgICAgICAgICAgYmlnUGxheS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOwogICAgICAgICAgICAgICAgICAgICAgICAgaGFzRXJyb3IgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgICAgIG1lZGlhLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWRlZG1ldGFkYXRhJywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0LmNvbnRyb2xzRW5hYmxlZCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQuZW5hYmxlQ29udHJvbHMoKTsKICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgICAgICBtZWRpYS5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHQub25rZXlkb3duKHBsYXllciwgbWVkaWEsIGUpOwogICAgICAgICAgICAgICAgICAgICAgICAgaGFzRXJyb3IgPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgIGtleTogJ2J1aWxka2V5Ym9hcmQnLAogICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBidWlsZGtleWJvYXJkKHBsYXllciwgY29udHJvbHMsIGxheWVycywgbWVkaWEpIHsKCiAgICAgICAgICAgICAgICAgICAgIHZhciB0ID0gdGhpczsKCiAgICAgICAgICAgICAgICAgICAgIHQuZ2V0RWxlbWVudCh0LmNvbnRhaW5lcikuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHQua2V5Ym9hcmRBY3Rpb24gPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgICAgIHQuZ2xvYmFsS2V5ZG93bkNhbGxiYWNrID0gZnVuY3Rpb24gKGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29udGFpbmVyID0gX2RvY3VtZW50Mi5kZWZhdWx0LmFjdGl2ZUVsZW1lbnQuY2xvc2VzdCgnLicgKyB0Lm9wdGlvbnMuY2xhc3NQcmVmaXggKyAnY29udGFpbmVyJyksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0ID0gdC5tZWRpYS5jbG9zZXN0KCcuJyArIHQub3B0aW9ucy5jbGFzc1ByZWZpeCArICdjb250YWluZXInKTsKICAgICAgICAgICAgICAgICAgICAgICAgIHQuaGFzRm9jdXMgPSAhIShjb250YWluZXIgJiYgdGFyZ2V0ICYmIGNvbnRhaW5lci5pZCA9PT0gdGFyZ2V0LmlkKTsKICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0Lm9ua2V5ZG93bihwbGF5ZXIsIG1lZGlhLCBldmVudCk7CiAgICAgICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgICAgICB0Lmdsb2JhbENsaWNrQ2FsbGJhY2sgPSBmdW5jdGlvbiAoZXZlbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHQuaGFzRm9jdXMgPSAhIWV2ZW50LnRhcmdldC5jbG9zZXN0KCcuJyArIHQub3B0aW9ucy5jbGFzc1ByZWZpeCArICdjb250YWluZXInKTsKICAgICAgICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICAgICAgIHQuZ2xvYmFsQmluZCgna2V5ZG93bicsIHQuZ2xvYmFsS2V5ZG93bkNhbGxiYWNrKTsKCiAgICAgICAgICAgICAgICAgICAgIHQuZ2xvYmFsQmluZCgnY2xpY2snLCB0Lmdsb2JhbENsaWNrQ2FsbGJhY2spOwogICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICBrZXk6ICdvbmtleWRvd24nLAogICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBvbmtleWRvd24ocGxheWVyLCBtZWRpYSwgZSkgewoKICAgICAgICAgICAgICAgICAgICAgaWYgKHBsYXllci5oYXNGb2N1cyAmJiBwbGF5ZXIub3B0aW9ucy5lbmFibGVLZXlib2FyZCkgewogICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIHRvdGFsID0gcGxheWVyLm9wdGlvbnMua2V5QWN0aW9ucy5sZW5ndGg7IGkgPCB0b3RhbDsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGtleUFjdGlvbiA9IHBsYXllci5vcHRpb25zLmtleUFjdGlvbnNbaV07CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwLCBqbCA9IGtleUFjdGlvbi5rZXlzLmxlbmd0aDsgaiA8IGpsOyBqKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUua2V5Q29kZSA9PT0ga2V5QWN0aW9uLmtleXNbal0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleUFjdGlvbi5hY3Rpb24ocGxheWVyLCBtZWRpYSwgZS5rZXlDb2RlLCBlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICBrZXk6ICdwbGF5JywKICAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcGxheSgpIHsKICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm94eS5wbGF5KCk7CiAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgIGtleTogJ3BhdXNlJywKICAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcGF1c2UoKSB7CiAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJveHkucGF1c2UoKTsKICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAga2V5OiAnbG9hZCcsCiAgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGxvYWQoKSB7CiAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJveHkubG9hZCgpOwogICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICBrZXk6ICdzZXRDdXJyZW50VGltZScsCiAgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldEN1cnJlbnRUaW1lKHRpbWUpIHsKICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm94eS5zZXRDdXJyZW50VGltZSh0aW1lKTsKICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAga2V5OiAnZ2V0Q3VycmVudFRpbWUnLAogICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDdXJyZW50VGltZSgpIHsKICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJveHkuY3VycmVudFRpbWU7CiAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgIGtleTogJ2dldER1cmF0aW9uJywKICAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RHVyYXRpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnByb3h5LmR1cmF0aW9uOwogICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICBrZXk6ICdzZXRWb2x1bWUnLAogICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRWb2x1bWUodm9sdW1lKSB7CiAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJveHkudm9sdW1lID0gdm9sdW1lOwogICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICBrZXk6ICdnZXRWb2x1bWUnLAogICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRWb2x1bWUoKSB7CiAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnByb3h5LmdldFZvbHVtZSgpOwogICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICBrZXk6ICdzZXRNdXRlZCcsCiAgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldE11dGVkKHZhbHVlKSB7CiAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJveHkuc2V0TXV0ZWQodmFsdWUpOwogICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICBrZXk6ICdzZXRTcmMnLAogICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRTcmMoc3JjKSB7CiAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5jb250cm9sc0VuYWJsZWQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW5hYmxlQ29udHJvbHMoKTsKICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICB0aGlzLnByb3h5LnNldFNyYyhzcmMpOwogICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICBrZXk6ICdnZXRTcmMnLAogICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRTcmMoKSB7CiAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnByb3h5LmdldFNyYygpOwogICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICBrZXk6ICdjYW5QbGF5VHlwZScsCiAgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNhblBsYXlUeXBlKHR5cGUpIHsKICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJveHkuY2FuUGxheVR5cGUodHlwZSk7CiAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgIGtleTogJ3JlbW92ZScsCiAgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbW92ZSgpIHsKICAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzLAogICAgICAgICAgICAgICAgICAgICAgICAgcmVuZGVyZXJOYW1lID0gdC5tZWRpYS5yZW5kZXJlck5hbWUsCiAgICAgICAgICAgICAgICAgICAgICAgICBzcmMgPSB0Lm1lZGlhLm9yaWdpbmFsTm9kZS5zcmM7CgogICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBmZWF0dXJlSW5kZXggaW4gdC5vcHRpb25zLmZlYXR1cmVzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmVhdHVyZSA9IHQub3B0aW9ucy5mZWF0dXJlc1tmZWF0dXJlSW5kZXhdOwogICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRbJ2NsZWFuJyArIGZlYXR1cmVdKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdFsnY2xlYW4nICsgZmVhdHVyZV0odCwgdC5nZXRFbGVtZW50KHQubGF5ZXJzKSwgdC5nZXRFbGVtZW50KHQuY29udHJvbHMpLCB0Lm1lZGlhKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ2Vycm9yIGNsZWFuaW5nICcgKyBmZWF0dXJlLCBlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgIHZhciBuYXRpdmVXaWR0aCA9IHQubm9kZS5nZXRBdHRyaWJ1dGUoJ3dpZHRoJyksCiAgICAgICAgICAgICAgICAgICAgICAgICBuYXRpdmVIZWlnaHQgPSB0Lm5vZGUuZ2V0QXR0cmlidXRlKCdoZWlnaHQnKTsKCiAgICAgICAgICAgICAgICAgICAgIGlmIChuYXRpdmVXaWR0aCkgewogICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5hdGl2ZVdpZHRoLmluZGV4T2YoJyUnKSA9PT0gLTEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXRpdmVXaWR0aCA9IG5hdGl2ZVdpZHRoICsgJ3B4JzsKICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgIG5hdGl2ZVdpZHRoID0gJ2F1dG8nOwogICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICBpZiAobmF0aXZlSGVpZ2h0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobmF0aXZlSGVpZ2h0LmluZGV4T2YoJyUnKSA9PT0gLTEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXRpdmVIZWlnaHQgPSBuYXRpdmVIZWlnaHQgKyAncHgnOwogICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgbmF0aXZlSGVpZ2h0ID0gJ2F1dG8nOwogICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICB0Lm5vZGUuc3R5bGUud2lkdGggPSBuYXRpdmVXaWR0aDsKICAgICAgICAgICAgICAgICAgICAgdC5ub2RlLnN0eWxlLmhlaWdodCA9IG5hdGl2ZUhlaWdodDsKCiAgICAgICAgICAgICAgICAgICAgIHQuc2V0UGxheWVyU2l6ZSgwLCAwKTsKCiAgICAgICAgICAgICAgICAgICAgIGlmICghdC5pc0R5bmFtaWMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5ub2RlLnNldEF0dHJpYnV0ZSgnY29udHJvbHMnLCB0cnVlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0Lm5vZGUuc2V0QXR0cmlidXRlKCdpZCcsIHQubm9kZS5nZXRBdHRyaWJ1dGUoJ2lkJykucmVwbGFjZSgnXycgKyByZW5kZXJlck5hbWUsICcnKS5yZXBsYWNlKCdfZnJvbV9tZWpzJywgJycpKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcG9zdGVyID0gdC5nZXRFbGVtZW50KHQuY29udGFpbmVyKS5xdWVyeVNlbGVjdG9yKCcuJyArIHQub3B0aW9ucy5jbGFzc1ByZWZpeCArICdwb3N0ZXI+aW1nJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBvc3RlcikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0Lm5vZGUuc2V0QXR0cmlidXRlKCdwb3N0ZXInLCBwb3N0ZXIuc3JjKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0Lm5vZGUuYXV0b3BsYXk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQubm9kZS5zZXRBdHRyaWJ1dGUoJ3NyYycsICcnKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodC5tZWRpYS5jYW5QbGF5VHlwZSgoMCwgX21lZGlhLmdldFR5cGVGcm9tRmlsZSkoc3JjKSkgIT09ICcnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQubm9kZS5zZXRBdHRyaWJ1dGUoJ3NyYycsIHNyYyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVuZGVyZXJOYW1lICYmIHJlbmRlcmVyTmFtZS5pbmRleE9mKCdpZnJhbWUnKSA+IC0xKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsYXllciA9IF9kb2N1bWVudDIuZGVmYXVsdC5nZXRFbGVtZW50QnlJZCh0Lm1lZGlhLmlkICsgJy1pZnJhbWUtb3ZlcmxheScpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllci5yZW1vdmUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBub2RlID0gdC5ub2RlLmNsb25lTm9kZSgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUuc3R5bGUuZGlzcGxheSA9ICcnOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQuZ2V0RWxlbWVudCh0LmNvbnRhaW5lcikucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobm9kZSwgdC5nZXRFbGVtZW50KHQuY29udGFpbmVyKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5ub2RlLnJlbW92ZSgpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodC5tZWRpYUZpbGVzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCB0b3RhbCA9IHQubWVkaWFGaWxlcy5sZW5ndGg7IGkgPCB0b3RhbDsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc291cmNlID0gX2RvY3VtZW50Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ3NvdXJjZScpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlLnNldEF0dHJpYnV0ZSgnc3JjJywgdC5tZWRpYUZpbGVzW2ldLnNyYyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2Uuc2V0QXR0cmlidXRlKCd0eXBlJywgdC5tZWRpYUZpbGVzW2ldLnR5cGUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5hcHBlbmRDaGlsZChzb3VyY2UpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0LnRyYWNrRmlsZXMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9sb29wMyA9IGZ1bmN0aW9uIF9sb29wMyhfaTQsIF90b3RhbDQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0cmFjayA9IHQudHJhY2tGaWxlc1tfaTRdOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5ld1RyYWNrID0gX2RvY3VtZW50Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ3RyYWNrJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdUcmFjay5raW5kID0gdHJhY2sua2luZDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1RyYWNrLmxhYmVsID0gdHJhY2subGFiZWw7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdUcmFjay5zcmNsYW5nID0gdHJhY2suc3JjbGFuZzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1RyYWNrLnNyYyA9IHRyYWNrLnNyYzsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLmFwcGVuZENoaWxkKG5ld1RyYWNrKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1RyYWNrLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tb2RlID0gJ3Nob3dpbmcnOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUudGV4dFRyYWNrc1tfaTRdLm1vZGUgPSAnc2hvd2luZyc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9pNCA9IDAsIF90b3RhbDQgPSB0LnRyYWNrRmlsZXMubGVuZ3RoOyBfaTQgPCBfdG90YWw0OyBfaTQrKykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2xvb3AzKF9pNCwgX3RvdGFsNCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0Lm5vZGU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHQubWVkaWFGaWxlczsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgdC50cmFja0ZpbGVzOwogICAgICAgICAgICAgICAgICAgICAgICAgfSkoKTsKICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHQuZ2V0RWxlbWVudCh0LmNvbnRhaW5lcikucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodC5ub2RlLCB0LmdldEVsZW1lbnQodC5jb250YWluZXIpKTsKICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgaWYgKHQubWVkaWEucmVuZGVyZXIgJiYgdHlwZW9mIHQubWVkaWEucmVuZGVyZXIuZGVzdHJveSA9PT0gJ2Z1bmN0aW9uJykgewogICAgICAgICAgICAgICAgICAgICAgICAgdC5tZWRpYS5yZW5kZXJlci5kZXN0cm95KCk7CiAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBfbWVqczIuZGVmYXVsdC5wbGF5ZXJzW3QuaWRdOwoKICAgICAgICAgICAgICAgICAgICAgaWYgKF90eXBlb2YodC5nZXRFbGVtZW50KHQuY29udGFpbmVyKSkgPT09ICdvYmplY3QnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgb2Zmc2NyZWVuID0gdC5nZXRFbGVtZW50KHQuY29udGFpbmVyKS5wYXJlbnROb2RlLnF1ZXJ5U2VsZWN0b3IoJy4nICsgdC5vcHRpb25zLmNsYXNzUHJlZml4ICsgJ29mZnNjcmVlbicpOwogICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2NyZWVuLnJlbW92ZSgpOwogICAgICAgICAgICAgICAgICAgICAgICAgdC5nZXRFbGVtZW50KHQuY29udGFpbmVyKS5yZW1vdmUoKTsKICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICB0Lmdsb2JhbFVuYmluZCgncmVzaXplJywgdC5nbG9iYWxSZXNpemVDYWxsYmFjayk7CiAgICAgICAgICAgICAgICAgICAgIHQuZ2xvYmFsVW5iaW5kKCdrZXlkb3duJywgdC5nbG9iYWxLZXlkb3duQ2FsbGJhY2spOwogICAgICAgICAgICAgICAgICAgICB0Lmdsb2JhbFVuYmluZCgnY2xpY2snLCB0Lmdsb2JhbENsaWNrQ2FsbGJhY2spOwoKICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHQubWVkaWEucGxheWVyOwogICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICBrZXk6ICdwYXVzZWQnLAogICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wcm94eS5wYXVzZWQ7CiAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgIGtleTogJ211dGVkJywKICAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJveHkubXV0ZWQ7CiAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldChtdXRlZCkgewogICAgICAgICAgICAgICAgICAgICB0aGlzLnNldE11dGVkKG11dGVkKTsKICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAga2V5OiAnZW5kZWQnLAogICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wcm94eS5lbmRlZDsKICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAga2V5OiAncmVhZHlTdGF0ZScsCiAgICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnByb3h5LnJlYWR5U3RhdGU7CiAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgIGtleTogJ2N1cnJlbnRUaW1lJywKICAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldCh0aW1lKSB7CiAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0Q3VycmVudFRpbWUodGltZSk7CiAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q3VycmVudFRpbWUoKTsKICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAga2V5OiAnZHVyYXRpb24nLAogICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXREdXJhdGlvbigpOwogICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICBrZXk6ICd2b2x1bWUnLAogICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZvbHVtZSkgewogICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFZvbHVtZSh2b2x1bWUpOwogICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFZvbHVtZSgpOwogICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICBrZXk6ICdzcmMnLAogICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24gc2V0KHNyYykgewogICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFNyYyhzcmMpOwogICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFNyYygpOwogICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgIH1dKTsKCiAgICAgICAgICAgICByZXR1cm4gTWVkaWFFbGVtZW50UGxheWVyOwogICAgICAgICB9KCk7CgogICAgICAgICBfd2luZG93Mi5kZWZhdWx0Lk1lZGlhRWxlbWVudFBsYXllciA9IE1lZGlhRWxlbWVudFBsYXllcjsKICAgICAgICAgX21lanMyLmRlZmF1bHQuTWVkaWFFbGVtZW50UGxheWVyID0gTWVkaWFFbGVtZW50UGxheWVyOwoKICAgICAgICAgZXhwb3J0cy5kZWZhdWx0ID0gTWVkaWFFbGVtZW50UGxheWVyOwoKICAgICB9LCB7ICIxNyI6IDE3LCAiMiI6IDIsICIyNSI6IDI1LCAiMjYiOiAyNiwgIjI3IjogMjcsICIyOCI6IDI4LCAiMyI6IDMsICIzMCI6IDMwLCAiNSI6IDUsICI2IjogNiwgIjciOiA3IH1dLCAxNzogW2Z1bmN0aW9uIChfZGVyZXFfLCBtb2R1bGUsIGV4cG9ydHMpIHsKICAgICAgICAgJ3VzZSBzdHJpY3QnOwoKICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogICAgICAgICAgICAgdmFsdWU6IHRydWUKICAgICAgICAgfSk7CgogICAgICAgICB2YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKCJ2YWx1ZSIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9IHJldHVybiBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7IGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH07IH0oKTsKCiAgICAgICAgIHZhciBfd2luZG93ID0gX2RlcmVxXygzKTsKCiAgICAgICAgIHZhciBfd2luZG93MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dpbmRvdyk7CgogICAgICAgICBmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKICAgICAgICAgZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24iKTsgfSB9CgogICAgICAgICB2YXIgRGVmYXVsdFBsYXllciA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgIGZ1bmN0aW9uIERlZmF1bHRQbGF5ZXIocGxheWVyKSB7CiAgICAgICAgICAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIERlZmF1bHRQbGF5ZXIpOwoKICAgICAgICAgICAgICAgICB0aGlzLm1lZGlhID0gcGxheWVyLm1lZGlhOwogICAgICAgICAgICAgICAgIHRoaXMuaXNWaWRlbyA9IHBsYXllci5pc1ZpZGVvOwogICAgICAgICAgICAgICAgIHRoaXMuY2xhc3NQcmVmaXggPSBwbGF5ZXIub3B0aW9ucy5jbGFzc1ByZWZpeDsKICAgICAgICAgICAgICAgICB0aGlzLmNyZWF0ZUlmcmFtZUxheWVyID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGxheWVyLmNyZWF0ZUlmcmFtZUxheWVyKCk7CiAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICB0aGlzLnNldFBvc3RlciA9IGZ1bmN0aW9uICh1cmwpIHsKICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBsYXllci5zZXRQb3N0ZXIodXJsKTsKICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgIHJldHVybiB0aGlzOwogICAgICAgICAgICAgfQoKICAgICAgICAgICAgIF9jcmVhdGVDbGFzcyhEZWZhdWx0UGxheWVyLCBbewogICAgICAgICAgICAgICAgIGtleTogJ3BsYXknLAogICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBwbGF5KCkgewogICAgICAgICAgICAgICAgICAgICB0aGlzLm1lZGlhLnBsYXkoKTsKICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAga2V5OiAncGF1c2UnLAogICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBwYXVzZSgpIHsKICAgICAgICAgICAgICAgICAgICAgdGhpcy5tZWRpYS5wYXVzZSgpOwogICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICBrZXk6ICdsb2FkJywKICAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gbG9hZCgpIHsKICAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzOwoKICAgICAgICAgICAgICAgICAgICAgaWYgKCF0LmlzTG9hZGVkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICB0Lm1lZGlhLmxvYWQoKTsKICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgdC5pc0xvYWRlZCA9IHRydWU7CiAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgIGtleTogJ3NldEN1cnJlbnRUaW1lJywKICAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0Q3VycmVudFRpbWUodGltZSkgewogICAgICAgICAgICAgICAgICAgICB0aGlzLm1lZGlhLnNldEN1cnJlbnRUaW1lKHRpbWUpOwogICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICBrZXk6ICdnZXRDdXJyZW50VGltZScsCiAgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldEN1cnJlbnRUaW1lKCkgewogICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5tZWRpYS5jdXJyZW50VGltZTsKICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAga2V5OiAnZ2V0RHVyYXRpb24nLAogICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBnZXREdXJhdGlvbigpIHsKICAgICAgICAgICAgICAgICAgICAgdmFyIGR1cmF0aW9uID0gdGhpcy5tZWRpYS5nZXREdXJhdGlvbigpOwogICAgICAgICAgICAgICAgICAgICBpZiAoZHVyYXRpb24gPT09IEluZmluaXR5ICYmIHRoaXMubWVkaWEuc2Vla2FibGUgJiYgdGhpcy5tZWRpYS5zZWVrYWJsZS5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIGR1cmF0aW9uID0gdGhpcy5tZWRpYS5zZWVrYWJsZS5lbmQoMCk7CiAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGR1cmF0aW9uOwogICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICBrZXk6ICdzZXRWb2x1bWUnLAogICAgICAgICAgICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRWb2x1bWUodm9sdW1lKSB7CiAgICAgICAgICAgICAgICAgICAgIHRoaXMubWVkaWEuc2V0Vm9sdW1lKHZvbHVtZSk7CiAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgIGtleTogJ2dldFZvbHVtZScsCiAgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldFZvbHVtZSgpIHsKICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubWVkaWEuZ2V0Vm9sdW1lKCk7CiAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgIGtleTogJ3NldE11dGVkJywKICAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc2V0TXV0ZWQodmFsdWUpIHsKICAgICAgICAgICAgICAgICAgICAgdGhpcy5tZWRpYS5zZXRNdXRlZCh2YWx1ZSk7CiAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgIGtleTogJ3NldFNyYycsCiAgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHNldFNyYyhzcmMpIHsKICAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSB0aGlzLAogICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0Lm1lZGlhLmlkICsgJy1pZnJhbWUtb3ZlcmxheScpOwoKICAgICAgICAgICAgICAgICAgICAgaWYgKGxheWVyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICBsYXllci5yZW1vdmUoKTsKICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgdC5tZWRpYS5zZXRTcmMoc3JjKTsKICAgICAgICAgICAgICAgICAgICAgdC5jcmVhdGVJZnJhbWVMYXllcigpOwogICAgICAgICAgICAgICAgICAgICBpZiAodC5tZWRpYS5yZW5kZXJlciAhPT0gbnVsbCAmJiB0eXBlb2YgdC5tZWRpYS5yZW5kZXJlci5nZXRQb3N0ZXJVcmwgPT09ICdmdW5jdGlvbicpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHQuc2V0UG9zdGVyKHQubWVkaWEucmVuZGVyZXIuZ2V0UG9zdGVyVXJsKCkpOwogICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgIGtleTogJ2dldFNyYycsCiAgICAgICAgICAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGdldFNyYygpIHsKICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubWVkaWEuZ2V0U3JjKCk7CiAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgIGtleTogJ2NhblBsYXlUeXBlJywKICAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY2FuUGxheVR5cGUodHlwZSkgewogICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5tZWRpYS5jYW5QbGF5VHlwZSh0eXBlKTsKICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAga2V5OiAncGF1c2VkJywKICAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubWVkaWEucGF1c2VkOwogICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICBrZXk6ICdtdXRlZCcsCiAgICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQobXV0ZWQpIHsKICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRNdXRlZChtdXRlZCk7CiAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubWVkaWEubXV0ZWQ7CiAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgIGtleTogJ2VuZGVkJywKICAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubWVkaWEuZW5kZWQ7CiAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgIGtleTogJ3JlYWR5U3RhdGUnLAogICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5tZWRpYS5yZWFkeVN0YXRlOwogICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgICBrZXk6ICdjdXJyZW50VGltZScsCiAgICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodGltZSkgewogICAgICAgICAgICAgICAgICAgICB0aGlzLnNldEN1cnJlbnRUaW1lKHRpbWUpOwogICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldEN1cnJlbnRUaW1lKCk7CiAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgIGtleTogJ2R1cmF0aW9uJywKICAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RHVyYXRpb24oKTsKICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICAga2V5OiAncmVtYWluaW5nVGltZScsCiAgICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7CiAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldER1cmF0aW9uKCkgLSB0aGlzLmN1cnJlbnRUaW1lKCk7CiAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgIGtleTogJ3ZvbHVtZScsCiAgICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodm9sdW1lKSB7CiAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0Vm9sdW1lKHZvbHVtZSk7CiAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Vm9sdW1lKCk7CiAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgIGtleTogJ3NyYycsCiAgICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQoc3JjKSB7CiAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U3JjKHNyYyk7CiAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U3JjKCk7CiAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgfV0pOwoKICAgICAgICAgICAgIHJldHVybiBEZWZhdWx0UGxheWVyOwogICAgICAgICB9KCk7CgogICAgICAgICBleHBvcnRzLmRlZmF1bHQgPSBEZWZhdWx0UGxheWVyOwoKCiAgICAgICAgIF93aW5kb3cyLmRlZmF1bHQuRGVmYXVsdFBsYXllciA9IERlZmF1bHRQbGF5ZXI7CgogICAgIH0sIHsgIjMiOiAzIH1dLCAxODogW2Z1bmN0aW9uIChfZGVyZXFfLCBtb2R1bGUsIGV4cG9ydHMpIHsKICAgICAgICAgJ3VzZSBzdHJpY3QnOwoKICAgICAgICAgdmFyIF93aW5kb3cgPSBfZGVyZXFfKDMpOwoKICAgICAgICAgdmFyIF93aW5kb3cyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2luZG93KTsKCiAgICAgICAgIHZhciBfbWVqcyA9IF9kZXJlcV8oNyk7CgogICAgICAgICB2YXIgX21lanMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbWVqcyk7CgogICAgICAgICB2YXIgX3BsYXllciA9IF9kZXJlcV8oMTYpOwoKICAgICAgICAgdmFyIF9wbGF5ZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfcGxheWVyKTsKCiAgICAgICAgIGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgogICAgICAgICBpZiAodHlwZW9mIGpRdWVyeSAhPT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICAgICAgIF9tZWpzMi5kZWZhdWx0LiQgPSBqUXVlcnk7CiAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIFplcHRvICE9PSAndW5kZWZpbmVkJykgewogICAgICAgICAgICAgX21lanMyLmRlZmF1bHQuJCA9IFplcHRvOwogICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBlbmRlciAhPT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICAgICAgIF9tZWpzMi5kZWZhdWx0LiQgPSBlbmRlcjsKICAgICAgICAgfQoKICAgICAgICAgKGZ1bmN0aW9uICgkKSB7CiAgICAgICAgICAgICBpZiAodHlwZW9mICQgIT09ICd1bmRlZmluZWQnKSB7CiAgICAgICAgICAgICAgICAgJC5mbi5tZWRpYWVsZW1lbnRwbGF5ZXIgPSBmdW5jdGlvbiAob3B0aW9ucykgewogICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucyA9PT0gZmFsc2UpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBsYXllciA9ICQodGhpcykuZGF0YSgnbWVkaWFlbGVtZW50cGxheWVyJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBsYXllcikgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXIucmVtb3ZlKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykucmVtb3ZlRGF0YSgnbWVkaWFlbGVtZW50cGxheWVyJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5kYXRhKCdtZWRpYWVsZW1lbnRwbGF5ZXInLCBuZXcgX3BsYXllcjIuZGVmYXVsdCh0aGlzLCBvcHRpb25zKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpczsKICAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgICAkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICQoJy4nICsgX21lanMyLmRlZmF1bHQuTWVwRGVmYXVsdHMuY2xhc3NQcmVmaXggKyAncGxheWVyJykubWVkaWFlbGVtZW50cGxheWVyKCk7CiAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICB9CiAgICAgICAgIH0pKF9tZWpzMi5kZWZhdWx0LiQpOwoKICAgICB9LCB7ICIxNiI6IDE2LCAiMyI6IDMsICI3IjogNyB9XSwgMTk6IFtmdW5jdGlvbiAoX2RlcmVxXywgbW9kdWxlLCBleHBvcnRzKSB7CiAgICAgICAgICd1c2Ugc3RyaWN0JzsKCiAgICAgICAgIHZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAic3ltYm9sIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IHR5cGVvZiBvYmo7IH07CgogICAgICAgICB2YXIgX3dpbmRvdyA9IF9kZXJlcV8oMyk7CgogICAgICAgICB2YXIgX3dpbmRvdzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93aW5kb3cpOwoKICAgICAgICAgdmFyIF9tZWpzID0gX2RlcmVxXyg3KTsKCiAgICAgICAgIHZhciBfbWVqczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9tZWpzKTsKCiAgICAgICAgIHZhciBfcmVuZGVyZXIgPSBfZGVyZXFfKDgpOwoKICAgICAgICAgdmFyIF9nZW5lcmFsID0gX2RlcmVxXygyNyk7CgogICAgICAgICB2YXIgX21lZGlhID0gX2RlcmVxXygyOCk7CgogICAgICAgICB2YXIgX2NvbnN0YW50cyA9IF9kZXJlcV8oMjUpOwoKICAgICAgICAgdmFyIF9kb20gPSBfZGVyZXFfKDI2KTsKCiAgICAgICAgIGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgogICAgICAgICB2YXIgTmF0aXZlRGFzaCA9IHsKCiAgICAgICAgICAgICBwcm9taXNlOiBudWxsLAoKICAgICAgICAgICAgIGxvYWQ6IGZ1bmN0aW9uIGxvYWQoc2V0dGluZ3MpIHsKICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGRhc2hqcyAhPT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICAgICAgICAgICAgICAgTmF0aXZlRGFzaC5wcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTsKICAgICAgICAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICBOYXRpdmVEYXNoLl9jcmVhdGVQbGF5ZXIoc2V0dGluZ3MpOwogICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICBzZXR0aW5ncy5vcHRpb25zLnBhdGggPSB0eXBlb2Ygc2V0dGluZ3Mub3B0aW9ucy5wYXRoID09PSAnc3RyaW5nJyA/IHNldHRpbmdzLm9wdGlvbnMucGF0aCA6ICdodHRwczovL2Nkbi5kYXNoanMub3JnL2xhdGVzdC9kYXNoLmFsbC5taW4uanMnOwoKICAgICAgICAgICAgICAgICAgICAgTmF0aXZlRGFzaC5wcm9taXNlID0gTmF0aXZlRGFzaC5wcm9taXNlIHx8ICgwLCBfZG9tLmxvYWRTY3JpcHQpKHNldHRpbmdzLm9wdGlvbnMucGF0aCk7CiAgICAgICAgICAgICAgICAgICAgIE5hdGl2ZURhc2gucHJvbWlzZS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIE5hdGl2ZURhc2guX2NyZWF0ZVBsYXllcihzZXR0aW5ncyk7CiAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgcmV0dXJuIE5hdGl2ZURhc2gucHJvbWlzZTsKICAgICAgICAgICAgIH0sCgogICAgICAgICAgICAgX2NyZWF0ZVBsYXllcjogZnVuY3Rpb24gX2NyZWF0ZVBsYXllcihzZXR0aW5ncykgewogICAgICAgICAgICAgICAgIHZhciBwbGF5ZXIgPSBkYXNoanMuTWVkaWFQbGF5ZXIoKS5jcmVhdGUoKTsKICAgICAgICAgICAgICAgICBfd2luZG93Mi5kZWZhdWx0WydfX3JlYWR5X18nICsgc2V0dGluZ3MuaWRdKHBsYXllcik7CiAgICAgICAgICAgICAgICAgcmV0dXJuIHBsYXllcjsKICAgICAgICAgICAgIH0KICAgICAgICAgfTsKCiAgICAgICAgIHZhciBEYXNoTmF0aXZlUmVuZGVyZXIgPSB7CiAgICAgICAgICAgICBuYW1lOiAnbmF0aXZlX2Rhc2gnLAogICAgICAgICAgICAgb3B0aW9uczogewogICAgICAgICAgICAgICAgIHByZWZpeDogJ25hdGl2ZV9kYXNoJywKICAgICAgICAgICAgICAgICBkYXNoOiB7CiAgICAgICAgICAgICAgICAgICAgIHBhdGg6ICdodHRwczovL2Nkbi5kYXNoanMub3JnL2xhdGVzdC9kYXNoLmFsbC5taW4uanMnLAogICAgICAgICAgICAgICAgICAgICBkZWJ1ZzogZmFsc2UsCiAgICAgICAgICAgICAgICAgICAgIGRybToge30sCgogICAgICAgICAgICAgICAgICAgICByb2J1c3RuZXNzTGV2ZWw6ICcnCiAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgfSwKCiAgICAgICAgICAgICBjYW5QbGF5VHlwZTogZnVuY3Rpb24gY2FuUGxheVR5cGUodHlwZSkgewogICAgICAgICAgICAgICAgIHJldHVybiBfY29uc3RhbnRzLkhBU19NU0UgJiYgWydhcHBsaWNhdGlvbi9kYXNoK3htbCddLmluZGV4T2YodHlwZS50b0xvd2VyQ2FzZSgpKSA+IC0xOwogICAgICAgICAgICAgfSwKCiAgICAgICAgICAgICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZShtZWRpYUVsZW1lbnQsIG9wdGlvbnMsIG1lZGlhRmlsZXMpIHsKCiAgICAgICAgICAgICAgICAgdmFyIG9yaWdpbmFsTm9kZSA9IG1lZGlhRWxlbWVudC5vcmlnaW5hbE5vZGUsCiAgICAgICAgICAgICAgICAgICAgIGlkID0gbWVkaWFFbGVtZW50LmlkICsgJ18nICsgb3B0aW9ucy5wcmVmaXgsCiAgICAgICAgICAgICAgICAgICAgIGF1dG9wbGF5ID0gb3JpZ2luYWxOb2RlLmF1dG9wbGF5LAogICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbiA9IG9yaWdpbmFsTm9kZS5jaGlsZHJlbjsKCiAgICAgICAgICAgICAgICAgdmFyIG5vZGUgPSBudWxsLAogICAgICAgICAgICAgICAgICAgICBkYXNoUGxheWVyID0gbnVsbDsKCiAgICAgICAgICAgICAgICAgb3JpZ2luYWxOb2RlLnJlbW92ZUF0dHJpYnV0ZSgndHlwZScpOwogICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCB0b3RhbCA9IGNoaWxkcmVuLmxlbmd0aDsgaSA8IHRvdGFsOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW5baV0ucmVtb3ZlQXR0cmlidXRlKCd0eXBlJyk7CiAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICBub2RlID0gb3JpZ2luYWxOb2RlLmNsb25lTm9kZSh0cnVlKTsKICAgICAgICAgICAgICAgICBvcHRpb25zID0gT2JqZWN0LmFzc2lnbihvcHRpb25zLCBtZWRpYUVsZW1lbnQub3B0aW9ucyk7CgogICAgICAgICAgICAgICAgIHZhciBwcm9wcyA9IF9tZWpzMi5kZWZhdWx0Lmh0bWw1bWVkaWEucHJvcGVydGllcywKICAgICAgICAgICAgICAgICAgICAgZXZlbnRzID0gX21lanMyLmRlZmF1bHQuaHRtbDVtZWRpYS5ldmVudHMuY29uY2F0KFsnY2xpY2snLCAnbW91c2VvdmVyJywgJ21vdXNlb3V0J10pLmZpbHRlcihmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUgIT09ICdlcnJvcic7CiAgICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgICBhdHRhY2hOYXRpdmVFdmVudHMgPSBmdW5jdGlvbiBhdHRhY2hOYXRpdmVFdmVudHMoZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV2ZW50ID0gKDAsIF9nZW5lcmFsLmNyZWF0ZUV2ZW50KShlLnR5cGUsIG1lZGlhRWxlbWVudCk7CiAgICAgICAgICAgICAgICAgICAgICAgICBtZWRpYUVsZW1lbnQuZGlzcGF0Y2hFdmVudChldmVudCk7CiAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgIGFzc2lnbkdldHRlcnNTZXR0ZXJzID0gZnVuY3Rpb24gYXNzaWduR2V0dGVyc1NldHRlcnMocHJvcE5hbWUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjYXBOYW1lID0gJycgKyBwcm9wTmFtZS5zdWJzdHJpbmcoMCwgMSkudG9VcHBlckNhc2UoKSArIHByb3BOYW1lLnN1YnN0cmluZygxKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICBub2RlWydnZXQnICsgY2FwTmFtZV0gPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhc2hQbGF5ZXIgIT09IG51bGwgPyBub2RlW3Byb3BOYW1lXSA6IG51bGw7CiAgICAgICAgICAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVbJ3NldCcgKyBjYXBOYW1lXSA9IGZ1bmN0aW9uICh2YWx1ZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfbWVqczIuZGVmYXVsdC5odG1sNW1lZGlhLnJlYWRPbmx5UHJvcGVydGllcy5pbmRleE9mKHByb3BOYW1lKSA9PT0gLTEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByb3BOYW1lID09PSAnc3JjJykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNvdXJjZSA9ICh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHZhbHVlKSkgPT09ICdvYmplY3QnICYmIHZhbHVlLnNyYyA/IHZhbHVlLnNyYyA6IHZhbHVlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZVtwcm9wTmFtZV0gPSBzb3VyY2U7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGFzaFBsYXllciAhPT0gbnVsbCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhc2hQbGF5ZXIucmVzZXQoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF90b3RhbCA9IGV2ZW50cy5sZW5ndGg7IF9pIDwgX3RvdGFsOyBfaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudHNbX2ldLCBhdHRhY2hOYXRpdmVFdmVudHMpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXNoUGxheWVyID0gTmF0aXZlRGFzaC5fY3JlYXRlUGxheWVyKHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogb3B0aW9ucy5kYXNoLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogaWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlICYmICh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHZhbHVlKSkgPT09ICdvYmplY3QnICYmIF90eXBlb2YodmFsdWUuZHJtKSA9PT0gJ29iamVjdCcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGFzaFBsYXllci5zZXRQcm90ZWN0aW9uRGF0YSh2YWx1ZS5kcm0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoKDAsIF9nZW5lcmFsLmlzU3RyaW5nKShvcHRpb25zLmRhc2gucm9idXN0bmVzc0xldmVsKSAmJiBvcHRpb25zLmRhc2gucm9idXN0bmVzc0xldmVsKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXNoUGxheWVyLmdldFByb3RlY3Rpb25Db250cm9sbGVyKCkuc2V0Um9idXN0bmVzc0xldmVsKG9wdGlvbnMuZGFzaC5yb2J1c3RuZXNzTGV2ZWwpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhc2hQbGF5ZXIuYXR0YWNoU291cmNlKHNvdXJjZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGF1dG9wbGF5KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhc2hQbGF5ZXIucGxheSgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVbcHJvcE5hbWVdID0gdmFsdWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgICBmb3IgKHZhciBfaTIgPSAwLCBfdG90YWwyID0gcHJvcHMubGVuZ3RoOyBfaTIgPCBfdG90YWwyOyBfaTIrKykgewogICAgICAgICAgICAgICAgICAgICBhc3NpZ25HZXR0ZXJzU2V0dGVycyhwcm9wc1tfaTJdKTsKICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgIF93aW5kb3cyLmRlZmF1bHRbJ19fcmVhZHlfXycgKyBpZF0gPSBmdW5jdGlvbiAoX2Rhc2hQbGF5ZXIpIHsKICAgICAgICAgICAgICAgICAgICAgbWVkaWFFbGVtZW50LmRhc2hQbGF5ZXIgPSBkYXNoUGxheWVyID0gX2Rhc2hQbGF5ZXI7CgogICAgICAgICAgICAgICAgICAgICB2YXIgZGFzaEV2ZW50cyA9IGRhc2hqcy5NZWRpYVBsYXllci5ldmVudHMsCiAgICAgICAgICAgICAgICAgICAgICAgICBhc3NpZ25FdmVudHMgPSBmdW5jdGlvbiBhc3NpZ25FdmVudHMoZXZlbnROYW1lKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50TmFtZSA9PT0gJ2xvYWRlZG1ldGFkYXRhJykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXNoUGxheWVyLmluaXRpYWxpemUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGFzaFBsYXllci5hdHRhY2hWaWV3KG5vZGUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXNoUGxheWVyLnNldEF1dG9QbGF5KGZhbHNlKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfdHlwZW9mKG9wdGlvbnMuZGFzaC5kcm0pID09PSAnb2JqZWN0JyAmJiAhX21lanMyLmRlZmF1bHQuVXRpbHMuaXNPYmplY3RFbXB0eShvcHRpb25zLmRhc2guZHJtKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGFzaFBsYXllci5zZXRQcm90ZWN0aW9uRGF0YShvcHRpb25zLmRhc2guZHJtKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoMCwgX2dlbmVyYWwuaXNTdHJpbmcpKG9wdGlvbnMuZGFzaC5yb2J1c3RuZXNzTGV2ZWwpICYmIG9wdGlvbnMuZGFzaC5yb2J1c3RuZXNzTGV2ZWwpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXNoUGxheWVyLmdldFByb3RlY3Rpb25Db250cm9sbGVyKCkuc2V0Um9idXN0bmVzc0xldmVsKG9wdGlvbnMuZGFzaC5yb2J1c3RuZXNzTGV2ZWwpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhc2hQbGF5ZXIuYXR0YWNoU291cmNlKG5vZGUuZ2V0U3JjKCkpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgYXR0YWNoTmF0aXZlRXZlbnRzKTsKICAgICAgICAgICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfaTMgPSAwLCBfdG90YWwzID0gZXZlbnRzLmxlbmd0aDsgX2kzIDwgX3RvdGFsMzsgX2kzKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgIGFzc2lnbkV2ZW50cyhldmVudHNbX2kzXSk7CiAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgIHZhciBhc3NpZ25NZGFzaEV2ZW50cyA9IGZ1bmN0aW9uIGFzc2lnbk1kYXNoRXZlbnRzKGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlLnR5cGUudG9Mb3dlckNhc2UoKSA9PT0gJ2Vycm9yJykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lZGlhRWxlbWVudC5nZW5lcmF0ZUVycm9yKGUubWVzc2FnZSwgbm9kZS5zcmMpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfZXZlbnQgPSAoMCwgX2dlbmVyYWwuY3JlYXRlRXZlbnQpKGUudHlwZSwgbWVkaWFFbGVtZW50KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfZXZlbnQuZGF0YSA9IGU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVkaWFFbGVtZW50LmRpc3BhdGNoRXZlbnQoX2V2ZW50KTsKICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGV2ZW50VHlwZSBpbiBkYXNoRXZlbnRzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGFzaEV2ZW50cy5oYXNPd25Qcm9wZXJ0eShldmVudFR5cGUpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGFzaFBsYXllci5vbihkYXNoRXZlbnRzW2V2ZW50VHlwZV0sIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhc3NpZ25NZGFzaEV2ZW50cyhlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgIGlmIChtZWRpYUZpbGVzICYmIG1lZGlhRmlsZXMubGVuZ3RoID4gMCkgewogICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfaTQgPSAwLCBfdG90YWw0ID0gbWVkaWFGaWxlcy5sZW5ndGg7IF9pNCA8IF90b3RhbDQ7IF9pNCsrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3JlbmRlcmVyLnJlbmRlcmVyLnJlbmRlcmVyc1tvcHRpb25zLnByZWZpeF0uY2FuUGxheVR5cGUobWVkaWFGaWxlc1tfaTRdLnR5cGUpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoJ3NyYycsIG1lZGlhRmlsZXNbX2k0XS5zcmMpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbWVkaWFGaWxlc1tfaTRdLmRybSAhPT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5kYXNoLmRybSA9IG1lZGlhRmlsZXNbX2k0XS5kcm07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICBub2RlLnNldEF0dHJpYnV0ZSgnaWQnLCBpZCk7CgogICAgICAgICAgICAgICAgIG9yaWdpbmFsTm9kZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShub2RlLCBvcmlnaW5hbE5vZGUpOwogICAgICAgICAgICAgICAgIG9yaWdpbmFsTm9kZS5hdXRvcGxheSA9IGZhbHNlOwogICAgICAgICAgICAgICAgIG9yaWdpbmFsTm9kZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOwoKICAgICAgICAgICAgICAgICBub2RlLnNldFNpemUgPSBmdW5jdGlvbiAod2lkdGgsIGhlaWdodCkgewogICAgICAgICAgICAgICAgICAgICBub2RlLnN0eWxlLndpZHRoID0gd2lkdGggKyAncHgnOwogICAgICAgICAgICAgICAgICAgICBub2RlLnN0eWxlLmhlaWdodCA9IGhlaWdodCArICdweCc7CiAgICAgICAgICAgICAgICAgICAgIHJldHVybiBub2RlOwogICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgIG5vZGUuaGlkZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgbm9kZS5wYXVzZSgpOwogICAgICAgICAgICAgICAgICAgICBub2RlLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CiAgICAgICAgICAgICAgICAgICAgIHJldHVybiBub2RlOwogICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgIG5vZGUuc2hvdyA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgbm9kZS5zdHlsZS5kaXNwbGF5ID0gJyc7CiAgICAgICAgICAgICAgICAgICAgIHJldHVybiBub2RlOwogICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgIG5vZGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgaWYgKGRhc2hQbGF5ZXIgIT09IG51bGwpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIGRhc2hQbGF5ZXIucmVzZXQoKTsKICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgIHZhciBldmVudCA9ICgwLCBfZ2VuZXJhbC5jcmVhdGVFdmVudCkoJ3JlbmRlcmVycmVhZHknLCBub2RlKTsKICAgICAgICAgICAgICAgICBtZWRpYUVsZW1lbnQuZGlzcGF0Y2hFdmVudChldmVudCk7CgogICAgICAgICAgICAgICAgIG1lZGlhRWxlbWVudC5wcm9taXNlcy5wdXNoKE5hdGl2ZURhc2gubG9hZCh7CiAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IG9wdGlvbnMuZGFzaCwKICAgICAgICAgICAgICAgICAgICAgaWQ6IGlkCiAgICAgICAgICAgICAgICAgfSkpOwoKICAgICAgICAgICAgICAgICByZXR1cm4gbm9kZTsKICAgICAgICAgICAgIH0KICAgICAgICAgfTsKCiAgICAgICAgIF9tZWRpYS50eXBlQ2hlY2tzLnB1c2goZnVuY3Rpb24gKHVybCkgewogICAgICAgICAgICAgcmV0dXJuIH51cmwudG9Mb3dlckNhc2UoKS5pbmRleE9mKCcubXBkJykgPyAnYXBwbGljYXRpb24vZGFzaCt4bWwnIDogbnVsbDsKICAgICAgICAgfSk7CgogICAgICAgICBfcmVuZGVyZXIucmVuZGVyZXIuYWRkKERhc2hOYXRpdmVSZW5kZXJlcik7CgogICAgIH0sIHsgIjI1IjogMjUsICIyNiI6IDI2LCAiMjciOiAyNywgIjI4IjogMjgsICIzIjogMywgIjciOiA3LCAiOCI6IDggfV0sIDIwOiBbZnVuY3Rpb24gKF9kZXJlcV8sIG1vZHVsZSwgZXhwb3J0cykgewogICAgICAgICAndXNlIHN0cmljdCc7CgogICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgICAgICAgICAgICB2YWx1ZTogdHJ1ZQogICAgICAgICB9KTsKICAgICAgICAgZXhwb3J0cy5QbHVnaW5EZXRlY3RvciA9IHVuZGVmaW5lZDsKCiAgICAgICAgIHZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSAic3ltYm9sIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gImZ1bmN0aW9uIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyAic3ltYm9sIiA6IHR5cGVvZiBvYmo7IH07CgogICAgICAgICB2YXIgX3dpbmRvdyA9IF9kZXJlcV8oMyk7CgogICAgICAgICB2YXIgX3dpbmRvdzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93aW5kb3cpOwoKICAgICAgICAgdmFyIF9kb2N1bWVudCA9IF9kZXJlcV8oMik7CgogICAgICAgICB2YXIgX2RvY3VtZW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RvY3VtZW50KTsKCiAgICAgICAgIHZhciBfbWVqcyA9IF9kZXJlcV8oNyk7CgogICAgICAgICB2YXIgX21lanMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbWVqcyk7CgogICAgICAgICB2YXIgX2kxOG4gPSBfZGVyZXFfKDUpOwoKICAgICAgICAgdmFyIF9pMThuMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2kxOG4pOwoKICAgICAgICAgdmFyIF9yZW5kZXJlciA9IF9kZXJlcV8oOCk7CgogICAgICAgICB2YXIgX2dlbmVyYWwgPSBfZGVyZXFfKDI3KTsKCiAgICAgICAgIHZhciBfY29uc3RhbnRzID0gX2RlcmVxXygyNSk7CgogICAgICAgICB2YXIgX21lZGlhID0gX2RlcmVxXygyOCk7CgogICAgICAgICBmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKICAgICAgICAgdmFyIFBsdWdpbkRldGVjdG9yID0gZXhwb3J0cy5QbHVnaW5EZXRlY3RvciA9IHsKICAgICAgICAgICAgIHBsdWdpbnM6IFtdLAoKICAgICAgICAgICAgIGhhc1BsdWdpblZlcnNpb246IGZ1bmN0aW9uIGhhc1BsdWdpblZlcnNpb24ocGx1Z2luLCB2KSB7CiAgICAgICAgICAgICAgICAgdmFyIHB2ID0gUGx1Z2luRGV0ZWN0b3IucGx1Z2luc1twbHVnaW5dOwogICAgICAgICAgICAgICAgIHZbMV0gPSB2WzFdIHx8IDA7CiAgICAgICAgICAgICAgICAgdlsyXSA9IHZbMl0gfHwgMDsKICAgICAgICAgICAgICAgICByZXR1cm4gcHZbMF0gPiB2WzBdIHx8IHB2WzBdID09PSB2WzBdICYmIHB2WzFdID4gdlsxXSB8fCBwdlswXSA9PT0gdlswXSAmJiBwdlsxXSA9PT0gdlsxXSAmJiBwdlsyXSA+PSB2WzJdOwogICAgICAgICAgICAgfSwKCiAgICAgICAgICAgICBhZGRQbHVnaW46IGZ1bmN0aW9uIGFkZFBsdWdpbihwLCBwbHVnaW5OYW1lLCBtaW1lVHlwZSwgYWN0aXZlWCwgYXhEZXRlY3QpIHsKICAgICAgICAgICAgICAgICBQbHVnaW5EZXRlY3Rvci5wbHVnaW5zW3BdID0gUGx1Z2luRGV0ZWN0b3IuZGV0ZWN0UGx1Z2luKHBsdWdpbk5hbWUsIG1pbWVUeXBlLCBhY3RpdmVYLCBheERldGVjdCk7CiAgICAgICAgICAgICB9LAoKICAgICAgICAgICAgIGRldGVjdFBsdWdpbjogZnVuY3Rpb24gZGV0ZWN0UGx1Z2luKHBsdWdpbk5hbWUsIG1pbWVUeXBlLCBhY3RpdmVYLCBheERldGVjdCkgewoKICAgICAgICAgICAgICAgICB2YXIgdmVyc2lvbiA9IFswLCAwLCAwXSwKICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb24gPSB2b2lkIDAsCiAgICAgICAgICAgICAgICAgICAgIGF4ID0gdm9pZCAwOwoKICAgICAgICAgICAgICAgICBpZiAoX2NvbnN0YW50cy5OQVYucGx1Z2lucyAhPT0gbnVsbCAmJiBfY29uc3RhbnRzLk5BVi5wbHVnaW5zICE9PSB1bmRlZmluZWQgJiYgX3R5cGVvZihfY29uc3RhbnRzLk5BVi5wbHVnaW5zW3BsdWdpbk5hbWVdKSA9PT0gJ29iamVjdCcpIHsKICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb24gPSBfY29uc3RhbnRzLk5BVi5wbHVnaW5zW3BsdWdpbk5hbWVdLmRlc2NyaXB0aW9uOwogICAgICAgICAgICAgICAgICAgICBpZiAoZGVzY3JpcHRpb24gJiYgISh0eXBlb2YgX2NvbnN0YW50cy5OQVYubWltZVR5cGVzICE9PSAndW5kZWZpbmVkJyAmJiBfY29uc3RhbnRzLk5BVi5taW1lVHlwZXNbbWltZVR5cGVdICYmICFfY29uc3RhbnRzLk5BVi5taW1lVHlwZXNbbWltZVR5cGVdLmVuYWJsZWRQbHVnaW4pKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICB2ZXJzaW9uID0gZGVzY3JpcHRpb24ucmVwbGFjZShwbHVnaW5OYW1lLCAnJykucmVwbGFjZSgvXlxzKy8sICcnKS5yZXBsYWNlKC9cc3IvZ2ksICcuJykuc3BsaXQoJy4nKTsKICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCB0b3RhbCA9IHZlcnNpb24ubGVuZ3RoOyBpIDwgdG90YWw7IGkrKykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlcnNpb25baV0gPSBwYXJzZUludCh2ZXJzaW9uW2ldLm1hdGNoKC9cZCsvKSwgMTApOwogICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChfd2luZG93Mi5kZWZhdWx0LkFjdGl2ZVhPYmplY3QgIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICAgYXggPSBuZXcgQWN0aXZlWE9iamVjdChhY3RpdmVYKTsKICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChheCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlcnNpb24gPSBheERldGVjdChheCk7CiAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKCiAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgcmV0dXJuIHZlcnNpb247CiAgICAgICAgICAgICB9CiAgICAgICAgIH07CgogICAgICAgICBQbHVnaW5EZXRlY3Rvci5hZGRQbHVnaW4oJ2ZsYXNoJywgJ1Nob2Nrd2F2ZSBGbGFzaCcsICdhcHBsaWNhdGlvbi94LXNob2Nrd2F2ZS1mbGFzaCcsICdTaG9ja3dhdmVGbGFzaC5TaG9ja3dhdmVGbGFzaCcsIGZ1bmN0aW9uIChheCkgewogICAgICAgICAgICAgdmFyIHZlcnNpb24gPSBbXSwKICAgICAgICAgICAgICAgICBkID0gYXguR2V0VmFyaWFibGUoIiR2ZXJzaW9uIik7CgogICAgICAgICAgICAgaWYgKGQpIHsKICAgICAgICAgICAgICAgICBkID0gZC5zcGxpdCgiICIpWzFdLnNwbGl0KCIsIik7CiAgICAgICAgICAgICAgICAgdmVyc2lvbiA9IFtwYXJzZUludChkWzBdLCAxMCksIHBhcnNlSW50KGRbMV0sIDEwKSwgcGFyc2VJbnQoZFsyXSwgMTApXTsKICAgICAgICAgICAgIH0KICAgICAgICAgICAgIHJldHVybiB2ZXJzaW9uOwogICAgICAgICB9KTsKCiAgICAgICAgIHZhciBGbGFzaE1lZGlhRWxlbWVudFJlbmRlcmVyID0gewogICAgICAgICAgICAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUobWVkaWFFbGVtZW50LCBvcHRpb25zLCBtZWRpYUZpbGVzKSB7CgogICAgICAgICAgICAgICAgIHZhciBmbGFzaCA9IHt9OwogICAgICAgICAgICAgICAgIHZhciBpc0FjdGl2ZSA9IGZhbHNlOwoKICAgICAgICAgICAgICAgICBmbGFzaC5vcHRpb25zID0gb3B0aW9uczsKICAgICAgICAgICAgICAgICBmbGFzaC5pZCA9IG1lZGlhRWxlbWVudC5pZCArICdfJyArIGZsYXNoLm9wdGlvbnMucHJlZml4OwogICAgICAgICAgICAgICAgIGZsYXNoLm1lZGlhRWxlbWVudCA9IG1lZGlhRWxlbWVudDsKICAgICAgICAgICAgICAgICBmbGFzaC5mbGFzaFN0YXRlID0ge307CiAgICAgICAgICAgICAgICAgZmxhc2guZmxhc2hBcGkgPSBudWxsOwogICAgICAgICAgICAgICAgIGZsYXNoLmZsYXNoQXBpU3RhY2sgPSBbXTsKCiAgICAgICAgICAgICAgICAgdmFyIHByb3BzID0gX21lanMyLmRlZmF1bHQuaHRtbDVtZWRpYS5wcm9wZXJ0aWVzLAogICAgICAgICAgICAgICAgICAgICBhc3NpZ25HZXR0ZXJzU2V0dGVycyA9IGZ1bmN0aW9uIGFzc2lnbkdldHRlcnNTZXR0ZXJzKHByb3BOYW1lKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICBmbGFzaC5mbGFzaFN0YXRlW3Byb3BOYW1lXSA9IG51bGw7CgogICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNhcE5hbWUgPSAnJyArIHByb3BOYW1lLnN1YnN0cmluZygwLCAxKS50b1VwcGVyQ2FzZSgpICsgcHJvcE5hbWUuc3Vic3RyaW5nKDEpOwoKICAgICAgICAgICAgICAgICAgICAgICAgIGZsYXNoWydnZXQnICsgY2FwTmFtZV0gPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZsYXNoLmZsYXNoQXBpICE9PSBudWxsKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZmxhc2guZmxhc2hBcGlbJ2dldF8nICsgcHJvcE5hbWVdID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBmbGFzaC5mbGFzaEFwaVsnZ2V0XycgKyBwcm9wTmFtZV0oKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJvcE5hbWUgPT09ICdidWZmZXJlZCcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydDogZnVuY3Rpb24gc3RhcnQoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kOiBmdW5jdGlvbiBlbmQoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlbmd0aDogMQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgICAgICAgICAgZmxhc2hbJ3NldCcgKyBjYXBOYW1lXSA9IGZ1bmN0aW9uICh2YWx1ZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcm9wTmFtZSA9PT0gJ3NyYycpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSAoMCwgX21lZGlhLmFic29sdXRpemVVcmwpKHZhbHVlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmbGFzaC5mbGFzaEFwaSAhPT0gbnVsbCAmJiBmbGFzaC5mbGFzaEFwaVsnc2V0XycgKyBwcm9wTmFtZV0gIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmxhc2guZmxhc2hBcGlbJ3NldF8nICsgcHJvcE5hbWVdKHZhbHVlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkgewoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZsYXNoLmZsYXNoQXBpU3RhY2sucHVzaCh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnc2V0JywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BOYW1lOiBwcm9wTmFtZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgdG90YWwgPSBwcm9wcy5sZW5ndGg7IGkgPCB0b3RhbDsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgIGFzc2lnbkdldHRlcnNTZXR0ZXJzKHByb3BzW2ldKTsKICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgIHZhciBtZXRob2RzID0gX21lanMyLmRlZmF1bHQuaHRtbDVtZWRpYS5tZXRob2RzLAogICAgICAgICAgICAgICAgICAgICBhc3NpZ25NZXRob2RzID0gZnVuY3Rpb24gYXNzaWduTWV0aG9kcyhtZXRob2ROYW1lKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICBmbGFzaFttZXRob2ROYW1lXSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNBY3RpdmUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZsYXNoLmZsYXNoQXBpICE9PSBudWxsKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmxhc2guZmxhc2hBcGlbJ2ZpcmVfJyArIG1ldGhvZE5hbWVdKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmxhc2guZmxhc2hBcGlbJ2ZpcmVfJyArIG1ldGhvZE5hbWVdKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkgewoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZsYXNoLmZsYXNoQXBpU3RhY2sucHVzaCh7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2NhbGwnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZE5hbWU6IG1ldGhvZE5hbWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICBtZXRob2RzLnB1c2goJ3N0b3AnKTsKICAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF90b3RhbCA9IG1ldGhvZHMubGVuZ3RoOyBfaSA8IF90b3RhbDsgX2krKykgewogICAgICAgICAgICAgICAgICAgICBhc3NpZ25NZXRob2RzKG1ldGhvZHNbX2ldKTsKICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgIHZhciBpbml0RXZlbnRzID0gWydyZW5kZXJlcnJlYWR5J107CgogICAgICAgICAgICAgICAgIGZvciAodmFyIF9pMiA9IDAsIF90b3RhbDIgPSBpbml0RXZlbnRzLmxlbmd0aDsgX2kyIDwgX3RvdGFsMjsgX2kyKyspIHsKICAgICAgICAgICAgICAgICAgICAgdmFyIGV2ZW50ID0gKDAsIF9nZW5lcmFsLmNyZWF0ZUV2ZW50KShpbml0RXZlbnRzW19pMl0sIGZsYXNoKTsKICAgICAgICAgICAgICAgICAgICAgbWVkaWFFbGVtZW50LmRpc3BhdGNoRXZlbnQoZXZlbnQpOwogICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgX3dpbmRvdzIuZGVmYXVsdFsnX19yZWFkeV9fJyArIGZsYXNoLmlkXSA9IGZ1bmN0aW9uICgpIHsKCiAgICAgICAgICAgICAgICAgICAgIGZsYXNoLmZsYXNoUmVhZHkgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICBmbGFzaC5mbGFzaEFwaSA9IF9kb2N1bWVudDIuZGVmYXVsdC5nZXRFbGVtZW50QnlJZCgnX18nICsgZmxhc2guaWQpOwoKICAgICAgICAgICAgICAgICAgICAgaWYgKGZsYXNoLmZsYXNoQXBpU3RhY2subGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfaTMgPSAwLCBfdG90YWwzID0gZmxhc2guZmxhc2hBcGlTdGFjay5sZW5ndGg7IF9pMyA8IF90b3RhbDM7IF9pMysrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0YWNrSXRlbSA9IGZsYXNoLmZsYXNoQXBpU3RhY2tbX2kzXTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YWNrSXRlbS50eXBlID09PSAnc2V0JykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcHJvcE5hbWUgPSBzdGFja0l0ZW0ucHJvcE5hbWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXBOYW1lID0gJycgKyBwcm9wTmFtZS5zdWJzdHJpbmcoMCwgMSkudG9VcHBlckNhc2UoKSArIHByb3BOYW1lLnN1YnN0cmluZygxKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZsYXNoWydzZXQnICsgY2FwTmFtZV0oc3RhY2tJdGVtLnZhbHVlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHN0YWNrSXRlbS50eXBlID09PSAnY2FsbCcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmxhc2hbc3RhY2tJdGVtLm1ldGhvZE5hbWVdKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICAgX3dpbmRvdzIuZGVmYXVsdFsnX19ldmVudF9fJyArIGZsYXNoLmlkXSA9IGZ1bmN0aW9uIChldmVudE5hbWUsIG1lc3NhZ2UpIHsKICAgICAgICAgICAgICAgICAgICAgdmFyIGV2ZW50ID0gKDAsIF9nZW5lcmFsLmNyZWF0ZUV2ZW50KShldmVudE5hbWUsIGZsYXNoKTsKICAgICAgICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2UpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuZGF0YSA9IEpTT04ucGFyc2UobWVzc2FnZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuZGV0YWlscy5kYXRhID0gSlNPTi5wYXJzZShtZXNzYWdlKTsKICAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudC5tZXNzYWdlID0gbWVzc2FnZTsKICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgZmxhc2gubWVkaWFFbGVtZW50LmRpc3BhdGNoRXZlbnQoZXZlbnQpOwogICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgIGZsYXNoLmZsYXNoV3JhcHBlciA9IF9kb2N1bWVudDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKCiAgICAgICAgICAgICAgICAgaWYgKFsnYWx3YXlzJywgJ3NhbWVEb21haW4nXS5pbmRleE9mKGZsYXNoLm9wdGlvbnMuc2hpbVNjcmlwdEFjY2VzcykgPT09IC0xKSB7CiAgICAgICAgICAgICAgICAgICAgIGZsYXNoLm9wdGlvbnMuc2hpbVNjcmlwdEFjY2VzcyA9ICdzYW1lRG9tYWluJzsKICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgIHZhciBhdXRvcGxheSA9IG1lZGlhRWxlbWVudC5vcmlnaW5hbE5vZGUuYXV0b3BsYXksCiAgICAgICAgICAgICAgICAgICAgIGZsYXNoVmFycyA9IFsndWlkPScgKyBmbGFzaC5pZCwgJ2F1dG9wbGF5PScgKyBhdXRvcGxheSwgJ2FsbG93U2NyaXB0QWNjZXNzPScgKyBmbGFzaC5vcHRpb25zLnNoaW1TY3JpcHRBY2Nlc3MsICdwcmVsb2FkPScgKyAobWVkaWFFbGVtZW50Lm9yaWdpbmFsTm9kZS5nZXRBdHRyaWJ1dGUoJ3ByZWxvYWQnKSB8fCAnJyldLAogICAgICAgICAgICAgICAgICAgICBpc1ZpZGVvID0gbWVkaWFFbGVtZW50Lm9yaWdpbmFsTm9kZSAhPT0gbnVsbCAmJiBtZWRpYUVsZW1lbnQub3JpZ2luYWxOb2RlLnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ3ZpZGVvJywKICAgICAgICAgICAgICAgICAgICAgZmxhc2hIZWlnaHQgPSBpc1ZpZGVvID8gbWVkaWFFbGVtZW50Lm9yaWdpbmFsTm9kZS5oZWlnaHQgOiAxLAogICAgICAgICAgICAgICAgICAgICBmbGFzaFdpZHRoID0gaXNWaWRlbyA/IG1lZGlhRWxlbWVudC5vcmlnaW5hbE5vZGUud2lkdGggOiAxOwoKICAgICAgICAgICAgICAgICBpZiAobWVkaWFFbGVtZW50Lm9yaWdpbmFsTm9kZS5nZXRBdHRyaWJ1dGUoJ3NyYycpKSB7CiAgICAgICAgICAgICAgICAgICAgIGZsYXNoVmFycy5wdXNoKCdzcmM9JyArIG1lZGlhRWxlbWVudC5vcmlnaW5hbE5vZGUuZ2V0QXR0cmlidXRlKCdzcmMnKSk7CiAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICBpZiAoZmxhc2gub3B0aW9ucy5lbmFibGVQc2V1ZG9TdHJlYW1pbmcgPT09IHRydWUpIHsKICAgICAgICAgICAgICAgICAgICAgZmxhc2hWYXJzLnB1c2goJ3BzZXVkb3N0cmVhbXN0YXJ0PScgKyBmbGFzaC5vcHRpb25zLnBzZXVkb1N0cmVhbWluZ1N0YXJ0UXVlcnlQYXJhbSk7CiAgICAgICAgICAgICAgICAgICAgIGZsYXNoVmFycy5wdXNoKCdwc2V1ZG9zdHJlYW10eXBlPScgKyBmbGFzaC5vcHRpb25zLnBzZXVkb1N0cmVhbWluZ1R5cGUpOwogICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgaWYgKGZsYXNoLm9wdGlvbnMuc3RyZWFtRGVsaW1pdGVyKSB7CiAgICAgICAgICAgICAgICAgICAgIGZsYXNoVmFycy5wdXNoKCdzdHJlYW1kZWxpbWl0ZXI9JyArIGVuY29kZVVSSUNvbXBvbmVudChmbGFzaC5vcHRpb25zLnN0cmVhbURlbGltaXRlcikpOwogICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgaWYgKGZsYXNoLm9wdGlvbnMucHJveHlUeXBlKSB7CiAgICAgICAgICAgICAgICAgICAgIGZsYXNoVmFycy5wdXNoKCdwcm94eXR5cGU9JyArIGZsYXNoLm9wdGlvbnMucHJveHlUeXBlKTsKICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgIG1lZGlhRWxlbWVudC5hcHBlbmRDaGlsZChmbGFzaC5mbGFzaFdyYXBwZXIpOwogICAgICAgICAgICAgICAgIG1lZGlhRWxlbWVudC5vcmlnaW5hbE5vZGUuc3R5bGUuZGlzcGxheSA9ICdub25lJzsKCiAgICAgICAgICAgICAgICAgdmFyIHNldHRpbmdzID0gW107CgogICAgICAgICAgICAgICAgIGlmIChfY29uc3RhbnRzLklTX0lFIHx8IF9jb25zdGFudHMuSVNfRURHRSkgewogICAgICAgICAgICAgICAgICAgICB2YXIgc3BlY2lhbElFQ29udGFpbmVyID0gX2RvY3VtZW50Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOwogICAgICAgICAgICAgICAgICAgICBmbGFzaC5mbGFzaFdyYXBwZXIuYXBwZW5kQ2hpbGQoc3BlY2lhbElFQ29udGFpbmVyKTsKCiAgICAgICAgICAgICAgICAgICAgIGlmIChfY29uc3RhbnRzLklTX0VER0UpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHNldHRpbmdzID0gWyd0eXBlPSJhcHBsaWNhdGlvbi94LXNob2Nrd2F2ZS1mbGFzaCInLCAnZGF0YT0iJyArIGZsYXNoLm9wdGlvbnMucGx1Z2luUGF0aCArIGZsYXNoLm9wdGlvbnMuZmlsZW5hbWUgKyAnIicsICdpZD0iX18nICsgZmxhc2guaWQgKyAnIicsICd3aWR0aD0iJyArIGZsYXNoV2lkdGggKyAnIicsICdoZWlnaHQ9IicgKyBmbGFzaEhlaWdodCArICdcJyInXTsKICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHNldHRpbmdzID0gWydjbGFzc2lkPSJjbHNpZDpEMjdDREI2RS1BRTZELTExY2YtOTZCOC00NDQ1NTM1NDAwMDAiJywgJ2NvZGViYXNlPSIvL2Rvd25sb2FkLm1hY3JvbWVkaWEuY29tL3B1Yi9zaG9ja3dhdmUvY2Ficy9mbGFzaC9zd2ZsYXNoLmNhYiInLCAnaWQ9Il9fJyArIGZsYXNoLmlkICsgJyInLCAnd2lkdGg9IicgKyBmbGFzaFdpZHRoICsgJyInLCAnaGVpZ2h0PSInICsgZmxhc2hIZWlnaHQgKyAnIiddOwogICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICBpZiAoIWlzVmlkZW8pIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHNldHRpbmdzLnB1c2goJ3N0eWxlPSJjbGlwOiByZWN0KDAgMCAwIDApOyBwb3NpdGlvbjogYWJzb2x1dGU7IicpOwogICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICBzcGVjaWFsSUVDb250YWluZXIub3V0ZXJIVE1MID0gJzxvYmplY3QgJyArIHNldHRpbmdzLmpvaW4oJyAnKSArICc+JyArICgnPHBhcmFtIG5hbWU9Im1vdmllIiB2YWx1ZT0iJyArIGZsYXNoLm9wdGlvbnMucGx1Z2luUGF0aCArIGZsYXNoLm9wdGlvbnMuZmlsZW5hbWUgKyAnP3g9JyArIG5ldyBEYXRlKCkgKyAnIiAvPicpICsgKCc8cGFyYW0gbmFtZT0iZmxhc2h2YXJzIiB2YWx1ZT0iJyArIGZsYXNoVmFycy5qb2luKCcmYW1wOycpICsgJyIgLz4nKSArICc8cGFyYW0gbmFtZT0icXVhbGl0eSIgdmFsdWU9ImhpZ2giIC8+JyArICc8cGFyYW0gbmFtZT0iYmdjb2xvciIgdmFsdWU9IiMwMDAwMDAiIC8+JyArICc8cGFyYW0gbmFtZT0id21vZGUiIHZhbHVlPSJ0cmFuc3BhcmVudCIgLz4nICsgKCc8cGFyYW0gbmFtZT0iYWxsb3dTY3JpcHRBY2Nlc3MiIHZhbHVlPSInICsgZmxhc2gub3B0aW9ucy5zaGltU2NyaXB0QWNjZXNzICsgJyIgLz4nKSArICc8cGFyYW0gbmFtZT0iYWxsb3dGdWxsU2NyZWVuIiB2YWx1ZT0idHJ1ZSIgLz4nICsgKCc8ZGl2PicgKyBfaTE4bjIuZGVmYXVsdC50KCdtZWpzLmluc3RhbGwtZmxhc2gnKSArICc8L2Rpdj4nKSArICc8L29iamVjdD4nOwogICAgICAgICAgICAgICAgIH0gZWxzZSB7CgogICAgICAgICAgICAgICAgICAgICBzZXR0aW5ncyA9IFsnaWQ9Il9fJyArIGZsYXNoLmlkICsgJyInLCAnbmFtZT0iX18nICsgZmxhc2guaWQgKyAnIicsICdwbGF5PSJ0cnVlIicsICdsb29wPSJmYWxzZSInLCAncXVhbGl0eT0iaGlnaCInLCAnYmdjb2xvcj0iIzAwMDAwMCInLCAnd21vZGU9InRyYW5zcGFyZW50IicsICdhbGxvd1NjcmlwdEFjY2Vzcz0iJyArIGZsYXNoLm9wdGlvbnMuc2hpbVNjcmlwdEFjY2VzcyArICciJywgJ2FsbG93RnVsbFNjcmVlbj0idHJ1ZSInLCAndHlwZT0iYXBwbGljYXRpb24veC1zaG9ja3dhdmUtZmxhc2giJywgJ3BsdWdpbnNwYWdlPSIvL3d3dy5tYWNyb21lZGlhLmNvbS9nby9nZXRmbGFzaHBsYXllciInLCAnc3JjPSInICsgZmxhc2gub3B0aW9ucy5wbHVnaW5QYXRoICsgZmxhc2gub3B0aW9ucy5maWxlbmFtZSArICciJywgJ2ZsYXNodmFycz0iJyArIGZsYXNoVmFycy5qb2luKCcmJykgKyAnIiddOwoKICAgICAgICAgICAgICAgICAgICAgaWYgKGlzVmlkZW8pIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHNldHRpbmdzLnB1c2goJ3dpZHRoPSInICsgZmxhc2hXaWR0aCArICciJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5ncy5wdXNoKCdoZWlnaHQ9IicgKyBmbGFzaEhlaWdodCArICciJyk7CiAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICBzZXR0aW5ncy5wdXNoKCdzdHlsZT0icG9zaXRpb246IGZpeGVkOyBsZWZ0OiAtOTk5OWVtOyB0b3A6IC05OTk5ZW07IicpOwogICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICBmbGFzaC5mbGFzaFdyYXBwZXIuaW5uZXJIVE1MID0gJzxlbWJlZCAnICsgc2V0dGluZ3Muam9pbignICcpICsgJz4nOwogICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgZmxhc2guZmxhc2hOb2RlID0gZmxhc2guZmxhc2hXcmFwcGVyLmxhc3RDaGlsZDsKCiAgICAgICAgICAgICAgICAgZmxhc2guaGlkZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgaXNBY3RpdmUgPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgaWYgKGlzVmlkZW8pIHsKICAgICAgICAgICAgICAgICAgICAgICAgIGZsYXNoLmZsYXNoTm9kZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOwogICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICBmbGFzaC5zaG93ID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICBpc0FjdGl2ZSA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgIGlmIChpc1ZpZGVvKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICBmbGFzaC5mbGFzaE5vZGUuc3R5bGUuZGlzcGxheSA9ICcnOwogICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICBmbGFzaC5zZXRTaXplID0gZnVuY3Rpb24gKHdpZHRoLCBoZWlnaHQpIHsKICAgICAgICAgICAgICAgICAgICAgZmxhc2guZmxhc2hOb2RlLnN0eWxlLndpZHRoID0gd2lkdGggKyAncHgnOwogICAgICAgICAgICAgICAgICAgICBmbGFzaC5mbGFzaE5vZGUuc3R5bGUuaGVpZ2h0ID0gaGVpZ2h0ICsgJ3B4JzsKCiAgICAgICAgICAgICAgICAgICAgIGlmIChmbGFzaC5mbGFzaEFwaSAhPT0gbnVsbCAmJiB0eXBlb2YgZmxhc2guZmxhc2hBcGkuZmlyZV9zZXRTaXplID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICBmbGFzaC5mbGFzaEFwaS5maXJlX3NldFNpemUod2lkdGgsIGhlaWdodCk7CiAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgICBmbGFzaC5kZXN0cm95ID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICBmbGFzaC5mbGFzaE5vZGUucmVtb3ZlKCk7CiAgICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICAgaWYgKG1lZGlhRmlsZXMgJiYgbWVkaWFGaWxlcy5sZW5ndGggPiAwKSB7CiAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9pNCA9IDAsIF90b3RhbDQgPSBtZWRpYUZpbGVzLmxlbmd0aDsgX2k0IDwgX3RvdGFsNDsgX2k0KyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfcmVuZGVyZXIucmVuZGVyZXIucmVuZGVyZXJzW29wdGlvbnMucHJlZml4XS5jYW5QbGF5VHlwZShtZWRpYUZpbGVzW19pNF0udHlwZSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbGFzaC5zZXRTcmMobWVkaWFGaWxlc1tfaTRdLnNyYyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgIHJldHVybiBmbGFzaDsKICAgICAgICAgICAgIH0KICAgICAgICAgfTsKCiAgICAgICAgIHZhciBoYXNGbGFzaCA9IFBsdWdpbkRldGVjdG9yLmhhc1BsdWdpblZlcnNpb24oJ2ZsYXNoJywgWzEwLCAwLCAwXSk7CgogICAgICAgICBpZiAoaGFzRmxhc2gpIHsKICAgICAgICAgICAgIF9tZWRpYS50eXBlQ2hlY2tzLnB1c2goZnVuY3Rpb24gKHVybCkgewogICAgICAgICAgICAgICAgIHVybCA9IHVybC50b0xvd2VyQ2FzZSgpOwoKICAgICAgICAgICAgICAgICBpZiAodXJsLnN0YXJ0c1dpdGgoJ3J0bXAnKSkgewogICAgICAgICAgICAgICAgICAgICBpZiAofnVybC5pbmRleE9mKCcubXAzJykpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnYXVkaW8vcnRtcCc7CiAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ3ZpZGVvL3J0bXAnOwogICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICgvXC5vZyhhfGcpL2kudGVzdCh1cmwpKSB7CiAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnYXVkaW8vb2dnJzsKICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKH51cmwuaW5kZXhPZignLm0zdTgnKSkgewogICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2FwcGxpY2F0aW9uL3gtbXBlZ1VSTCc7CiAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh+dXJsLmluZGV4T2YoJy5tcGQnKSkgewogICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2FwcGxpY2F0aW9uL2Rhc2greG1sJzsKICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKH51cmwuaW5kZXhPZignLmZsdicpKSB7CiAgICAgICAgICAgICAgICAgICAgIHJldHVybiAndmlkZW8vZmx2JzsKICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDsKICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICB2YXIgRmxhc2hNZWRpYUVsZW1lbnRWaWRlb1JlbmRlcmVyID0gewogICAgICAgICAgICAgICAgIG5hbWU6ICdmbGFzaF92aWRlbycsCiAgICAgICAgICAgICAgICAgb3B0aW9uczogewogICAgICAgICAgICAgICAgICAgICBwcmVmaXg6ICdmbGFzaF92aWRlbycsCiAgICAgICAgICAgICAgICAgICAgIGZpbGVuYW1lOiAnbWVkaWFlbGVtZW50LWZsYXNoLXZpZGVvLnN3ZicsCiAgICAgICAgICAgICAgICAgICAgIGVuYWJsZVBzZXVkb1N0cmVhbWluZzogZmFsc2UsCgogICAgICAgICAgICAgICAgICAgICBwc2V1ZG9TdHJlYW1pbmdTdGFydFF1ZXJ5UGFyYW06ICdzdGFydCcsCgogICAgICAgICAgICAgICAgICAgICBwc2V1ZG9TdHJlYW1pbmdUeXBlOiAnYnl0ZScsCgogICAgICAgICAgICAgICAgICAgICBwcm94eVR5cGU6ICcnLAoKICAgICAgICAgICAgICAgICAgICAgc3RyZWFtRGVsaW1pdGVyOiAnJwogICAgICAgICAgICAgICAgIH0sCgogICAgICAgICAgICAgICAgIGNhblBsYXlUeXBlOiBmdW5jdGlvbiBjYW5QbGF5VHlwZSh0eXBlKSB7CiAgICAgICAgICAgICAgICAgICAgIHJldHVybiB+Wyd2aWRlby9tcDQnLCAndmlkZW8vcnRtcCcsICdhdWRpby9ydG1wJywgJ3J0bXAvbXA0JywgJ2F1ZGlvL21wNCcsICd2aWRlby9mbHYnLCAndmlkZW8veC1mbHYnXS5pbmRleE9mKHR5cGUudG9Mb3dlckNhc2UoKSk7CiAgICAgICAgICAgICAgICAgfSwKCiAgICAgICAgICAgICAgICAgY3JlYXRlOiBGbGFzaE1lZGlhRWxlbWVudFJlbmRlcmVyLmNyZWF0ZQoKICAgICAgICAgICAgIH07CiAgICAgICAgICAgICBfcmVuZGVyZXIucmVuZGVyZXIuYWRkKEZsYXNoTWVkaWFFbGVtZW50VmlkZW9SZW5kZXJlcik7CgogICAgICAgICAgICAgdmFyIEZsYXNoTWVkaWFFbGVtZW50SGxzVmlkZW9SZW5kZXJlciA9IHsKICAgICAgICAgICAgICAgICBuYW1lOiAnZmxhc2hfaGxzJywKICAgICAgICAgICAgICAgICBvcHRpb25zOiB7CiAgICAgICAgICAgICAgICAgICAgIHByZWZpeDogJ2ZsYXNoX2hscycsCiAgICAgICAgICAgICAgICAgICAgIGZpbGVuYW1lOiAnbWVkaWFlbGVtZW50LWZsYXNoLXZpZGVvLWhscy5zd2YnCiAgICAgICAgICAgICAgICAgfSwKCiAgICAgICAgICAgICAgICAgY2FuUGxheVR5cGU6IGZ1bmN0aW9uIGNhblBsYXlUeXBlKHR5cGUpIHsKICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIH5bJ2FwcGxpY2F0aW9uL3gtbXBlZ3VybCcsICdhcHBsaWNhdGlvbi92bmQuYXBwbGUubXBlZ3VybCcsICdhdWRpby9tcGVndXJsJywgJ2F1ZGlvL2hscycsICd2aWRlby9obHMnXS5pbmRleE9mKHR5cGUudG9Mb3dlckNhc2UoKSk7CiAgICAgICAgICAgICAgICAgfSwKCiAgICAgICAgICAgICAgICAgY3JlYXRlOiBGbGFzaE1lZGlhRWxlbWVudFJlbmRlcmVyLmNyZWF0ZQogICAgICAgICAgICAgfTsKICAgICAgICAgICAgIF9yZW5kZXJlci5yZW5kZXJlci5hZGQoRmxhc2hNZWRpYUVsZW1lbnRIbHNWaWRlb1JlbmRlcmVyKTsKCiAgICAgICAgICAgICB2YXIgRmxhc2hNZWRpYUVsZW1lbnRNZGFzaFZpZGVvUmVuZGVyZXIgPSB7CiAgICAgICAgICAgICAgICAgbmFtZTogJ2ZsYXNoX2Rhc2gnLAogICAgICAgICAgICAgICAgIG9wdGlvbnM6IHsKICAgICAgICAgICAgICAgICAgICAgcHJlZml4OiAnZmxhc2hfZGFzaCcsCiAgICAgICAgICAgICAgICAgICAgIGZpbGVuYW1lOiAnbWVkaWFlbGVtZW50LWZsYXNoLXZpZGVvLW1kYXNoLnN3ZicKICAgICAgICAgICAgICAgICB9LAoKICAgICAgICAgICAgICAgICBjYW5QbGF5VHlwZTogZnVuY3Rpb24gY2FuUGxheVR5cGUodHlwZSkgewogICAgICAgICAgICAgICAgICAgICByZXR1cm4gflsnYXBwbGljYXRpb24vZGFzaCt4bWwnXS5pbmRleE9mKHR5cGUudG9Mb3dlckNhc2UoKSk7CiAgICAgICAgICAgICAgICAgfSwKCiAgICAgICAgICAgICAgICAgY3JlYXRlOiBGbGFzaE1lZGlhRWxlbWVudFJlbmRlcmVyLmNyZWF0ZQogICAgICAgICAgICAgfTsKICAgICAgICAgICAgIF9yZW5kZXJlci5yZW5kZXJlci5hZGQoRmxhc2hNZWRpYUVsZW1lbnRNZGFzaFZpZGVvUmVuZGVyZXIpOwoKICAgICAgICAgICAgIHZhciBGbGFzaE1lZGlhRWxlbWVudEF1ZGlvUmVuZGVyZXIgPSB7CiAgICAgICAgICAgICAgICAgbmFtZTogJ2ZsYXNoX2F1ZGlvJywKICAgICAgICAgICAgICAgICBvcHRpb25zOiB7CiAgICAgICAgICAgICAgICAgICAgIHByZWZpeDogJ2ZsYXNoX2F1ZGlvJywKICAgICAgICAgICAgICAgICAgICAgZmlsZW5hbWU6ICdtZWRpYWVsZW1lbnQtZmxhc2gtYXVkaW8uc3dmJwogICAgICAgICAgICAgICAgIH0sCgogICAgICAgICAgICAgICAgIGNhblBsYXlUeXBlOiBmdW5jdGlvbiBjYW5QbGF5VHlwZSh0eXBlKSB7CiAgICAgICAgICAgICAgICAgICAgIHJldHVybiB+WydhdWRpby9tcDMnXS5pbmRleE9mKHR5cGUudG9Mb3dlckNhc2UoKSk7CiAgICAgICAgICAgICAgICAgfSwKCiAgICAgICAgICAgICAgICAgY3JlYXRlOiBGbGFzaE1lZGlhRWxlbWVudFJlbmRlcmVyLmNyZWF0ZQogICAgICAgICAgICAgfTsKICAgICAgICAgICAgIF9yZW5kZXJlci5yZW5kZXJlci5hZGQoRmxhc2hNZWRpYUVsZW1lbnRBdWRpb1JlbmRlcmVyKTsKCiAgICAgICAgICAgICB2YXIgRmxhc2hNZWRpYUVsZW1lbnRBdWRpb09nZ1JlbmRlcmVyID0gewogICAgICAgICAgICAgICAgIG5hbWU6ICdmbGFzaF9hdWRpb19vZ2cnLAogICAgICAgICAgICAgICAgIG9wdGlvbnM6IHsKICAgICAgICAgICAgICAgICAgICAgcHJlZml4OiAnZmxhc2hfYXVkaW9fb2dnJywKICAgICAgICAgICAgICAgICAgICAgZmlsZW5hbWU6ICdtZWRpYWVsZW1lbnQtZmxhc2gtYXVkaW8tb2dnLnN3ZicKICAgICAgICAgICAgICAgICB9LAoKICAgICAgICAgICAgICAgICBjYW5QbGF5VHlwZTogZnVuY3Rpb24gY2FuUGxheVR5cGUodHlwZSkgewogICAgICAgICAgICAgICAgICAgICByZXR1cm4gflsnYXVkaW8vb2dnJywgJ2F1ZGlvL29nYScsICdhdWRpby9vZ3YnXS5pbmRleE9mKHR5cGUudG9Mb3dlckNhc2UoKSk7CiAgICAgICAgICAgICAgICAgfSwKCiAgICAgICAgICAgICAgICAgY3JlYXRlOiBGbGFzaE1lZGlhRWxlbWVudFJlbmRlcmVyLmNyZWF0ZQogICAgICAgICAgICAgfTsKICAgICAgICAgICAgIF9yZW5kZXJlci5yZW5kZXJlci5hZGQoRmxhc2hNZWRpYUVsZW1lbnRBdWRpb09nZ1JlbmRlcmVyKTsKICAgICAgICAgfQoKICAgICB9LCB7ICIyIjogMiwgIjI1IjogMjUsICIyNyI6IDI3LCAiMjgiOiAyOCwgIjMiOiAzLCAiNSI6IDUsICI3IjogNywgIjgiOiA4IH1dLCAyMTogW2Z1bmN0aW9uIChfZGVyZXFfLCBtb2R1bGUsIGV4cG9ydHMpIHsKICAgICAgICAgJ3VzZSBzdHJpY3QnOwoKICAgICAgICAgdmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsKCiAgICAgICAgIHZhciBfd2luZG93ID0gX2RlcmVxXygzKTsKCiAgICAgICAgIHZhciBfd2luZG93MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dpbmRvdyk7CgogICAgICAgICB2YXIgX21lanMgPSBfZGVyZXFfKDcpOwoKICAgICAgICAgdmFyIF9tZWpzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21lanMpOwoKICAgICAgICAgdmFyIF9yZW5kZXJlciA9IF9kZXJlcV8oOCk7CgogICAgICAgICB2YXIgX2dlbmVyYWwgPSBfZGVyZXFfKDI3KTsKCiAgICAgICAgIHZhciBfY29uc3RhbnRzID0gX2RlcmVxXygyNSk7CgogICAgICAgICB2YXIgX21lZGlhID0gX2RlcmVxXygyOCk7CgogICAgICAgICB2YXIgX2RvbSA9IF9kZXJlcV8oMjYpOwoKICAgICAgICAgZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCiAgICAgICAgIHZhciBOYXRpdmVGbHYgPSB7CgogICAgICAgICAgICAgcHJvbWlzZTogbnVsbCwKCiAgICAgICAgICAgICBsb2FkOiBmdW5jdGlvbiBsb2FkKHNldHRpbmdzKSB7CiAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBmbHZqcyAhPT0gJ3VuZGVmaW5lZCcpIHsKICAgICAgICAgICAgICAgICAgICAgTmF0aXZlRmx2LnByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpOwogICAgICAgICAgICAgICAgICAgICB9KS50aGVuKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIE5hdGl2ZUZsdi5fY3JlYXRlUGxheWVyKHNldHRpbmdzKTsKICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgc2V0dGluZ3Mub3B0aW9ucy5wYXRoID0gdHlwZW9mIHNldHRpbmdzLm9wdGlvbnMucGF0aCA9PT0gJ3N0cmluZycgPyBzZXR0aW5ncy5vcHRpb25zLnBhdGggOiAnaHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L25wbS9mbHYuanNAbGF0ZXN0JzsKCiAgICAgICAgICAgICAgICAgICAgIE5hdGl2ZUZsdi5wcm9taXNlID0gTmF0aXZlRmx2LnByb21pc2UgfHwgKDAsIF9kb20ubG9hZFNjcmlwdCkoc2V0dGluZ3Mub3B0aW9ucy5wYXRoKTsKICAgICAgICAgICAgICAgICAgICAgTmF0aXZlRmx2LnByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICBOYXRpdmVGbHYuX2NyZWF0ZVBsYXllcihzZXR0aW5ncyk7CiAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgcmV0dXJuIE5hdGl2ZUZsdi5wcm9taXNlOwogICAgICAgICAgICAgfSwKCiAgICAgICAgICAgICBfY3JlYXRlUGxheWVyOiBmdW5jdGlvbiBfY3JlYXRlUGxheWVyKHNldHRpbmdzKSB7CiAgICAgICAgICAgICAgICAgZmx2anMuTG9nZ2luZ0NvbnRyb2wuZW5hYmxlRGVidWcgPSBzZXR0aW5ncy5vcHRpb25zLmRlYnVnOwogICAgICAgICAgICAgICAgIGZsdmpzLkxvZ2dpbmdDb250cm9sLmVuYWJsZVZlcmJvc2UgPSBzZXR0aW5ncy5vcHRpb25zLmRlYnVnOwogICAgICAgICAgICAgICAgIHZhciBwbGF5ZXIgPSBmbHZqcy5jcmVhdGVQbGF5ZXIoc2V0dGluZ3Mub3B0aW9ucywgc2V0dGluZ3MuY29uZmlncyk7CiAgICAgICAgICAgICAgICAgX3dpbmRvdzIuZGVmYXVsdFsnX19yZWFkeV9fJyArIHNldHRpbmdzLmlkXShwbGF5ZXIpOwogICAgICAgICAgICAgICAgIHJldHVybiBwbGF5ZXI7CiAgICAgICAgICAgICB9CiAgICAgICAgIH07CgogICAgICAgICB2YXIgRmx2TmF0aXZlUmVuZGVyZXIgPSB7CiAgICAgICAgICAgICBuYW1lOiAnbmF0aXZlX2ZsdicsCiAgICAgICAgICAgICBvcHRpb25zOiB7CiAgICAgICAgICAgICAgICAgcHJlZml4OiAnbmF0aXZlX2ZsdicsCiAgICAgICAgICAgICAgICAgZmx2OiB7CiAgICAgICAgICAgICAgICAgICAgIHBhdGg6ICdodHRwczovL2Nkbi5qc2RlbGl2ci5uZXQvbnBtL2Zsdi5qc0BsYXRlc3QnLAoKICAgICAgICAgICAgICAgICAgICAgY29yczogdHJ1ZSwKICAgICAgICAgICAgICAgICAgICAgZGVidWc6IGZhbHNlCiAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgfSwKCiAgICAgICAgICAgICBjYW5QbGF5VHlwZTogZnVuY3Rpb24gY2FuUGxheVR5cGUodHlwZSkgewogICAgICAgICAgICAgICAgIHJldHVybiBfY29uc3RhbnRzLkhBU19NU0UgJiYgWyd2aWRlby94LWZsdicsICd2aWRlby9mbHYnXS5pbmRleE9mKHR5cGUudG9Mb3dlckNhc2UoKSkgPiAtMTsKICAgICAgICAgICAgIH0sCgogICAgICAgICAgICAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUobWVkaWFFbGVtZW50LCBvcHRpb25zLCBtZWRpYUZpbGVzKSB7CgogICAgICAgICAgICAgICAgIHZhciBvcmlnaW5hbE5vZGUgPSBtZWRpYUVsZW1lbnQub3JpZ2luYWxOb2RlLAogICAgICAgICAgICAgICAgICAgICBpZCA9IG1lZGlhRWxlbWVudC5pZCArICdfJyArIG9wdGlvbnMucHJlZml4OwoKICAgICAgICAgICAgICAgICB2YXIgbm9kZSA9IG51bGwsCiAgICAgICAgICAgICAgICAgICAgIGZsdlBsYXllciA9IG51bGw7CgogICAgICAgICAgICAgICAgIG5vZGUgPSBvcmlnaW5hbE5vZGUuY2xvbmVOb2RlKHRydWUpOwogICAgICAgICAgICAgICAgIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKG9wdGlvbnMsIG1lZGlhRWxlbWVudC5vcHRpb25zKTsKCiAgICAgICAgICAgICAgICAgdmFyIHByb3BzID0gX21lanMyLmRlZmF1bHQuaHRtbDVtZWRpYS5wcm9wZXJ0aWVzLAogICAgICAgICAgICAgICAgICAgICBldmVudHMgPSBfbWVqczIuZGVmYXVsdC5odG1sNW1lZGlhLmV2ZW50cy5jb25jYXQoWydjbGljaycsICdtb3VzZW92ZXInLCAnbW91c2VvdXQnXSkuZmlsdGVyKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZSAhPT0gJ2Vycm9yJzsKICAgICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgICAgIGF0dGFjaE5hdGl2ZUV2ZW50cyA9IGZ1bmN0aW9uIGF0dGFjaE5hdGl2ZUV2ZW50cyhlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXZlbnQgPSAoMCwgX2dlbmVyYWwuY3JlYXRlRXZlbnQpKGUudHlwZSwgbWVkaWFFbGVtZW50KTsKICAgICAgICAgICAgICAgICAgICAgICAgIG1lZGlhRWxlbWVudC5kaXNwYXRjaEV2ZW50KGV2ZW50KTsKICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgYXNzaWduR2V0dGVyc1NldHRlcnMgPSBmdW5jdGlvbiBhc3NpZ25HZXR0ZXJzU2V0dGVycyhwcm9wTmFtZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNhcE5hbWUgPSAnJyArIHByb3BOYW1lLnN1YnN0cmluZygwLCAxKS50b1VwcGVyQ2FzZSgpICsgcHJvcE5hbWUuc3Vic3RyaW5nKDEpOwoKICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVbJ2dldCcgKyBjYXBOYW1lXSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmx2UGxheWVyICE9PSBudWxsID8gbm9kZVtwcm9wTmFtZV0gOiBudWxsOwogICAgICAgICAgICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICAgICAgICAgICBub2RlWydzZXQnICsgY2FwTmFtZV0gPSBmdW5jdGlvbiAodmFsdWUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX21lanMyLmRlZmF1bHQuaHRtbDVtZWRpYS5yZWFkT25seVByb3BlcnRpZXMuaW5kZXhPZihwcm9wTmFtZSkgPT09IC0xKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcm9wTmFtZSA9PT0gJ3NyYycpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVbcHJvcE5hbWVdID0gKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YodmFsdWUpKSA9PT0gJ29iamVjdCcgJiYgdmFsdWUuc3JjID8gdmFsdWUuc3JjIDogdmFsdWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmx2UGxheWVyICE9PSBudWxsKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9mbHZPcHRpb25zID0ge307CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2Zsdk9wdGlvbnMudHlwZSA9ICdmbHYnOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9mbHZPcHRpb25zLnVybCA9IHZhbHVlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9mbHZPcHRpb25zLmNvcnMgPSBvcHRpb25zLmZsdi5jb3JzOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9mbHZPcHRpb25zLmRlYnVnID0gb3B0aW9ucy5mbHYuZGVidWc7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgX2Zsdk9wdGlvbnMucGF0aCA9IG9wdGlvbnMuZmx2LnBhdGg7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9mbHZDb25maWdzID0gb3B0aW9ucy5mbHYuY29uZmlnczsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmx2UGxheWVyLmRlc3Ryb3koKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgdG90YWwgPSBldmVudHMubGVuZ3RoOyBpIDwgdG90YWw7IGkrKykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRzW2ldLCBhdHRhY2hOYXRpdmVFdmVudHMpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbHZQbGF5ZXIgPSBOYXRpdmVGbHYuX2NyZWF0ZVBsYXllcih7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IF9mbHZPcHRpb25zLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25maWdzOiBfZmx2Q29uZmlncywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IGlkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmx2UGxheWVyLmF0dGFjaE1lZGlhRWxlbWVudChub2RlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbHZQbGF5ZXIubG9hZCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZVtwcm9wTmFtZV0gPSB2YWx1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCB0b3RhbCA9IHByb3BzLmxlbmd0aDsgaSA8IHRvdGFsOyBpKyspIHsKICAgICAgICAgICAgICAgICAgICAgYXNzaWduR2V0dGVyc1NldHRlcnMocHJvcHNbaV0pOwogICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgX3dpbmRvdzIuZGVmYXVsdFsnX19yZWFkeV9fJyArIGlkXSA9IGZ1bmN0aW9uIChfZmx2UGxheWVyKSB7CiAgICAgICAgICAgICAgICAgICAgIG1lZGlhRWxlbWVudC5mbHZQbGF5ZXIgPSBmbHZQbGF5ZXIgPSBfZmx2UGxheWVyOwoKICAgICAgICAgICAgICAgICAgICAgdmFyIGZsdkV2ZW50cyA9IGZsdmpzLkV2ZW50cywKICAgICAgICAgICAgICAgICAgICAgICAgIGFzc2lnbkV2ZW50cyA9IGZ1bmN0aW9uIGFzc2lnbkV2ZW50cyhldmVudE5hbWUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnROYW1lID09PSAnbG9hZGVkbWV0YWRhdGEnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZsdlBsYXllci51bmxvYWQoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmx2UGxheWVyLmRldGFjaE1lZGlhRWxlbWVudCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbHZQbGF5ZXIuYXR0YWNoTWVkaWFFbGVtZW50KG5vZGUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbHZQbGF5ZXIubG9hZCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgYXR0YWNoTmF0aXZlRXZlbnRzKTsKICAgICAgICAgICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF90b3RhbCA9IGV2ZW50cy5sZW5ndGg7IF9pIDwgX3RvdGFsOyBfaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICBhc3NpZ25FdmVudHMoZXZlbnRzW19pXSk7CiAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgIHZhciBhc3NpZ25GbHZFdmVudHMgPSBmdW5jdGlvbiBhc3NpZ25GbHZFdmVudHMobmFtZSwgZGF0YSkgewogICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5hbWUgPT09ICdlcnJvcicpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWVzc2FnZSA9IGRhdGFbMF0gKyAnOiAnICsgZGF0YVsxXSArICcgJyArIGRhdGFbMl0ubXNnOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lZGlhRWxlbWVudC5nZW5lcmF0ZUVycm9yKG1lc3NhZ2UsIG5vZGUuc3JjKTsKICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9ldmVudCA9ICgwLCBfZ2VuZXJhbC5jcmVhdGVFdmVudCkobmFtZSwgbWVkaWFFbGVtZW50KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfZXZlbnQuZGF0YSA9IGRhdGE7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVkaWFFbGVtZW50LmRpc3BhdGNoRXZlbnQoX2V2ZW50KTsKICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICAgICAgIHZhciBfbG9vcCA9IGZ1bmN0aW9uIF9sb29wKGV2ZW50VHlwZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZsdkV2ZW50cy5oYXNPd25Qcm9wZXJ0eShldmVudFR5cGUpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmx2UGxheWVyLm9uKGZsdkV2ZW50c1tldmVudFR5cGVdLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXNzaWduRmx2RXZlbnRzKGZsdkV2ZW50c1tldmVudFR5cGVdLCBhcmdzKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGV2ZW50VHlwZSBpbiBmbHZFdmVudHMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIF9sb29wKGV2ZW50VHlwZSk7CiAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgICBpZiAobWVkaWFGaWxlcyAmJiBtZWRpYUZpbGVzLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2kyID0gMCwgX3RvdGFsMiA9IG1lZGlhRmlsZXMubGVuZ3RoOyBfaTIgPCBfdG90YWwyOyBfaTIrKykgewogICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9yZW5kZXJlci5yZW5kZXJlci5yZW5kZXJlcnNbb3B0aW9ucy5wcmVmaXhdLmNhblBsYXlUeXBlKG1lZGlhRmlsZXNbX2kyXS50eXBlKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUuc2V0QXR0cmlidXRlKCdzcmMnLCBtZWRpYUZpbGVzW19pMl0uc3JjKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoJ2lkJywgaWQpOwoKICAgICAgICAgICAgICAgICBvcmlnaW5hbE5vZGUucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobm9kZSwgb3JpZ2luYWxOb2RlKTsKICAgICAgICAgICAgICAgICBvcmlnaW5hbE5vZGUuYXV0b3BsYXkgPSBmYWxzZTsKICAgICAgICAgICAgICAgICBvcmlnaW5hbE5vZGUuc3R5bGUuZGlzcGxheSA9ICdub25lJzsKCiAgICAgICAgICAgICAgICAgdmFyIGZsdk9wdGlvbnMgPSB7fTsKICAgICAgICAgICAgICAgICBmbHZPcHRpb25zLnR5cGUgPSAnZmx2JzsKICAgICAgICAgICAgICAgICBmbHZPcHRpb25zLnVybCA9IG5vZGUuc3JjOwogICAgICAgICAgICAgICAgIGZsdk9wdGlvbnMuY29ycyA9IG9wdGlvbnMuZmx2LmNvcnM7CiAgICAgICAgICAgICAgICAgZmx2T3B0aW9ucy5kZWJ1ZyA9IG9wdGlvbnMuZmx2LmRlYnVnOwogICAgICAgICAgICAgICAgIGZsdk9wdGlvbnMucGF0aCA9IG9wdGlvbnMuZmx2LnBhdGg7CiAgICAgICAgICAgICAgICAgdmFyIGZsdkNvbmZpZ3MgPSBvcHRpb25zLmZsdi5jb25maWdzOwoKICAgICAgICAgICAgICAgICBub2RlLnNldFNpemUgPSBmdW5jdGlvbiAod2lkdGgsIGhlaWdodCkgewogICAgICAgICAgICAgICAgICAgICBub2RlLnN0eWxlLndpZHRoID0gd2lkdGggKyAncHgnOwogICAgICAgICAgICAgICAgICAgICBub2RlLnN0eWxlLmhlaWdodCA9IGhlaWdodCArICdweCc7CiAgICAgICAgICAgICAgICAgICAgIHJldHVybiBub2RlOwogICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgIG5vZGUuaGlkZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgaWYgKGZsdlBsYXllciAhPT0gbnVsbCkgewogICAgICAgICAgICAgICAgICAgICAgICAgZmx2UGxheWVyLnBhdXNlKCk7CiAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgbm9kZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOwogICAgICAgICAgICAgICAgICAgICByZXR1cm4gbm9kZTsKICAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgICBub2RlLnNob3cgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgIG5vZGUuc3R5bGUuZGlzcGxheSA9ICcnOwogICAgICAgICAgICAgICAgICAgICByZXR1cm4gbm9kZTsKICAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgICBub2RlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgIGlmIChmbHZQbGF5ZXIgIT09IG51bGwpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIGZsdlBsYXllci5kZXN0cm95KCk7CiAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgICB2YXIgZXZlbnQgPSAoMCwgX2dlbmVyYWwuY3JlYXRlRXZlbnQpKCdyZW5kZXJlcnJlYWR5Jywgbm9kZSk7CiAgICAgICAgICAgICAgICAgbWVkaWFFbGVtZW50LmRpc3BhdGNoRXZlbnQoZXZlbnQpOwoKICAgICAgICAgICAgICAgICBtZWRpYUVsZW1lbnQucHJvbWlzZXMucHVzaChOYXRpdmVGbHYubG9hZCh7CiAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IGZsdk9wdGlvbnMsCiAgICAgICAgICAgICAgICAgICAgIGNvbmZpZ3M6IGZsdkNvbmZpZ3MsCiAgICAgICAgICAgICAgICAgICAgIGlkOiBpZAogICAgICAgICAgICAgICAgIH0pKTsKCiAgICAgICAgICAgICAgICAgcmV0dXJuIG5vZGU7CiAgICAgICAgICAgICB9CiAgICAgICAgIH07CgogICAgICAgICBfbWVkaWEudHlwZUNoZWNrcy5wdXNoKGZ1bmN0aW9uICh1cmwpIHsKICAgICAgICAgICAgIHJldHVybiB+dXJsLnRvTG93ZXJDYXNlKCkuaW5kZXhPZignLmZsdicpID8gJ3ZpZGVvL2ZsdicgOiBudWxsOwogICAgICAgICB9KTsKCiAgICAgICAgIF9yZW5kZXJlci5yZW5kZXJlci5hZGQoRmx2TmF0aXZlUmVuZGVyZXIpOwoKICAgICB9LCB7ICIyNSI6IDI1LCAiMjYiOiAyNiwgIjI3IjogMjcsICIyOCI6IDI4LCAiMyI6IDMsICI3IjogNywgIjgiOiA4IH1dLCAyMjogW2Z1bmN0aW9uIChfZGVyZXFfLCBtb2R1bGUsIGV4cG9ydHMpIHsKICAgICAgICAgJ3VzZSBzdHJpY3QnOwoKICAgICAgICAgdmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICJzeW1ib2wiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSAiZnVuY3Rpb24iICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/ICJzeW1ib2wiIDogdHlwZW9mIG9iajsgfTsKCiAgICAgICAgIHZhciBfd2luZG93ID0gX2RlcmVxXygzKTsKCiAgICAgICAgIHZhciBfd2luZG93MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dpbmRvdyk7CgogICAgICAgICB2YXIgX21lanMgPSBfZGVyZXFfKDcpOwoKICAgICAgICAgdmFyIF9tZWpzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21lanMpOwoKICAgICAgICAgdmFyIF9yZW5kZXJlciA9IF9kZXJlcV8oOCk7CgogICAgICAgICB2YXIgX2dlbmVyYWwgPSBfZGVyZXFfKDI3KTsKCiAgICAgICAgIHZhciBfY29uc3RhbnRzID0gX2RlcmVxXygyNSk7CgogICAgICAgICB2YXIgX21lZGlhID0gX2RlcmVxXygyOCk7CgogICAgICAgICB2YXIgX2RvbSA9IF9kZXJlcV8oMjYpOwoKICAgICAgICAgZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCiAgICAgICAgIHZhciBOYXRpdmVIbHMgPSB7CgogICAgICAgICAgICAgcHJvbWlzZTogbnVsbCwKCiAgICAgICAgICAgICBsb2FkOiBmdW5jdGlvbiBsb2FkKHNldHRpbmdzKSB7CiAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBIbHMgIT09ICd1bmRlZmluZWQnKSB7CiAgICAgICAgICAgICAgICAgICAgIE5hdGl2ZUhscy5wcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTsKICAgICAgICAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICBOYXRpdmVIbHMuX2NyZWF0ZVBsYXllcihzZXR0aW5ncyk7CiAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgIHNldHRpbmdzLm9wdGlvbnMucGF0aCA9IHR5cGVvZiBzZXR0aW5ncy5vcHRpb25zLnBhdGggPT09ICdzdHJpbmcnID8gc2V0dGluZ3Mub3B0aW9ucy5wYXRoIDogJ2h0dHBzOi8vY2RuLmpzZGVsaXZyLm5ldC9ucG0vaGxzLmpzQGxhdGVzdCc7CgogICAgICAgICAgICAgICAgICAgICBOYXRpdmVIbHMucHJvbWlzZSA9IE5hdGl2ZUhscy5wcm9taXNlIHx8ICgwLCBfZG9tLmxvYWRTY3JpcHQpKHNldHRpbmdzLm9wdGlvbnMucGF0aCk7CiAgICAgICAgICAgICAgICAgICAgIE5hdGl2ZUhscy5wcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgTmF0aXZlSGxzLl9jcmVhdGVQbGF5ZXIoc2V0dGluZ3MpOwogICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgIHJldHVybiBOYXRpdmVIbHMucHJvbWlzZTsKICAgICAgICAgICAgIH0sCgogICAgICAgICAgICAgX2NyZWF0ZVBsYXllcjogZnVuY3Rpb24gX2NyZWF0ZVBsYXllcihzZXR0aW5ncykgewogICAgICAgICAgICAgICAgIHZhciBwbGF5ZXIgPSBuZXcgSGxzKHNldHRpbmdzLm9wdGlvbnMpOwogICAgICAgICAgICAgICAgIF93aW5kb3cyLmRlZmF1bHRbJ19fcmVhZHlfXycgKyBzZXR0aW5ncy5pZF0ocGxheWVyKTsKICAgICAgICAgICAgICAgICByZXR1cm4gcGxheWVyOwogICAgICAgICAgICAgfQogICAgICAgICB9OwoKICAgICAgICAgdmFyIEhsc05hdGl2ZVJlbmRlcmVyID0gewogICAgICAgICAgICAgbmFtZTogJ25hdGl2ZV9obHMnLAogICAgICAgICAgICAgb3B0aW9uczogewogICAgICAgICAgICAgICAgIHByZWZpeDogJ25hdGl2ZV9obHMnLAogICAgICAgICAgICAgICAgIGhsczogewogICAgICAgICAgICAgICAgICAgICBwYXRoOiAnaHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L25wbS9obHMuanNAbGF0ZXN0JywKCiAgICAgICAgICAgICAgICAgICAgIGF1dG9TdGFydExvYWQ6IGZhbHNlLAogICAgICAgICAgICAgICAgICAgICBkZWJ1ZzogZmFsc2UKICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICB9LAoKICAgICAgICAgICAgIGNhblBsYXlUeXBlOiBmdW5jdGlvbiBjYW5QbGF5VHlwZSh0eXBlKSB7CiAgICAgICAgICAgICAgICAgcmV0dXJuIF9jb25zdGFudHMuSEFTX01TRSAmJiBbJ2FwcGxpY2F0aW9uL3gtbXBlZ3VybCcsICdhcHBsaWNhdGlvbi92bmQuYXBwbGUubXBlZ3VybCcsICdhdWRpby9tcGVndXJsJywgJ2F1ZGlvL2hscycsICd2aWRlby9obHMnXS5pbmRleE9mKHR5cGUudG9Mb3dlckNhc2UoKSkgPiAtMTsKICAgICAgICAgICAgIH0sCgogICAgICAgICAgICAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUobWVkaWFFbGVtZW50LCBvcHRpb25zLCBtZWRpYUZpbGVzKSB7CgogICAgICAgICAgICAgICAgIHZhciBvcmlnaW5hbE5vZGUgPSBtZWRpYUVsZW1lbnQub3JpZ2luYWxOb2RlLAogICAgICAgICAgICAgICAgICAgICBpZCA9IG1lZGlhRWxlbWVudC5pZCArICdfJyArIG9wdGlvbnMucHJlZml4LAogICAgICAgICAgICAgICAgICAgICBwcmVsb2FkID0gb3JpZ2luYWxOb2RlLmdldEF0dHJpYnV0ZSgncHJlbG9hZCcpLAogICAgICAgICAgICAgICAgICAgICBhdXRvcGxheSA9IG9yaWdpbmFsTm9kZS5hdXRvcGxheTsKCiAgICAgICAgICAgICAgICAgdmFyIGhsc1BsYXllciA9IG51bGwsCiAgICAgICAgICAgICAgICAgICAgIG5vZGUgPSBudWxsLAogICAgICAgICAgICAgICAgICAgICBpbmRleCA9IDAsCiAgICAgICAgICAgICAgICAgICAgIHRvdGFsID0gbWVkaWFGaWxlcy5sZW5ndGg7CgogICAgICAgICAgICAgICAgIG5vZGUgPSBvcmlnaW5hbE5vZGUuY2xvbmVOb2RlKHRydWUpOwogICAgICAgICAgICAgICAgIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKG9wdGlvbnMsIG1lZGlhRWxlbWVudC5vcHRpb25zKTsKICAgICAgICAgICAgICAgICBvcHRpb25zLmhscy5hdXRvU3RhcnRMb2FkID0gcHJlbG9hZCAmJiBwcmVsb2FkICE9PSAnbm9uZScgfHwgYXV0b3BsYXk7CgogICAgICAgICAgICAgICAgIHZhciBwcm9wcyA9IF9tZWpzMi5kZWZhdWx0Lmh0bWw1bWVkaWEucHJvcGVydGllcywKICAgICAgICAgICAgICAgICAgICAgZXZlbnRzID0gX21lanMyLmRlZmF1bHQuaHRtbDVtZWRpYS5ldmVudHMuY29uY2F0KFsnY2xpY2snLCAnbW91c2VvdmVyJywgJ21vdXNlb3V0J10pLmZpbHRlcihmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUgIT09ICdlcnJvcic7CiAgICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgICBhdHRhY2hOYXRpdmVFdmVudHMgPSBmdW5jdGlvbiBhdHRhY2hOYXRpdmVFdmVudHMoZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV2ZW50ID0gKDAsIF9nZW5lcmFsLmNyZWF0ZUV2ZW50KShlLnR5cGUsIG1lZGlhRWxlbWVudCk7CiAgICAgICAgICAgICAgICAgICAgICAgICBtZWRpYUVsZW1lbnQuZGlzcGF0Y2hFdmVudChldmVudCk7CiAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgIGFzc2lnbkdldHRlcnNTZXR0ZXJzID0gZnVuY3Rpb24gYXNzaWduR2V0dGVyc1NldHRlcnMocHJvcE5hbWUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjYXBOYW1lID0gJycgKyBwcm9wTmFtZS5zdWJzdHJpbmcoMCwgMSkudG9VcHBlckNhc2UoKSArIHByb3BOYW1lLnN1YnN0cmluZygxKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICBub2RlWydnZXQnICsgY2FwTmFtZV0gPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGhsc1BsYXllciAhPT0gbnVsbCA/IG5vZGVbcHJvcE5hbWVdIDogbnVsbDsKICAgICAgICAgICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgICAgICAgICAgbm9kZVsnc2V0JyArIGNhcE5hbWVdID0gZnVuY3Rpb24gKHZhbHVlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9tZWpzMi5kZWZhdWx0Lmh0bWw1bWVkaWEucmVhZE9ubHlQcm9wZXJ0aWVzLmluZGV4T2YocHJvcE5hbWUpID09PSAtMSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJvcE5hbWUgPT09ICdzcmMnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlW3Byb3BOYW1lXSA9ICh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHZhbHVlKSkgPT09ICdvYmplY3QnICYmIHZhbHVlLnNyYyA/IHZhbHVlLnNyYyA6IHZhbHVlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhsc1BsYXllciAhPT0gbnVsbCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhsc1BsYXllci5kZXN0cm95KCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIF90b3RhbCA9IGV2ZW50cy5sZW5ndGg7IGkgPCBfdG90YWw7IGkrKykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnRzW2ldLCBhdHRhY2hOYXRpdmVFdmVudHMpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBobHNQbGF5ZXIgPSBOYXRpdmVIbHMuX2NyZWF0ZVBsYXllcih7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IG9wdGlvbnMuaGxzLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogaWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBobHNQbGF5ZXIubG9hZFNvdXJjZSh2YWx1ZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGxzUGxheWVyLmF0dGFjaE1lZGlhKG5vZGUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZVtwcm9wTmFtZV0gPSB2YWx1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBfdG90YWwyID0gcHJvcHMubGVuZ3RoOyBpIDwgX3RvdGFsMjsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgIGFzc2lnbkdldHRlcnNTZXR0ZXJzKHByb3BzW2ldKTsKICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgIF93aW5kb3cyLmRlZmF1bHRbJ19fcmVhZHlfXycgKyBpZF0gPSBmdW5jdGlvbiAoX2hsc1BsYXllcikgewogICAgICAgICAgICAgICAgICAgICBtZWRpYUVsZW1lbnQuaGxzUGxheWVyID0gaGxzUGxheWVyID0gX2hsc1BsYXllcjsKICAgICAgICAgICAgICAgICAgICAgdmFyIGhsc0V2ZW50cyA9IEhscy5FdmVudHMsCiAgICAgICAgICAgICAgICAgICAgICAgICBhc3NpZ25FdmVudHMgPSBmdW5jdGlvbiBhc3NpZ25FdmVudHMoZXZlbnROYW1lKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV2ZW50TmFtZSA9PT0gJ2xvYWRlZG1ldGFkYXRhJykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXJsID0gbWVkaWFFbGVtZW50Lm9yaWdpbmFsTm9kZS5zcmM7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhsc1BsYXllci5kZXRhY2hNZWRpYSgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBobHNQbGF5ZXIubG9hZFNvdXJjZSh1cmwpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBobHNQbGF5ZXIuYXR0YWNoTWVkaWEobm9kZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBhdHRhY2hOYXRpdmVFdmVudHMpOwogICAgICAgICAgICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX3RvdGFsMyA9IGV2ZW50cy5sZW5ndGg7IF9pIDwgX3RvdGFsMzsgX2krKykgewogICAgICAgICAgICAgICAgICAgICAgICAgYXNzaWduRXZlbnRzKGV2ZW50c1tfaV0pOwogICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICB2YXIgcmVjb3ZlckRlY29kaW5nRXJyb3JEYXRlID0gdm9pZCAwLAogICAgICAgICAgICAgICAgICAgICAgICAgcmVjb3ZlclN3YXBBdWRpb0NvZGVjRGF0ZSA9IHZvaWQgMDsKICAgICAgICAgICAgICAgICAgICAgdmFyIGFzc2lnbkhsc0V2ZW50cyA9IGZ1bmN0aW9uIGFzc2lnbkhsc0V2ZW50cyhuYW1lLCBkYXRhKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobmFtZSA9PT0gJ2hsc0Vycm9yJykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihkYXRhKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhID0gZGF0YVsxXTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuZmF0YWwpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChkYXRhLnR5cGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ21lZGlhRXJyb3InOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBub3cgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXJlY292ZXJEZWNvZGluZ0Vycm9yRGF0ZSB8fCBub3cgLSByZWNvdmVyRGVjb2RpbmdFcnJvckRhdGUgPiAzMDAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlY292ZXJEZWNvZGluZ0Vycm9yRGF0ZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBobHNQbGF5ZXIucmVjb3Zlck1lZGlhRXJyb3IoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFyZWNvdmVyU3dhcEF1ZGlvQ29kZWNEYXRlIHx8IG5vdyAtIHJlY292ZXJTd2FwQXVkaW9Db2RlY0RhdGUgPiAzMDAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlY292ZXJTd2FwQXVkaW9Db2RlY0RhdGUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdBdHRlbXB0aW5nIHRvIHN3YXAgQXVkaW8gQ29kZWMgYW5kIHJlY292ZXIgZnJvbSBtZWRpYSBlcnJvcicpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBobHNQbGF5ZXIuc3dhcEF1ZGlvQ29kZWMoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGxzUGxheWVyLnJlY292ZXJNZWRpYUVycm9yKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1lc3NhZ2UgPSAnQ2Fubm90IHJlY292ZXIsIGxhc3QgbWVkaWEgZXJyb3IgcmVjb3ZlcnkgZmFpbGVkJzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVkaWFFbGVtZW50LmdlbmVyYXRlRXJyb3IobWVzc2FnZSwgbm9kZS5zcmMpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKG1lc3NhZ2UpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ25ldHdvcmtFcnJvcic6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuZGV0YWlscyA9PT0gJ21hbmlmZXN0TG9hZEVycm9yJykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5kZXggPCB0b3RhbCAmJiBtZWRpYUZpbGVzW2luZGV4ICsgMV0gIT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5zZXRTcmMobWVkaWFGaWxlc1tpbmRleCsrXS5zcmMpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5sb2FkKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLnBsYXkoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBfbWVzc2FnZSA9ICdOZXR3b3JrIGVycm9yJzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lZGlhRWxlbWVudC5nZW5lcmF0ZUVycm9yKF9tZXNzYWdlLCBtZWRpYUZpbGVzKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoX21lc3NhZ2UpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9tZXNzYWdlMiA9ICdOZXR3b3JrIGVycm9yJzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVkaWFFbGVtZW50LmdlbmVyYXRlRXJyb3IoX21lc3NhZ2UyLCBtZWRpYUZpbGVzKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihfbWVzc2FnZTIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGxzUGxheWVyLmRlc3Ryb3koKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV2ZW50ID0gKDAsIF9nZW5lcmFsLmNyZWF0ZUV2ZW50KShuYW1lLCBtZWRpYUVsZW1lbnQpOwogICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQuZGF0YSA9IGRhdGE7CiAgICAgICAgICAgICAgICAgICAgICAgICBtZWRpYUVsZW1lbnQuZGlzcGF0Y2hFdmVudChldmVudCk7CiAgICAgICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgICAgICB2YXIgX2xvb3AgPSBmdW5jdGlvbiBfbG9vcChldmVudFR5cGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChobHNFdmVudHMuaGFzT3duUHJvcGVydHkoZXZlbnRUeXBlKSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhsc1BsYXllci5vbihobHNFdmVudHNbZXZlbnRUeXBlXSwgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFzc2lnbkhsc0V2ZW50cyhobHNFdmVudHNbZXZlbnRUeXBlXSwgYXJncyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBldmVudFR5cGUgaW4gaGxzRXZlbnRzKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICBfbG9vcChldmVudFR5cGUpOwogICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICAgaWYgKHRvdGFsID4gMCkgewogICAgICAgICAgICAgICAgICAgICBmb3IgKDsgaW5kZXggPCB0b3RhbDsgaW5kZXgrKykgewogICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9yZW5kZXJlci5yZW5kZXJlci5yZW5kZXJlcnNbb3B0aW9ucy5wcmVmaXhdLmNhblBsYXlUeXBlKG1lZGlhRmlsZXNbaW5kZXhdLnR5cGUpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUoJ3NyYycsIG1lZGlhRmlsZXNbaW5kZXhdLnNyYyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgIGlmIChwcmVsb2FkICE9PSAnYXV0bycgJiYgIWF1dG9wbGF5KSB7CiAgICAgICAgICAgICAgICAgICAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcigncGxheScsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChobHNQbGF5ZXIgIT09IG51bGwpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBobHNQbGF5ZXIuc3RhcnRMb2FkKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICAgICAgbm9kZS5hZGRFdmVudExpc3RlbmVyKCdwYXVzZScsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChobHNQbGF5ZXIgIT09IG51bGwpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBobHNQbGF5ZXIuc3RvcExvYWQoKTsKICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICBub2RlLnNldEF0dHJpYnV0ZSgnaWQnLCBpZCk7CgogICAgICAgICAgICAgICAgIG9yaWdpbmFsTm9kZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZShub2RlLCBvcmlnaW5hbE5vZGUpOwogICAgICAgICAgICAgICAgIG9yaWdpbmFsTm9kZS5hdXRvcGxheSA9IGZhbHNlOwogICAgICAgICAgICAgICAgIG9yaWdpbmFsTm9kZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOwoKICAgICAgICAgICAgICAgICBub2RlLnNldFNpemUgPSBmdW5jdGlvbiAod2lkdGgsIGhlaWdodCkgewogICAgICAgICAgICAgICAgICAgICBub2RlLnN0eWxlLndpZHRoID0gd2lkdGggKyAncHgnOwogICAgICAgICAgICAgICAgICAgICBub2RlLnN0eWxlLmhlaWdodCA9IGhlaWdodCArICdweCc7CiAgICAgICAgICAgICAgICAgICAgIHJldHVybiBub2RlOwogICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgIG5vZGUuaGlkZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgbm9kZS5wYXVzZSgpOwogICAgICAgICAgICAgICAgICAgICBub2RlLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CiAgICAgICAgICAgICAgICAgICAgIHJldHVybiBub2RlOwogICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgIG5vZGUuc2hvdyA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgbm9kZS5zdHlsZS5kaXNwbGF5ID0gJyc7CiAgICAgICAgICAgICAgICAgICAgIHJldHVybiBub2RlOwogICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgIG5vZGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgaWYgKGhsc1BsYXllciAhPT0gbnVsbCkgewogICAgICAgICAgICAgICAgICAgICAgICAgaGxzUGxheWVyLnN0b3BMb2FkKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICBobHNQbGF5ZXIuZGVzdHJveSgpOwogICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICAgdmFyIGV2ZW50ID0gKDAsIF9nZW5lcmFsLmNyZWF0ZUV2ZW50KSgncmVuZGVyZXJyZWFkeScsIG5vZGUpOwogICAgICAgICAgICAgICAgIG1lZGlhRWxlbWVudC5kaXNwYXRjaEV2ZW50KGV2ZW50KTsKCiAgICAgICAgICAgICAgICAgbWVkaWFFbGVtZW50LnByb21pc2VzLnB1c2goTmF0aXZlSGxzLmxvYWQoewogICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiBvcHRpb25zLmhscywKICAgICAgICAgICAgICAgICAgICAgaWQ6IGlkCiAgICAgICAgICAgICAgICAgfSkpOwoKICAgICAgICAgICAgICAgICByZXR1cm4gbm9kZTsKICAgICAgICAgICAgIH0KICAgICAgICAgfTsKCiAgICAgICAgIF9tZWRpYS50eXBlQ2hlY2tzLnB1c2goZnVuY3Rpb24gKHVybCkgewogICAgICAgICAgICAgcmV0dXJuIH51cmwudG9Mb3dlckNhc2UoKS5pbmRleE9mKCcubTN1OCcpID8gJ2FwcGxpY2F0aW9uL3gtbXBlZ1VSTCcgOiBudWxsOwogICAgICAgICB9KTsKCiAgICAgICAgIF9yZW5kZXJlci5yZW5kZXJlci5hZGQoSGxzTmF0aXZlUmVuZGVyZXIpOwoKICAgICB9LCB7ICIyNSI6IDI1LCAiMjYiOiAyNiwgIjI3IjogMjcsICIyOCI6IDI4LCAiMyI6IDMsICI3IjogNywgIjgiOiA4IH1dLCAyMzogW2Z1bmN0aW9uIChfZGVyZXFfLCBtb2R1bGUsIGV4cG9ydHMpIHsKICAgICAgICAgJ3VzZSBzdHJpY3QnOwoKICAgICAgICAgdmFyIF93aW5kb3cgPSBfZGVyZXFfKDMpOwoKICAgICAgICAgdmFyIF93aW5kb3cyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2luZG93KTsKCiAgICAgICAgIHZhciBfZG9jdW1lbnQgPSBfZGVyZXFfKDIpOwoKICAgICAgICAgdmFyIF9kb2N1bWVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kb2N1bWVudCk7CgogICAgICAgICB2YXIgX21lanMgPSBfZGVyZXFfKDcpOwoKICAgICAgICAgdmFyIF9tZWpzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21lanMpOwoKICAgICAgICAgdmFyIF9yZW5kZXJlciA9IF9kZXJlcV8oOCk7CgogICAgICAgICB2YXIgX2dlbmVyYWwgPSBfZGVyZXFfKDI3KTsKCiAgICAgICAgIHZhciBfY29uc3RhbnRzID0gX2RlcmVxXygyNSk7CgogICAgICAgICBmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKICAgICAgICAgdmFyIEh0bWxNZWRpYUVsZW1lbnQgPSB7CiAgICAgICAgICAgICBuYW1lOiAnaHRtbDUnLAogICAgICAgICAgICAgb3B0aW9uczogewogICAgICAgICAgICAgICAgIHByZWZpeDogJ2h0bWw1JwogICAgICAgICAgICAgfSwKCiAgICAgICAgICAgICBjYW5QbGF5VHlwZTogZnVuY3Rpb24gY2FuUGxheVR5cGUodHlwZSkgewoKICAgICAgICAgICAgICAgICB2YXIgbWVkaWFFbGVtZW50ID0gX2RvY3VtZW50Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ3ZpZGVvJyk7CgogICAgICAgICAgICAgICAgIGlmIChfY29uc3RhbnRzLklTX0FORFJPSUQgJiYgL1wvbXAoM3w0KSQvaS50ZXN0KHR5cGUpIHx8IH5bJ2FwcGxpY2F0aW9uL3gtbXBlZ3VybCcsICd2bmQuYXBwbGUubXBlZ3VybCcsICdhdWRpby9tcGVndXJsJywgJ2F1ZGlvL2hscycsICd2aWRlby9obHMnXS5pbmRleE9mKHR5cGUudG9Mb3dlckNhc2UoKSkgJiYgX2NvbnN0YW50cy5TVVBQT1JUU19OQVRJVkVfSExTKSB7CiAgICAgICAgICAgICAgICAgICAgIHJldHVybiAneWVzJzsKICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1lZGlhRWxlbWVudC5jYW5QbGF5VHlwZSkgewogICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWVkaWFFbGVtZW50LmNhblBsYXlUeXBlKHR5cGUudG9Mb3dlckNhc2UoKSkucmVwbGFjZSgvbm8vLCAnJyk7CiAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICcnOwogICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgIH0sCgogICAgICAgICAgICAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUobWVkaWFFbGVtZW50LCBvcHRpb25zLCBtZWRpYUZpbGVzKSB7CgogICAgICAgICAgICAgICAgIHZhciBpZCA9IG1lZGlhRWxlbWVudC5pZCArICdfJyArIG9wdGlvbnMucHJlZml4OwogICAgICAgICAgICAgICAgIHZhciBpc0FjdGl2ZSA9IGZhbHNlOwoKICAgICAgICAgICAgICAgICB2YXIgbm9kZSA9IG51bGw7CgogICAgICAgICAgICAgICAgIGlmIChtZWRpYUVsZW1lbnQub3JpZ2luYWxOb2RlID09PSB1bmRlZmluZWQgfHwgbWVkaWFFbGVtZW50Lm9yaWdpbmFsTm9kZSA9PT0gbnVsbCkgewogICAgICAgICAgICAgICAgICAgICBub2RlID0gX2RvY3VtZW50Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ2F1ZGlvJyk7CiAgICAgICAgICAgICAgICAgICAgIG1lZGlhRWxlbWVudC5hcHBlbmRDaGlsZChub2RlKTsKICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICBub2RlID0gbWVkaWFFbGVtZW50Lm9yaWdpbmFsTm9kZTsKICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgIG5vZGUuc2V0QXR0cmlidXRlKCdpZCcsIGlkKTsKCiAgICAgICAgICAgICAgICAgdmFyIHByb3BzID0gX21lanMyLmRlZmF1bHQuaHRtbDVtZWRpYS5wcm9wZXJ0aWVzLAogICAgICAgICAgICAgICAgICAgICBhc3NpZ25HZXR0ZXJzU2V0dGVycyA9IGZ1bmN0aW9uIGFzc2lnbkdldHRlcnNTZXR0ZXJzKHByb3BOYW1lKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2FwTmFtZSA9ICcnICsgcHJvcE5hbWUuc3Vic3RyaW5nKDAsIDEpLnRvVXBwZXJDYXNlKCkgKyBwcm9wTmFtZS5zdWJzdHJpbmcoMSk7CgogICAgICAgICAgICAgICAgICAgICAgICAgbm9kZVsnZ2V0JyArIGNhcE5hbWVdID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBub2RlW3Byb3BOYW1lXTsKICAgICAgICAgICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgICAgICAgICAgbm9kZVsnc2V0JyArIGNhcE5hbWVdID0gZnVuY3Rpb24gKHZhbHVlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9tZWpzMi5kZWZhdWx0Lmh0bWw1bWVkaWEucmVhZE9ubHlQcm9wZXJ0aWVzLmluZGV4T2YocHJvcE5hbWUpID09PSAtMSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlW3Byb3BOYW1lXSA9IHZhbHVlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBfdG90YWwgPSBwcm9wcy5sZW5ndGg7IGkgPCBfdG90YWw7IGkrKykgewogICAgICAgICAgICAgICAgICAgICBhc3NpZ25HZXR0ZXJzU2V0dGVycyhwcm9wc1tpXSk7CiAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICB2YXIgZXZlbnRzID0gX21lanMyLmRlZmF1bHQuaHRtbDVtZWRpYS5ldmVudHMuY29uY2F0KFsnY2xpY2snLCAnbW91c2VvdmVyJywgJ21vdXNlb3V0J10pLmZpbHRlcihmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgICAgICByZXR1cm4gZSAhPT0gJ2Vycm9yJzsKICAgICAgICAgICAgICAgICB9KSwKICAgICAgICAgICAgICAgICAgICAgYXNzaWduRXZlbnRzID0gZnVuY3Rpb24gYXNzaWduRXZlbnRzKGV2ZW50TmFtZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNBY3RpdmUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9ldmVudCA9ICgwLCBfZ2VuZXJhbC5jcmVhdGVFdmVudCkoZS50eXBlLCBlLnRhcmdldCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lZGlhRWxlbWVudC5kaXNwYXRjaEV2ZW50KF9ldmVudCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX3RvdGFsMiA9IGV2ZW50cy5sZW5ndGg7IF9pIDwgX3RvdGFsMjsgX2krKykgewogICAgICAgICAgICAgICAgICAgICBhc3NpZ25FdmVudHMoZXZlbnRzW19pXSk7CiAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICBub2RlLnNldFNpemUgPSBmdW5jdGlvbiAod2lkdGgsIGhlaWdodCkgewogICAgICAgICAgICAgICAgICAgICBub2RlLnN0eWxlLndpZHRoID0gd2lkdGggKyAncHgnOwogICAgICAgICAgICAgICAgICAgICBub2RlLnN0eWxlLmhlaWdodCA9IGhlaWdodCArICdweCc7CiAgICAgICAgICAgICAgICAgICAgIHJldHVybiBub2RlOwogICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgIG5vZGUuaGlkZSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgaXNBY3RpdmUgPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgbm9kZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOwoKICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5vZGU7CiAgICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICAgbm9kZS5zaG93ID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICBpc0FjdGl2ZSA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgIG5vZGUuc3R5bGUuZGlzcGxheSA9ICcnOwoKICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5vZGU7CiAgICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gMCwKICAgICAgICAgICAgICAgICAgICAgdG90YWwgPSBtZWRpYUZpbGVzLmxlbmd0aDsKICAgICAgICAgICAgICAgICBpZiAodG90YWwgPiAwKSB7CiAgICAgICAgICAgICAgICAgICAgIGZvciAoOyBpbmRleCA8IHRvdGFsOyBpbmRleCsrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3JlbmRlcmVyLnJlbmRlcmVyLnJlbmRlcmVyc1tvcHRpb25zLnByZWZpeF0uY2FuUGxheVR5cGUobWVkaWFGaWxlc1tpbmRleF0udHlwZSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLnNldEF0dHJpYnV0ZSgnc3JjJywgbWVkaWFGaWxlc1tpbmRleF0uc3JjKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgbm9kZS5hZGRFdmVudExpc3RlbmVyKCdlcnJvcicsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICAgICAgICAgICAgIGlmIChlICYmIGUudGFyZ2V0ICYmIGUudGFyZ2V0LmVycm9yICYmIGUudGFyZ2V0LmVycm9yLmNvZGUgPT09IDQgJiYgaXNBY3RpdmUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCA8IHRvdGFsICYmIG1lZGlhRmlsZXNbaW5kZXggKyAxXSAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5zcmMgPSBtZWRpYUZpbGVzW2luZGV4KytdLnNyYzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLmxvYWQoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLnBsYXkoKTsKICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVkaWFFbGVtZW50LmdlbmVyYXRlRXJyb3IoJ01lZGlhIGVycm9yOiBGb3JtYXQocykgbm90IHN1cHBvcnRlZCBvciBzb3VyY2Uocykgbm90IGZvdW5kJywgbWVkaWFGaWxlcyk7CiAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgdmFyIGV2ZW50ID0gKDAsIF9nZW5lcmFsLmNyZWF0ZUV2ZW50KSgncmVuZGVyZXJyZWFkeScsIG5vZGUpOwogICAgICAgICAgICAgICAgIG1lZGlhRWxlbWVudC5kaXNwYXRjaEV2ZW50KGV2ZW50KTsKCiAgICAgICAgICAgICAgICAgcmV0dXJuIG5vZGU7CiAgICAgICAgICAgICB9CiAgICAgICAgIH07CgogICAgICAgICBfd2luZG93Mi5kZWZhdWx0Lkh0bWxNZWRpYUVsZW1lbnQgPSBfbWVqczIuZGVmYXVsdC5IdG1sTWVkaWFFbGVtZW50ID0gSHRtbE1lZGlhRWxlbWVudDsKCiAgICAgICAgIF9yZW5kZXJlci5yZW5kZXJlci5hZGQoSHRtbE1lZGlhRWxlbWVudCk7CgogICAgIH0sIHsgIjIiOiAyLCAiMjUiOiAyNSwgIjI3IjogMjcsICIzIjogMywgIjciOiA3LCAiOCI6IDggfV0sIDI0OiBbZnVuY3Rpb24gKF9kZXJlcV8sIG1vZHVsZSwgZXhwb3J0cykgewogICAgICAgICAndXNlIHN0cmljdCc7CgogICAgICAgICB2YXIgX3dpbmRvdyA9IF9kZXJlcV8oMyk7CgogICAgICAgICB2YXIgX3dpbmRvdzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93aW5kb3cpOwoKICAgICAgICAgdmFyIF9kb2N1bWVudCA9IF9kZXJlcV8oMik7CgogICAgICAgICB2YXIgX2RvY3VtZW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RvY3VtZW50KTsKCiAgICAgICAgIHZhciBfbWVqcyA9IF9kZXJlcV8oNyk7CgogICAgICAgICB2YXIgX21lanMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbWVqcyk7CgogICAgICAgICB2YXIgX3JlbmRlcmVyID0gX2RlcmVxXyg4KTsKCiAgICAgICAgIHZhciBfZ2VuZXJhbCA9IF9kZXJlcV8oMjcpOwoKICAgICAgICAgdmFyIF9tZWRpYSA9IF9kZXJlcV8oMjgpOwoKICAgICAgICAgdmFyIF9kb20gPSBfZGVyZXFfKDI2KTsKCiAgICAgICAgIGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgogICAgICAgICB2YXIgWW91VHViZUFwaSA9IHsKICAgICAgICAgICAgIGlzSWZyYW1lU3RhcnRlZDogZmFsc2UsCgogICAgICAgICAgICAgaXNJZnJhbWVMb2FkZWQ6IGZhbHNlLAoKICAgICAgICAgICAgIGlmcmFtZVF1ZXVlOiBbXSwKCiAgICAgICAgICAgICBlbnF1ZXVlSWZyYW1lOiBmdW5jdGlvbiBlbnF1ZXVlSWZyYW1lKHNldHRpbmdzKSB7CiAgICAgICAgICAgICAgICAgWW91VHViZUFwaS5pc0xvYWRlZCA9IHR5cGVvZiBZVCAhPT0gJ3VuZGVmaW5lZCcgJiYgWVQubG9hZGVkOwoKICAgICAgICAgICAgICAgICBpZiAoWW91VHViZUFwaS5pc0xvYWRlZCkgewogICAgICAgICAgICAgICAgICAgICBZb3VUdWJlQXBpLmNyZWF0ZUlmcmFtZShzZXR0aW5ncyk7CiAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgWW91VHViZUFwaS5sb2FkSWZyYW1lQXBpKCk7CiAgICAgICAgICAgICAgICAgICAgIFlvdVR1YmVBcGkuaWZyYW1lUXVldWUucHVzaChzZXR0aW5ncyk7CiAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgfSwKCiAgICAgICAgICAgICBsb2FkSWZyYW1lQXBpOiBmdW5jdGlvbiBsb2FkSWZyYW1lQXBpKCkgewogICAgICAgICAgICAgICAgIGlmICghWW91VHViZUFwaS5pc0lmcmFtZVN0YXJ0ZWQpIHsKICAgICAgICAgICAgICAgICAgICAgKDAsIF9kb20ubG9hZFNjcmlwdCkoJ2h0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3BsYXllcl9hcGknKTsKICAgICAgICAgICAgICAgICAgICAgWW91VHViZUFwaS5pc0lmcmFtZVN0YXJ0ZWQgPSB0cnVlOwogICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgIH0sCgogICAgICAgICAgICAgaUZyYW1lUmVhZHk6IGZ1bmN0aW9uIGlGcmFtZVJlYWR5KCkgewoKICAgICAgICAgICAgICAgICBZb3VUdWJlQXBpLmlzTG9hZGVkID0gdHJ1ZTsKICAgICAgICAgICAgICAgICBZb3VUdWJlQXBpLmlzSWZyYW1lTG9hZGVkID0gdHJ1ZTsKCiAgICAgICAgICAgICAgICAgd2hpbGUgKFlvdVR1YmVBcGkuaWZyYW1lUXVldWUubGVuZ3RoID4gMCkgewogICAgICAgICAgICAgICAgICAgICB2YXIgc2V0dGluZ3MgPSBZb3VUdWJlQXBpLmlmcmFtZVF1ZXVlLnBvcCgpOwogICAgICAgICAgICAgICAgICAgICBZb3VUdWJlQXBpLmNyZWF0ZUlmcmFtZShzZXR0aW5ncyk7CiAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgfSwKCiAgICAgICAgICAgICBjcmVhdGVJZnJhbWU6IGZ1bmN0aW9uIGNyZWF0ZUlmcmFtZShzZXR0aW5ncykgewogICAgICAgICAgICAgICAgIHJldHVybiBuZXcgWVQuUGxheWVyKHNldHRpbmdzLmNvbnRhaW5lcklkLCBzZXR0aW5ncyk7CiAgICAgICAgICAgICB9LAoKICAgICAgICAgICAgIGdldFlvdVR1YmVJZDogZnVuY3Rpb24gZ2V0WW91VHViZUlkKHVybCkgewoKICAgICAgICAgICAgICAgICB2YXIgeW91VHViZUlkID0gJyc7CgogICAgICAgICAgICAgICAgIGlmICh1cmwuaW5kZXhPZignPycpID4gMCkgewogICAgICAgICAgICAgICAgICAgICB5b3VUdWJlSWQgPSBZb3VUdWJlQXBpLmdldFlvdVR1YmVJZEZyb21QYXJhbSh1cmwpOwoKICAgICAgICAgICAgICAgICAgICAgaWYgKHlvdVR1YmVJZCA9PT0gJycpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHlvdVR1YmVJZCA9IFlvdVR1YmVBcGkuZ2V0WW91VHViZUlkRnJvbVVybCh1cmwpOwogICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgeW91VHViZUlkID0gWW91VHViZUFwaS5nZXRZb3VUdWJlSWRGcm9tVXJsKHVybCk7CiAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICB2YXIgaWQgPSB5b3VUdWJlSWQuc3Vic3RyaW5nKHlvdVR1YmVJZC5sYXN0SW5kZXhPZignLycpICsgMSk7CiAgICAgICAgICAgICAgICAgeW91VHViZUlkID0gaWQuc3BsaXQoJz8nKTsKICAgICAgICAgICAgICAgICByZXR1cm4geW91VHViZUlkWzBdOwogICAgICAgICAgICAgfSwKCiAgICAgICAgICAgICBnZXRZb3VUdWJlSWRGcm9tUGFyYW06IGZ1bmN0aW9uIGdldFlvdVR1YmVJZEZyb21QYXJhbSh1cmwpIHsKCiAgICAgICAgICAgICAgICAgaWYgKHVybCA9PT0gdW5kZWZpbmVkIHx8IHVybCA9PT0gbnVsbCB8fCAhdXJsLnRyaW0oKS5sZW5ndGgpIHsKICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICB2YXIgcGFydHMgPSB1cmwuc3BsaXQoJz8nKSwKICAgICAgICAgICAgICAgICAgICAgcGFyYW1ldGVycyA9IHBhcnRzWzFdLnNwbGl0KCcmJyk7CgogICAgICAgICAgICAgICAgIHZhciB5b3VUdWJlSWQgPSAnJzsKCiAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIHRvdGFsID0gcGFyYW1ldGVycy5sZW5ndGg7IGkgPCB0b3RhbDsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgIHZhciBwYXJhbVBhcnRzID0gcGFyYW1ldGVyc1tpXS5zcGxpdCgnPScpOwogICAgICAgICAgICAgICAgICAgICBpZiAocGFyYW1QYXJ0c1swXSA9PT0gJ3YnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICB5b3VUdWJlSWQgPSBwYXJhbVBhcnRzWzFdOwogICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgIHJldHVybiB5b3VUdWJlSWQ7CiAgICAgICAgICAgICB9LAoKICAgICAgICAgICAgIGdldFlvdVR1YmVJZEZyb21Vcmw6IGZ1bmN0aW9uIGdldFlvdVR1YmVJZEZyb21VcmwodXJsKSB7CgogICAgICAgICAgICAgICAgIGlmICh1cmwgPT09IHVuZGVmaW5lZCB8fCB1cmwgPT09IG51bGwgfHwgIXVybC50cmltKCkubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsOwogICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgdmFyIHBhcnRzID0gdXJsLnNwbGl0KCc/Jyk7CiAgICAgICAgICAgICAgICAgdXJsID0gcGFydHNbMF07CiAgICAgICAgICAgICAgICAgcmV0dXJuIHVybC5zdWJzdHJpbmcodXJsLmxhc3RJbmRleE9mKCcvJykgKyAxKTsKICAgICAgICAgICAgIH0sCgogICAgICAgICAgICAgZ2V0WW91VHViZU5vQ29va2llVXJsOiBmdW5jdGlvbiBnZXRZb3VUdWJlTm9Db29raWVVcmwodXJsKSB7CiAgICAgICAgICAgICAgICAgaWYgKHVybCA9PT0gdW5kZWZpbmVkIHx8IHVybCA9PT0gbnVsbCB8fCAhdXJsLnRyaW0oKS5sZW5ndGggfHwgdXJsLmluZGV4T2YoJy8vd3d3LnlvdXR1YmUnKSA9PT0gLTEpIHsKICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVybDsKICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgIHZhciBwYXJ0cyA9IHVybC5zcGxpdCgnLycpOwogICAgICAgICAgICAgICAgIHBhcnRzWzJdID0gcGFydHNbMl0ucmVwbGFjZSgnLmNvbScsICctbm9jb29raWUuY29tJyk7CiAgICAgICAgICAgICAgICAgcmV0dXJuIHBhcnRzLmpvaW4oJy8nKTsKICAgICAgICAgICAgIH0KICAgICAgICAgfTsKCiAgICAgICAgIHZhciBZb3VUdWJlSWZyYW1lUmVuZGVyZXIgPSB7CiAgICAgICAgICAgICBuYW1lOiAneW91dHViZV9pZnJhbWUnLAoKICAgICAgICAgICAgIG9wdGlvbnM6IHsKICAgICAgICAgICAgICAgICBwcmVmaXg6ICd5b3V0dWJlX2lmcmFtZScsCgogICAgICAgICAgICAgICAgIHlvdXR1YmU6IHsKICAgICAgICAgICAgICAgICAgICAgYXV0b3BsYXk6IDAsCiAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xzOiAwLAogICAgICAgICAgICAgICAgICAgICBkaXNhYmxla2I6IDEsCiAgICAgICAgICAgICAgICAgICAgIGVuZDogMCwKICAgICAgICAgICAgICAgICAgICAgbG9vcDogMCwKICAgICAgICAgICAgICAgICAgICAgbW9kZXN0YnJhbmRpbmc6IDAsCiAgICAgICAgICAgICAgICAgICAgIHBsYXlzaW5saW5lOiAwLAogICAgICAgICAgICAgICAgICAgICByZWw6IDAsCiAgICAgICAgICAgICAgICAgICAgIHNob3dpbmZvOiAwLAogICAgICAgICAgICAgICAgICAgICBzdGFydDogMCwKICAgICAgICAgICAgICAgICAgICAgaXZfbG9hZF9wb2xpY3k6IDMsCgogICAgICAgICAgICAgICAgICAgICBub2Nvb2tpZTogZmFsc2UsCgogICAgICAgICAgICAgICAgICAgICBpbWFnZVF1YWxpdHk6IG51bGwKICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICB9LAoKICAgICAgICAgICAgIGNhblBsYXlUeXBlOiBmdW5jdGlvbiBjYW5QbGF5VHlwZSh0eXBlKSB7CiAgICAgICAgICAgICAgICAgcmV0dXJuIH5bJ3ZpZGVvL3lvdXR1YmUnLCAndmlkZW8veC15b3V0dWJlJ10uaW5kZXhPZih0eXBlLnRvTG93ZXJDYXNlKCkpOwogICAgICAgICAgICAgfSwKCiAgICAgICAgICAgICBjcmVhdGU6IGZ1bmN0aW9uIGNyZWF0ZShtZWRpYUVsZW1lbnQsIG9wdGlvbnMsIG1lZGlhRmlsZXMpIHsKCiAgICAgICAgICAgICAgICAgdmFyIHlvdXR1YmUgPSB7fSwKICAgICAgICAgICAgICAgICAgICAgYXBpU3RhY2sgPSBbXSwKICAgICAgICAgICAgICAgICAgICAgcmVhZHlTdGF0ZSA9IDQ7CgogICAgICAgICAgICAgICAgIHZhciB5b3VUdWJlQXBpID0gbnVsbCwKICAgICAgICAgICAgICAgICAgICAgcGF1c2VkID0gdHJ1ZSwKICAgICAgICAgICAgICAgICAgICAgZW5kZWQgPSBmYWxzZSwKICAgICAgICAgICAgICAgICAgICAgeW91VHViZUlmcmFtZSA9IG51bGwsCiAgICAgICAgICAgICAgICAgICAgIHZvbHVtZSA9IDE7CgogICAgICAgICAgICAgICAgIHlvdXR1YmUub3B0aW9ucyA9IG9wdGlvbnM7CiAgICAgICAgICAgICAgICAgeW91dHViZS5pZCA9IG1lZGlhRWxlbWVudC5pZCArICdfJyArIG9wdGlvbnMucHJlZml4OwogICAgICAgICAgICAgICAgIHlvdXR1YmUubWVkaWFFbGVtZW50ID0gbWVkaWFFbGVtZW50OwoKICAgICAgICAgICAgICAgICB2YXIgcHJvcHMgPSBfbWVqczIuZGVmYXVsdC5odG1sNW1lZGlhLnByb3BlcnRpZXMsCiAgICAgICAgICAgICAgICAgICAgIGFzc2lnbkdldHRlcnNTZXR0ZXJzID0gZnVuY3Rpb24gYXNzaWduR2V0dGVyc1NldHRlcnMocHJvcE5hbWUpIHsKCiAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2FwTmFtZSA9ICcnICsgcHJvcE5hbWUuc3Vic3RyaW5nKDAsIDEpLnRvVXBwZXJDYXNlKCkgKyBwcm9wTmFtZS5zdWJzdHJpbmcoMSk7CgogICAgICAgICAgICAgICAgICAgICAgICAgeW91dHViZVsnZ2V0JyArIGNhcE5hbWVdID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh5b3VUdWJlQXBpICE9PSBudWxsKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IG51bGw7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHByb3BOYW1lKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdjdXJyZW50VGltZSc6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHlvdVR1YmVBcGkuZ2V0Q3VycmVudFRpbWUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2R1cmF0aW9uJzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geW91VHViZUFwaS5nZXREdXJhdGlvbigpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAndm9sdW1lJzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2b2x1bWUgPSB5b3VUdWJlQXBpLmdldFZvbHVtZSgpIC8gMTAwOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2b2x1bWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdwbGF5YmFja1JhdGUnOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB5b3VUdWJlQXBpLmdldFBsYXliYWNrUmF0ZSgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAncGF1c2VkJzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGF1c2VkOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnZW5kZWQnOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlbmRlZDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ211dGVkJzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geW91VHViZUFwaS5pc011dGVkKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdidWZmZXJlZCc6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBlcmNlbnRMb2FkZWQgPSB5b3VUdWJlQXBpLmdldFZpZGVvTG9hZGVkRnJhY3Rpb24oKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHVyYXRpb24gPSB5b3VUdWJlQXBpLmdldER1cmF0aW9uKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IGZ1bmN0aW9uIHN0YXJ0KCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZDogZnVuY3Rpb24gZW5kKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBlcmNlbnRMb2FkZWQgKiBkdXJhdGlvbjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVuZ3RoOiAxCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3NyYyc6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHlvdVR1YmVBcGkuZ2V0VmlkZW9VcmwoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3JlYWR5U3RhdGUnOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZWFkeVN0YXRlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICAgICAgICAgICB5b3V0dWJlWydzZXQnICsgY2FwTmFtZV0gPSBmdW5jdGlvbiAodmFsdWUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoeW91VHViZUFwaSAhPT0gbnVsbCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHByb3BOYW1lKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdzcmMnOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1cmwgPSB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnID8gdmFsdWUgOiB2YWx1ZVswXS5zcmMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF92aWRlb0lkID0gWW91VHViZUFwaS5nZXRZb3VUdWJlSWQodXJsKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1lZGlhRWxlbWVudC5vcmlnaW5hbE5vZGUuYXV0b3BsYXkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeW91VHViZUFwaS5sb2FkVmlkZW9CeUlkKF92aWRlb0lkKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5b3VUdWJlQXBpLmN1ZVZpZGVvQnlJZChfdmlkZW9JZCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnY3VycmVudFRpbWUnOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlvdVR1YmVBcGkuc2Vla1RvKHZhbHVlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ211dGVkJzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeW91VHViZUFwaS5tdXRlKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeW91VHViZUFwaS51bk11dGUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBldmVudCA9ICgwLCBfZ2VuZXJhbC5jcmVhdGVFdmVudCkoJ3ZvbHVtZWNoYW5nZScsIHlvdXR1YmUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZWRpYUVsZW1lbnQuZGlzcGF0Y2hFdmVudChldmVudCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgNTApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAndm9sdW1lJzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2b2x1bWUgPSB2YWx1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5b3VUdWJlQXBpLnNldFZvbHVtZSh2YWx1ZSAqIDEwMCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBldmVudCA9ICgwLCBfZ2VuZXJhbC5jcmVhdGVFdmVudCkoJ3ZvbHVtZWNoYW5nZScsIHlvdXR1YmUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZWRpYUVsZW1lbnQuZGlzcGF0Y2hFdmVudChldmVudCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgNTApOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAncGxheWJhY2tSYXRlJzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5b3VUdWJlQXBpLnNldFBsYXliYWNrUmF0ZSh2YWx1ZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBldmVudCA9ICgwLCBfZ2VuZXJhbC5jcmVhdGVFdmVudCkoJ3JhdGVjaGFuZ2UnLCB5b3V0dWJlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVkaWFFbGVtZW50LmRpc3BhdGNoRXZlbnQoZXZlbnQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIDUwKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3JlYWR5U3RhdGUnOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBldmVudCA9ICgwLCBfZ2VuZXJhbC5jcmVhdGVFdmVudCkoJ2NhbnBsYXknLCB5b3V0dWJlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZWRpYUVsZW1lbnQuZGlzcGF0Y2hFdmVudChldmVudCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwaVN0YWNrLnB1c2goeyB0eXBlOiAnc2V0JywgcHJvcE5hbWU6IHByb3BOYW1lLCB2YWx1ZTogdmFsdWUgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIHRvdGFsID0gcHJvcHMubGVuZ3RoOyBpIDwgdG90YWw7IGkrKykgewogICAgICAgICAgICAgICAgICAgICBhc3NpZ25HZXR0ZXJzU2V0dGVycyhwcm9wc1tpXSk7CiAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICB2YXIgbWV0aG9kcyA9IF9tZWpzMi5kZWZhdWx0Lmh0bWw1bWVkaWEubWV0aG9kcywKICAgICAgICAgICAgICAgICAgICAgYXNzaWduTWV0aG9kcyA9IGZ1bmN0aW9uIGFzc2lnbk1ldGhvZHMobWV0aG9kTmFtZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgeW91dHViZVttZXRob2ROYW1lXSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoeW91VHViZUFwaSAhPT0gbnVsbCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKG1ldGhvZE5hbWUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3BsYXknOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdXNlZCA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB5b3VUdWJlQXBpLnBsYXlWaWRlbygpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAncGF1c2UnOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdXNlZCA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHlvdVR1YmVBcGkucGF1c2VWaWRlbygpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnbG9hZCc6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcGlTdGFjay5wdXNoKHsgdHlwZTogJ2NhbGwnLCBtZXRob2ROYW1lOiBtZXRob2ROYW1lIH0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX3RvdGFsID0gbWV0aG9kcy5sZW5ndGg7IF9pIDwgX3RvdGFsOyBfaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgIGFzc2lnbk1ldGhvZHMobWV0aG9kc1tfaV0pOwogICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgdmFyIGVycm9ySGFuZGxlciA9IGZ1bmN0aW9uIGVycm9ySGFuZGxlcihlcnJvcikgewogICAgICAgICAgICAgICAgICAgICB2YXIgbWVzc2FnZSA9ICcnOwogICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGVycm9yLmRhdGEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlID0gJ1RoZSByZXF1ZXN0IGNvbnRhaW5zIGFuIGludmFsaWQgcGFyYW1ldGVyIHZhbHVlLiBWZXJpZnkgdGhhdCB2aWRlbyBJRCBoYXMgMTEgY2hhcmFjdGVycyBhbmQgdGhhdCBjb250YWlucyBubyBpbnZhbGlkIGNoYXJhY3RlcnMsIHN1Y2ggYXMgZXhjbGFtYXRpb24gcG9pbnRzIG9yIGFzdGVyaXNrcy4nOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA1OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSAnVGhlIHJlcXVlc3RlZCBjb250ZW50IGNhbm5vdCBiZSBwbGF5ZWQgaW4gYW4gSFRNTDUgcGxheWVyIG9yIGFub3RoZXIgZXJyb3IgcmVsYXRlZCB0byB0aGUgSFRNTDUgcGxheWVyIGhhcyBvY2N1cnJlZC4nOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxMDA6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSA9ICdUaGUgdmlkZW8gcmVxdWVzdGVkIHdhcyBub3QgZm91bmQuIEVpdGhlciB2aWRlbyBoYXMgYmVlbiByZW1vdmVkIG9yIGhhcyBiZWVuIG1hcmtlZCBhcyBwcml2YXRlLic7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDEwMToKICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTA1OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSAnVGhlIG93bmVyIG9mIHRoZSByZXF1ZXN0ZWQgdmlkZW8gZG9lcyBub3QgYWxsb3cgaXQgdG8gYmUgcGxheWVkIGluIGVtYmVkZGVkIHBsYXllcnMuJzsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSA9ICdVbmtub3duIGVycm9yLic7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgbWVkaWFFbGVtZW50LmdlbmVyYXRlRXJyb3IoJ0NvZGUgJyArIGVycm9yLmRhdGEgKyAnOiAnICsgbWVzc2FnZSwgbWVkaWFGaWxlcyk7CiAgICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICAgdmFyIHlvdXR1YmVDb250YWluZXIgPSBfZG9jdW1lbnQyLmRlZmF1bHQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CiAgICAgICAgICAgICAgICAgeW91dHViZUNvbnRhaW5lci5pZCA9IHlvdXR1YmUuaWQ7CgogICAgICAgICAgICAgICAgIGlmICh5b3V0dWJlLm9wdGlvbnMueW91dHViZS5ub2Nvb2tpZSkgewogICAgICAgICAgICAgICAgICAgICBtZWRpYUVsZW1lbnQub3JpZ2luYWxOb2RlLnNyYyA9IFlvdVR1YmVBcGkuZ2V0WW91VHViZU5vQ29va2llVXJsKG1lZGlhRmlsZXNbMF0uc3JjKTsKICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgIG1lZGlhRWxlbWVudC5vcmlnaW5hbE5vZGUucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoeW91dHViZUNvbnRhaW5lciwgbWVkaWFFbGVtZW50Lm9yaWdpbmFsTm9kZSk7CiAgICAgICAgICAgICAgICAgbWVkaWFFbGVtZW50Lm9yaWdpbmFsTm9kZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOwoKICAgICAgICAgICAgICAgICB2YXIgaXNBdWRpbyA9IG1lZGlhRWxlbWVudC5vcmlnaW5hbE5vZGUudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSAnYXVkaW8nLAogICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBpc0F1ZGlvID8gJzEnIDogbWVkaWFFbGVtZW50Lm9yaWdpbmFsTm9kZS5oZWlnaHQsCiAgICAgICAgICAgICAgICAgICAgIHdpZHRoID0gaXNBdWRpbyA/ICcxJyA6IG1lZGlhRWxlbWVudC5vcmlnaW5hbE5vZGUud2lkdGgsCiAgICAgICAgICAgICAgICAgICAgIHZpZGVvSWQgPSBZb3VUdWJlQXBpLmdldFlvdVR1YmVJZChtZWRpYUZpbGVzWzBdLnNyYyksCiAgICAgICAgICAgICAgICAgICAgIHlvdXR1YmVTZXR0aW5ncyA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiB5b3V0dWJlLmlkLAogICAgICAgICAgICAgICAgICAgICAgICAgY29udGFpbmVySWQ6IHlvdXR1YmVDb250YWluZXIuaWQsCiAgICAgICAgICAgICAgICAgICAgICAgICB2aWRlb0lkOiB2aWRlb0lkLAogICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBoZWlnaHQsCiAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogd2lkdGgsCiAgICAgICAgICAgICAgICAgICAgICAgICBwbGF5ZXJWYXJzOiBPYmplY3QuYXNzaWduKHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sczogMCwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWw6IDAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWtiOiAxLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3dpbmZvOiAwLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVzdGJyYW5kaW5nOiAwLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGh0bWw1OiAxLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl2X2xvYWRfcG9saWN5OiAzCiAgICAgICAgICAgICAgICAgICAgICAgICB9LCB5b3V0dWJlLm9wdGlvbnMueW91dHViZSksCiAgICAgICAgICAgICAgICAgICAgICAgICBvcmlnaW46IF93aW5kb3cyLmRlZmF1bHQubG9jYXRpb24uaG9zdCwKICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50czogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uUmVhZHk6IGZ1bmN0aW9uIG9uUmVhZHkoZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZWRpYUVsZW1lbnQueW91VHViZUFwaSA9IHlvdVR1YmVBcGkgPSBlLnRhcmdldDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVkaWFFbGVtZW50LnlvdVR1YmVTdGF0ZSA9IHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdXNlZDogdHJ1ZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZGVkOiBmYWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFwaVN0YWNrLmxlbmd0aCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2kyID0gMCwgX3RvdGFsMiA9IGFwaVN0YWNrLmxlbmd0aDsgX2kyIDwgX3RvdGFsMjsgX2kyKyspIHsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0YWNrSXRlbSA9IGFwaVN0YWNrW19pMl07CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdGFja0l0ZW0udHlwZSA9PT0gJ3NldCcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHByb3BOYW1lID0gc3RhY2tJdGVtLnByb3BOYW1lLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FwTmFtZSA9ICcnICsgcHJvcE5hbWUuc3Vic3RyaW5nKDAsIDEpLnRvVXBwZXJDYXNlKCkgKyBwcm9wTmFtZS5zdWJzdHJpbmcoMSk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5b3V0dWJlWydzZXQnICsgY2FwTmFtZV0oc3RhY2tJdGVtLnZhbHVlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHN0YWNrSXRlbS50eXBlID09PSAnY2FsbCcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeW91dHViZVtzdGFja0l0ZW0ubWV0aG9kTmFtZV0oKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlvdVR1YmVJZnJhbWUgPSB5b3VUdWJlQXBpLmdldElmcmFtZSgpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1lZGlhRWxlbWVudC5vcmlnaW5hbE5vZGUubXV0ZWQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlvdVR1YmVBcGkubXV0ZSgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXZlbnRzID0gWydtb3VzZW92ZXInLCAnbW91c2VvdXQnXSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFzc2lnbkV2ZW50cyA9IGZ1bmN0aW9uIGFzc2lnbkV2ZW50cyhlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5ld0V2ZW50ID0gKDAsIF9nZW5lcmFsLmNyZWF0ZUV2ZW50KShlLnR5cGUsIHlvdXR1YmUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lZGlhRWxlbWVudC5kaXNwYXRjaEV2ZW50KG5ld0V2ZW50KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfaTMgPSAwLCBfdG90YWwzID0gZXZlbnRzLmxlbmd0aDsgX2kzIDwgX3RvdGFsMzsgX2kzKyspIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlvdVR1YmVJZnJhbWUuYWRkRXZlbnRMaXN0ZW5lcihldmVudHNbX2kzXSwgYXNzaWduRXZlbnRzLCBmYWxzZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbml0RXZlbnRzID0gWydyZW5kZXJlcnJlYWR5JywgJ2xvYWRlZG1ldGFkYXRhJywgJ2xvYWRlZGRhdGEnLCAnY2FucGxheSddOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2k0ID0gMCwgX3RvdGFsNCA9IGluaXRFdmVudHMubGVuZ3RoOyBfaTQgPCBfdG90YWw0OyBfaTQrKykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV2ZW50ID0gKDAsIF9nZW5lcmFsLmNyZWF0ZUV2ZW50KShpbml0RXZlbnRzW19pNF0sIHlvdXR1YmUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVkaWFFbGVtZW50LmRpc3BhdGNoRXZlbnQoZXZlbnQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvblN0YXRlQ2hhbmdlOiBmdW5jdGlvbiBvblN0YXRlQ2hhbmdlKGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV2ZW50cyA9IFtdOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChlLmRhdGEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgLTE6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRzID0gWydsb2FkZWRtZXRhZGF0YSddOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdXNlZCA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kZWQgPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudHMgPSBbJ2VuZGVkJ107CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGF1c2VkID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kZWQgPSAheW91dHViZS5vcHRpb25zLnlvdXR1YmUubG9vcDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXlvdXR1YmUub3B0aW9ucy55b3V0dWJlLmxvb3ApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeW91dHViZS5zdG9wSW50ZXJ2YWwoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRzID0gWydwbGF5JywgJ3BsYXlpbmcnXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXVzZWQgPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmRlZCA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlvdXR1YmUuc3RhcnRJbnRlcnZhbCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50cyA9IFsncGF1c2UnXTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXVzZWQgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZGVkID0gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeW91dHViZS5zdG9wSW50ZXJ2YWwoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudHMgPSBbJ3Byb2dyZXNzJ107CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kZWQgPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudHMgPSBbJ2xvYWRlZGRhdGEnLCAnbG9hZGVkbWV0YWRhdGEnLCAnY2FucGxheSddOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhdXNlZCA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kZWQgPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2k1ID0gMCwgX3RvdGFsNSA9IGV2ZW50cy5sZW5ndGg7IF9pNSA8IF90b3RhbDU7IF9pNSsrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXZlbnQgPSAoMCwgX2dlbmVyYWwuY3JlYXRlRXZlbnQpKGV2ZW50c1tfaTVdLCB5b3V0dWJlKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lZGlhRWxlbWVudC5kaXNwYXRjaEV2ZW50KGV2ZW50KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25FcnJvcjogZnVuY3Rpb24gb25FcnJvcihlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlcnJvckhhbmRsZXIoZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgICBpZiAoaXNBdWRpbyB8fCBtZWRpYUVsZW1lbnQub3JpZ2luYWxOb2RlLmhhc0F0dHJpYnV0ZSgncGxheXNpbmxpbmUnKSkgewogICAgICAgICAgICAgICAgICAgICB5b3V0dWJlU2V0dGluZ3MucGxheWVyVmFycy5wbGF5c2lubGluZSA9IDE7CiAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICBpZiAobWVkaWFFbGVtZW50Lm9yaWdpbmFsTm9kZS5jb250cm9scykgewogICAgICAgICAgICAgICAgICAgICB5b3V0dWJlU2V0dGluZ3MucGxheWVyVmFycy5jb250cm9scyA9IDE7CiAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgIGlmIChtZWRpYUVsZW1lbnQub3JpZ2luYWxOb2RlLmF1dG9wbGF5KSB7CiAgICAgICAgICAgICAgICAgICAgIHlvdXR1YmVTZXR0aW5ncy5wbGF5ZXJWYXJzLmF1dG9wbGF5ID0gMTsKICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgaWYgKG1lZGlhRWxlbWVudC5vcmlnaW5hbE5vZGUubG9vcCkgewogICAgICAgICAgICAgICAgICAgICB5b3V0dWJlU2V0dGluZ3MucGxheWVyVmFycy5sb29wID0gMTsKICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgIGlmICgoeW91dHViZVNldHRpbmdzLnBsYXllclZhcnMubG9vcCAmJiBwYXJzZUludCh5b3V0dWJlU2V0dGluZ3MucGxheWVyVmFycy5sb29wLCAxMCkgPT09IDEgfHwgbWVkaWFFbGVtZW50Lm9yaWdpbmFsTm9kZS5zcmMuaW5kZXhPZignbG9vcD0nKSA+IC0xKSAmJiAheW91dHViZVNldHRpbmdzLnBsYXllclZhcnMucGxheWxpc3QgJiYgbWVkaWFFbGVtZW50Lm9yaWdpbmFsTm9kZS5zcmMuaW5kZXhPZigncGxheWxpc3Q9JykgPT09IC0xKSB7CiAgICAgICAgICAgICAgICAgICAgIHlvdXR1YmVTZXR0aW5ncy5wbGF5ZXJWYXJzLnBsYXlsaXN0ID0gWW91VHViZUFwaS5nZXRZb3VUdWJlSWQobWVkaWFFbGVtZW50Lm9yaWdpbmFsTm9kZS5zcmMpOwogICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgWW91VHViZUFwaS5lbnF1ZXVlSWZyYW1lKHlvdXR1YmVTZXR0aW5ncyk7CgogICAgICAgICAgICAgICAgIHlvdXR1YmUub25FdmVudCA9IGZ1bmN0aW9uIChldmVudE5hbWUsIHBsYXllciwgX3lvdVR1YmVTdGF0ZSkgewogICAgICAgICAgICAgICAgICAgICBpZiAoX3lvdVR1YmVTdGF0ZSAhPT0gbnVsbCAmJiBfeW91VHViZVN0YXRlICE9PSB1bmRlZmluZWQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIG1lZGlhRWxlbWVudC55b3VUdWJlU3RhdGUgPSBfeW91VHViZVN0YXRlOwogICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICAgeW91dHViZS5zZXRTaXplID0gZnVuY3Rpb24gKHdpZHRoLCBoZWlnaHQpIHsKICAgICAgICAgICAgICAgICAgICAgaWYgKHlvdVR1YmVBcGkgIT09IG51bGwpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHlvdVR1YmVBcGkuc2V0U2l6ZSh3aWR0aCwgaGVpZ2h0KTsKICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgeW91dHViZS5oaWRlID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICB5b3V0dWJlLnN0b3BJbnRlcnZhbCgpOwogICAgICAgICAgICAgICAgICAgICB5b3V0dWJlLnBhdXNlKCk7CiAgICAgICAgICAgICAgICAgICAgIGlmICh5b3VUdWJlSWZyYW1lKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICB5b3VUdWJlSWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7CiAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgIHlvdXR1YmUuc2hvdyA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgaWYgKHlvdVR1YmVJZnJhbWUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHlvdVR1YmVJZnJhbWUuc3R5bGUuZGlzcGxheSA9ICcnOwogICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICB5b3V0dWJlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgIHlvdVR1YmVBcGkuZGVzdHJveSgpOwogICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgeW91dHViZS5pbnRlcnZhbCA9IG51bGw7CgogICAgICAgICAgICAgICAgIHlvdXR1YmUuc3RhcnRJbnRlcnZhbCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgeW91dHViZS5pbnRlcnZhbCA9IHNldEludGVydmFsKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBldmVudCA9ICgwLCBfZ2VuZXJhbC5jcmVhdGVFdmVudCkoJ3RpbWV1cGRhdGUnLCB5b3V0dWJlKTsKICAgICAgICAgICAgICAgICAgICAgICAgIG1lZGlhRWxlbWVudC5kaXNwYXRjaEV2ZW50KGV2ZW50KTsKICAgICAgICAgICAgICAgICAgICAgfSwgMjUwKTsKICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgIHlvdXR1YmUuc3RvcEludGVydmFsID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICBpZiAoeW91dHViZS5pbnRlcnZhbCkgewogICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbCh5b3V0dWJlLmludGVydmFsKTsKICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgeW91dHViZS5nZXRQb3N0ZXJVcmwgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgIHZhciBxdWFsaXR5ID0gb3B0aW9ucy55b3V0dWJlLmltYWdlUXVhbGl0eSwKICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdXRpb25zID0gWydkZWZhdWx0JywgJ2hxZGVmYXVsdCcsICdtcWRlZmF1bHQnLCAnc2RkZWZhdWx0JywgJ21heHJlc2RlZmF1bHQnXSwKICAgICAgICAgICAgICAgICAgICAgICAgIGlkID0gWW91VHViZUFwaS5nZXRZb3VUdWJlSWQobWVkaWFFbGVtZW50Lm9yaWdpbmFsTm9kZS5zcmMpOwogICAgICAgICAgICAgICAgICAgICByZXR1cm4gcXVhbGl0eSAmJiByZXNvbHV0aW9ucy5pbmRleE9mKHF1YWxpdHkpID4gLTEgJiYgaWQgPyAnaHR0cHM6Ly9pbWcueW91dHViZS5jb20vdmkvJyArIGlkICsgJy8nICsgcXVhbGl0eSArICcuanBnJyA6ICcnOwogICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgIHJldHVybiB5b3V0dWJlOwogICAgICAgICAgICAgfQogICAgICAgICB9OwoKICAgICAgICAgX3dpbmRvdzIuZGVmYXVsdC5vbllvdVR1YmVQbGF5ZXJBUElSZWFkeSA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgIFlvdVR1YmVBcGkuaUZyYW1lUmVhZHkoKTsKICAgICAgICAgfTsKCiAgICAgICAgIF9tZWRpYS50eXBlQ2hlY2tzLnB1c2goZnVuY3Rpb24gKHVybCkgewogICAgICAgICAgICAgcmV0dXJuICgvXC9cLyh3d3dcLnlvdXR1YmV8eW91dHVcLj9iZSkvaS50ZXN0KHVybCkgPyAndmlkZW8veC15b3V0dWJlJyA6IG51bGwKICAgICAgICAgICAgICk7CiAgICAgICAgIH0pOwoKICAgICAgICAgX3JlbmRlcmVyLnJlbmRlcmVyLmFkZChZb3VUdWJlSWZyYW1lUmVuZGVyZXIpOwoKICAgICB9LCB7ICIyIjogMiwgIjI2IjogMjYsICIyNyI6IDI3LCAiMjgiOiAyOCwgIjMiOiAzLCAiNyI6IDcsICI4IjogOCB9XSwgMjU6IFtmdW5jdGlvbiAoX2RlcmVxXywgbW9kdWxlLCBleHBvcnRzKSB7CiAgICAgICAgICd1c2Ugc3RyaWN0JzsKCiAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICAgICAgICAgICAgIHZhbHVlOiB0cnVlCiAgICAgICAgIH0pOwogICAgICAgICBleHBvcnRzLmNhbmNlbEZ1bGxTY3JlZW4gPSBleHBvcnRzLnJlcXVlc3RGdWxsU2NyZWVuID0gZXhwb3J0cy5pc0Z1bGxTY3JlZW4gPSBleHBvcnRzLkZVTExTQ1JFRU5fRVZFTlRfTkFNRSA9IGV4cG9ydHMuSEFTX05BVElWRV9GVUxMU0NSRUVOX0VOQUJMRUQgPSBleHBvcnRzLkhBU19UUlVFX05BVElWRV9GVUxMU0NSRUVOID0gZXhwb3J0cy5IQVNfSU9TX0ZVTExTQ1JFRU4gPSBleHBvcnRzLkhBU19NU19OQVRJVkVfRlVMTFNDUkVFTiA9IGV4cG9ydHMuSEFTX01PWl9OQVRJVkVfRlVMTFNDUkVFTiA9IGV4cG9ydHMuSEFTX1dFQktJVF9OQVRJVkVfRlVMTFNDUkVFTiA9IGV4cG9ydHMuSEFTX05BVElWRV9GVUxMU0NSRUVOID0gZXhwb3J0cy5TVVBQT1JUU19OQVRJVkVfSExTID0gZXhwb3J0cy5TVVBQT1JUX1BBU1NJVkVfRVZFTlQgPSBleHBvcnRzLlNVUFBPUlRfUE9JTlRFUl9FVkVOVFMgPSBleHBvcnRzLkhBU19NU0UgPSBleHBvcnRzLklTX1NUT0NLX0FORFJPSUQgPSBleHBvcnRzLklTX1NBRkFSSSA9IGV4cG9ydHMuSVNfRklSRUZPWCA9IGV4cG9ydHMuSVNfQ0hST01FID0gZXhwb3J0cy5JU19FREdFID0gZXhwb3J0cy5JU19JRSA9IGV4cG9ydHMuSVNfQU5EUk9JRCA9IGV4cG9ydHMuSVNfSU9TID0gZXhwb3J0cy5JU19JUE9EID0gZXhwb3J0cy5JU19JUEhPTkUgPSBleHBvcnRzLklTX0lQQUQgPSBleHBvcnRzLlVBID0gZXhwb3J0cy5OQVYgPSB1bmRlZmluZWQ7CgogICAgICAgICB2YXIgX3dpbmRvdyA9IF9kZXJlcV8oMyk7CgogICAgICAgICB2YXIgX3dpbmRvdzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93aW5kb3cpOwoKICAgICAgICAgdmFyIF9kb2N1bWVudCA9IF9kZXJlcV8oMik7CgogICAgICAgICB2YXIgX2RvY3VtZW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RvY3VtZW50KTsKCiAgICAgICAgIHZhciBfbWVqcyA9IF9kZXJlcV8oNyk7CgogICAgICAgICB2YXIgX21lanMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbWVqcyk7CgogICAgICAgICBmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKICAgICAgICAgdmFyIE5BViA9IGV4cG9ydHMuTkFWID0gX3dpbmRvdzIuZGVmYXVsdC5uYXZpZ2F0b3I7CiAgICAgICAgIHZhciBVQSA9IGV4cG9ydHMuVUEgPSBOQVYudXNlckFnZW50LnRvTG93ZXJDYXNlKCk7CiAgICAgICAgIHZhciBJU19JUEFEID0gZXhwb3J0cy5JU19JUEFEID0gL2lwYWQvaS50ZXN0KFVBKSAmJiAhX3dpbmRvdzIuZGVmYXVsdC5NU1N0cmVhbTsKICAgICAgICAgdmFyIElTX0lQSE9ORSA9IGV4cG9ydHMuSVNfSVBIT05FID0gL2lwaG9uZS9pLnRlc3QoVUEpICYmICFfd2luZG93Mi5kZWZhdWx0Lk1TU3RyZWFtOwogICAgICAgICB2YXIgSVNfSVBPRCA9IGV4cG9ydHMuSVNfSVBPRCA9IC9pcG9kL2kudGVzdChVQSkgJiYgIV93aW5kb3cyLmRlZmF1bHQuTVNTdHJlYW07CiAgICAgICAgIHZhciBJU19JT1MgPSBleHBvcnRzLklTX0lPUyA9IC9pcGFkfGlwaG9uZXxpcG9kL2kudGVzdChVQSkgJiYgIV93aW5kb3cyLmRlZmF1bHQuTVNTdHJlYW07CiAgICAgICAgIHZhciBJU19BTkRST0lEID0gZXhwb3J0cy5JU19BTkRST0lEID0gL2FuZHJvaWQvaS50ZXN0KFVBKTsKICAgICAgICAgdmFyIElTX0lFID0gZXhwb3J0cy5JU19JRSA9IC8odHJpZGVudHxtaWNyb3NvZnQpL2kudGVzdChOQVYuYXBwTmFtZSk7CiAgICAgICAgIHZhciBJU19FREdFID0gZXhwb3J0cy5JU19FREdFID0gJ21zTGF1bmNoVXJpJyBpbiBOQVYgJiYgISgnZG9jdW1lbnRNb2RlJyBpbiBfZG9jdW1lbnQyLmRlZmF1bHQpOwogICAgICAgICB2YXIgSVNfQ0hST01FID0gZXhwb3J0cy5JU19DSFJPTUUgPSAvY2hyb21lL2kudGVzdChVQSk7CiAgICAgICAgIHZhciBJU19GSVJFRk9YID0gZXhwb3J0cy5JU19GSVJFRk9YID0gL2ZpcmVmb3gvaS50ZXN0KFVBKTsKICAgICAgICAgdmFyIElTX1NBRkFSSSA9IGV4cG9ydHMuSVNfU0FGQVJJID0gL3NhZmFyaS9pLnRlc3QoVUEpICYmICFJU19DSFJPTUU7CiAgICAgICAgIHZhciBJU19TVE9DS19BTkRST0lEID0gZXhwb3J0cy5JU19TVE9DS19BTkRST0lEID0gL15tb3ppbGxhXC9cZCtcLlxkK1xzXChsaW51eDtcc3U7L2kudGVzdChVQSk7CiAgICAgICAgIHZhciBIQVNfTVNFID0gZXhwb3J0cy5IQVNfTVNFID0gJ01lZGlhU291cmNlJyBpbiBfd2luZG93Mi5kZWZhdWx0OwogICAgICAgICB2YXIgU1VQUE9SVF9QT0lOVEVSX0VWRU5UUyA9IGV4cG9ydHMuU1VQUE9SVF9QT0lOVEVSX0VWRU5UUyA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgIHZhciBlbGVtZW50ID0gX2RvY3VtZW50Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ3gnKSwKICAgICAgICAgICAgICAgICBkb2N1bWVudEVsZW1lbnQgPSBfZG9jdW1lbnQyLmRlZmF1bHQuZG9jdW1lbnRFbGVtZW50LAogICAgICAgICAgICAgICAgIGdldENvbXB1dGVkU3R5bGUgPSBfd2luZG93Mi5kZWZhdWx0LmdldENvbXB1dGVkU3R5bGU7CgogICAgICAgICAgICAgaWYgKCEoJ3BvaW50ZXJFdmVudHMnIGluIGVsZW1lbnQuc3R5bGUpKSB7CiAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgfQoKICAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUucG9pbnRlckV2ZW50cyA9ICdhdXRvJzsKICAgICAgICAgICAgIGVsZW1lbnQuc3R5bGUucG9pbnRlckV2ZW50cyA9ICd4JzsKICAgICAgICAgICAgIGRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZChlbGVtZW50KTsKICAgICAgICAgICAgIHZhciBzdXBwb3J0cyA9IGdldENvbXB1dGVkU3R5bGUgJiYgKGdldENvbXB1dGVkU3R5bGUoZWxlbWVudCwgJycpIHx8IHt9KS5wb2ludGVyRXZlbnRzID09PSAnYXV0byc7CiAgICAgICAgICAgICBlbGVtZW50LnJlbW92ZSgpOwogICAgICAgICAgICAgcmV0dXJuICEhc3VwcG9ydHM7CiAgICAgICAgIH0oKTsKCiAgICAgICAgIHZhciBTVVBQT1JUX1BBU1NJVkVfRVZFTlQgPSBleHBvcnRzLlNVUFBPUlRfUEFTU0lWRV9FVkVOVCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgIHZhciBzdXBwb3J0c1Bhc3NpdmUgPSBmYWxzZTsKICAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICAgdmFyIG9wdHMgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkoe30sICdwYXNzaXZlJywgewogICAgICAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHN1cHBvcnRzUGFzc2l2ZSA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICBfd2luZG93Mi5kZWZhdWx0LmFkZEV2ZW50TGlzdGVuZXIoJ3Rlc3QnLCBudWxsLCBvcHRzKTsKICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHsgfQoKICAgICAgICAgICAgIHJldHVybiBzdXBwb3J0c1Bhc3NpdmU7CiAgICAgICAgIH0oKTsKCiAgICAgICAgIHZhciBodG1sNUVsZW1lbnRzID0gWydzb3VyY2UnLCAndHJhY2snLCAnYXVkaW8nLCAndmlkZW8nXTsKICAgICAgICAgdmFyIHZpZGVvID0gdm9pZCAwOwoKICAgICAgICAgZm9yICh2YXIgaSA9IDAsIHRvdGFsID0gaHRtbDVFbGVtZW50cy5sZW5ndGg7IGkgPCB0b3RhbDsgaSsrKSB7CiAgICAgICAgICAgICB2aWRlbyA9IF9kb2N1bWVudDIuZGVmYXVsdC5jcmVhdGVFbGVtZW50KGh0bWw1RWxlbWVudHNbaV0pOwogICAgICAgICB9CgogICAgICAgICB2YXIgU1VQUE9SVFNfTkFUSVZFX0hMUyA9IGV4cG9ydHMuU1VQUE9SVFNfTkFUSVZFX0hMUyA9IElTX1NBRkFSSSB8fCBJU19JRSAmJiAvZWRnZS9pLnRlc3QoVUEpOwoKICAgICAgICAgdmFyIGhhc2lPU0Z1bGxTY3JlZW4gPSB2aWRlby53ZWJraXRFbnRlckZ1bGxzY3JlZW4gIT09IHVuZGVmaW5lZDsKCiAgICAgICAgIHZhciBoYXNOYXRpdmVGdWxsc2NyZWVuID0gdmlkZW8ucmVxdWVzdEZ1bGxzY3JlZW4gIT09IHVuZGVmaW5lZDsKCiAgICAgICAgIGlmIChoYXNpT1NGdWxsU2NyZWVuICYmIC9tYWMgb3MgeCAxMF81L2kudGVzdChVQSkpIHsKICAgICAgICAgICAgIGhhc05hdGl2ZUZ1bGxzY3JlZW4gPSBmYWxzZTsKICAgICAgICAgICAgIGhhc2lPU0Z1bGxTY3JlZW4gPSBmYWxzZTsKICAgICAgICAgfQoKICAgICAgICAgdmFyIGhhc1dlYmtpdE5hdGl2ZUZ1bGxTY3JlZW4gPSB2aWRlby53ZWJraXRSZXF1ZXN0RnVsbFNjcmVlbiAhPT0gdW5kZWZpbmVkOwogICAgICAgICB2YXIgaGFzTW96TmF0aXZlRnVsbFNjcmVlbiA9IHZpZGVvLm1velJlcXVlc3RGdWxsU2NyZWVuICE9PSB1bmRlZmluZWQ7CiAgICAgICAgIHZhciBoYXNNc05hdGl2ZUZ1bGxTY3JlZW4gPSB2aWRlby5tc1JlcXVlc3RGdWxsc2NyZWVuICE9PSB1bmRlZmluZWQ7CiAgICAgICAgIHZhciBoYXNUcnVlTmF0aXZlRnVsbFNjcmVlbiA9IGhhc1dlYmtpdE5hdGl2ZUZ1bGxTY3JlZW4gfHwgaGFzTW96TmF0aXZlRnVsbFNjcmVlbiB8fCBoYXNNc05hdGl2ZUZ1bGxTY3JlZW47CiAgICAgICAgIHZhciBuYXRpdmVGdWxsU2NyZWVuRW5hYmxlZCA9IGhhc1RydWVOYXRpdmVGdWxsU2NyZWVuOwogICAgICAgICB2YXIgZnVsbFNjcmVlbkV2ZW50TmFtZSA9ICcnOwogICAgICAgICB2YXIgaXNGdWxsU2NyZWVuID0gdm9pZCAwLAogICAgICAgICAgICAgcmVxdWVzdEZ1bGxTY3JlZW4gPSB2b2lkIDAsCiAgICAgICAgICAgICBjYW5jZWxGdWxsU2NyZWVuID0gdm9pZCAwOwoKICAgICAgICAgaWYgKGhhc01vek5hdGl2ZUZ1bGxTY3JlZW4pIHsKICAgICAgICAgICAgIG5hdGl2ZUZ1bGxTY3JlZW5FbmFibGVkID0gX2RvY3VtZW50Mi5kZWZhdWx0Lm1vekZ1bGxTY3JlZW5FbmFibGVkOwogICAgICAgICB9IGVsc2UgaWYgKGhhc01zTmF0aXZlRnVsbFNjcmVlbikgewogICAgICAgICAgICAgbmF0aXZlRnVsbFNjcmVlbkVuYWJsZWQgPSBfZG9jdW1lbnQyLmRlZmF1bHQubXNGdWxsc2NyZWVuRW5hYmxlZDsKICAgICAgICAgfQoKICAgICAgICAgaWYgKElTX0NIUk9NRSkgewogICAgICAgICAgICAgaGFzaU9TRnVsbFNjcmVlbiA9IGZhbHNlOwogICAgICAgICB9CgogICAgICAgICBpZiAoaGFzVHJ1ZU5hdGl2ZUZ1bGxTY3JlZW4pIHsKICAgICAgICAgICAgIGlmIChoYXNXZWJraXROYXRpdmVGdWxsU2NyZWVuKSB7CiAgICAgICAgICAgICAgICAgZnVsbFNjcmVlbkV2ZW50TmFtZSA9ICd3ZWJraXRmdWxsc2NyZWVuY2hhbmdlJzsKICAgICAgICAgICAgIH0gZWxzZSBpZiAoaGFzTW96TmF0aXZlRnVsbFNjcmVlbikgewogICAgICAgICAgICAgICAgIGZ1bGxTY3JlZW5FdmVudE5hbWUgPSAnZnVsbHNjcmVlbmNoYW5nZSc7CiAgICAgICAgICAgICB9IGVsc2UgaWYgKGhhc01zTmF0aXZlRnVsbFNjcmVlbikgewogICAgICAgICAgICAgICAgIGZ1bGxTY3JlZW5FdmVudE5hbWUgPSAnTVNGdWxsc2NyZWVuQ2hhbmdlJzsKICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICBleHBvcnRzLmlzRnVsbFNjcmVlbiA9IGlzRnVsbFNjcmVlbiA9IGZ1bmN0aW9uIGlzRnVsbFNjcmVlbigpIHsKICAgICAgICAgICAgICAgICBpZiAoaGFzTW96TmF0aXZlRnVsbFNjcmVlbikgewogICAgICAgICAgICAgICAgICAgICByZXR1cm4gX2RvY3VtZW50Mi5kZWZhdWx0Lm1vekZ1bGxTY3JlZW47CiAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChoYXNXZWJraXROYXRpdmVGdWxsU2NyZWVuKSB7CiAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfZG9jdW1lbnQyLmRlZmF1bHQud2Via2l0SXNGdWxsU2NyZWVuOwogICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaGFzTXNOYXRpdmVGdWxsU2NyZWVuKSB7CiAgICAgICAgICAgICAgICAgICAgIHJldHVybiBfZG9jdW1lbnQyLmRlZmF1bHQubXNGdWxsc2NyZWVuRWxlbWVudCAhPT0gbnVsbDsKICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgIGV4cG9ydHMucmVxdWVzdEZ1bGxTY3JlZW4gPSByZXF1ZXN0RnVsbFNjcmVlbiA9IGZ1bmN0aW9uIHJlcXVlc3RGdWxsU2NyZWVuKGVsKSB7CiAgICAgICAgICAgICAgICAgaWYgKGhhc1dlYmtpdE5hdGl2ZUZ1bGxTY3JlZW4pIHsKICAgICAgICAgICAgICAgICAgICAgZWwud2Via2l0UmVxdWVzdEZ1bGxTY3JlZW4oKTsKICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGhhc01vek5hdGl2ZUZ1bGxTY3JlZW4pIHsKICAgICAgICAgICAgICAgICAgICAgZWwubW96UmVxdWVzdEZ1bGxTY3JlZW4oKTsKICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGhhc01zTmF0aXZlRnVsbFNjcmVlbikgewogICAgICAgICAgICAgICAgICAgICBlbC5tc1JlcXVlc3RGdWxsc2NyZWVuKCk7CiAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICBleHBvcnRzLmNhbmNlbEZ1bGxTY3JlZW4gPSBjYW5jZWxGdWxsU2NyZWVuID0gZnVuY3Rpb24gY2FuY2VsRnVsbFNjcmVlbigpIHsKICAgICAgICAgICAgICAgICBpZiAoaGFzV2Via2l0TmF0aXZlRnVsbFNjcmVlbikgewogICAgICAgICAgICAgICAgICAgICBfZG9jdW1lbnQyLmRlZmF1bHQud2Via2l0Q2FuY2VsRnVsbFNjcmVlbigpOwogICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaGFzTW96TmF0aXZlRnVsbFNjcmVlbikgewogICAgICAgICAgICAgICAgICAgICBfZG9jdW1lbnQyLmRlZmF1bHQubW96Q2FuY2VsRnVsbFNjcmVlbigpOwogICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaGFzTXNOYXRpdmVGdWxsU2NyZWVuKSB7CiAgICAgICAgICAgICAgICAgICAgIF9kb2N1bWVudDIuZGVmYXVsdC5tc0V4aXRGdWxsc2NyZWVuKCk7CiAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgfTsKICAgICAgICAgfQoKICAgICAgICAgdmFyIEhBU19OQVRJVkVfRlVMTFNDUkVFTiA9IGV4cG9ydHMuSEFTX05BVElWRV9GVUxMU0NSRUVOID0gaGFzTmF0aXZlRnVsbHNjcmVlbjsKICAgICAgICAgdmFyIEhBU19XRUJLSVRfTkFUSVZFX0ZVTExTQ1JFRU4gPSBleHBvcnRzLkhBU19XRUJLSVRfTkFUSVZFX0ZVTExTQ1JFRU4gPSBoYXNXZWJraXROYXRpdmVGdWxsU2NyZWVuOwogICAgICAgICB2YXIgSEFTX01PWl9OQVRJVkVfRlVMTFNDUkVFTiA9IGV4cG9ydHMuSEFTX01PWl9OQVRJVkVfRlVMTFNDUkVFTiA9IGhhc01vek5hdGl2ZUZ1bGxTY3JlZW47CiAgICAgICAgIHZhciBIQVNfTVNfTkFUSVZFX0ZVTExTQ1JFRU4gPSBleHBvcnRzLkhBU19NU19OQVRJVkVfRlVMTFNDUkVFTiA9IGhhc01zTmF0aXZlRnVsbFNjcmVlbjsKICAgICAgICAgdmFyIEhBU19JT1NfRlVMTFNDUkVFTiA9IGV4cG9ydHMuSEFTX0lPU19GVUxMU0NSRUVOID0gaGFzaU9TRnVsbFNjcmVlbjsKICAgICAgICAgdmFyIEhBU19UUlVFX05BVElWRV9GVUxMU0NSRUVOID0gZXhwb3J0cy5IQVNfVFJVRV9OQVRJVkVfRlVMTFNDUkVFTiA9IGhhc1RydWVOYXRpdmVGdWxsU2NyZWVuOwogICAgICAgICB2YXIgSEFTX05BVElWRV9GVUxMU0NSRUVOX0VOQUJMRUQgPSBleHBvcnRzLkhBU19OQVRJVkVfRlVMTFNDUkVFTl9FTkFCTEVEID0gbmF0aXZlRnVsbFNjcmVlbkVuYWJsZWQ7CiAgICAgICAgIHZhciBGVUxMU0NSRUVOX0VWRU5UX05BTUUgPSBleHBvcnRzLkZVTExTQ1JFRU5fRVZFTlRfTkFNRSA9IGZ1bGxTY3JlZW5FdmVudE5hbWU7CiAgICAgICAgIGV4cG9ydHMuaXNGdWxsU2NyZWVuID0gaXNGdWxsU2NyZWVuOwogICAgICAgICBleHBvcnRzLnJlcXVlc3RGdWxsU2NyZWVuID0gcmVxdWVzdEZ1bGxTY3JlZW47CiAgICAgICAgIGV4cG9ydHMuY2FuY2VsRnVsbFNjcmVlbiA9IGNhbmNlbEZ1bGxTY3JlZW47CgoKICAgICAgICAgX21lanMyLmRlZmF1bHQuRmVhdHVyZXMgPSBfbWVqczIuZGVmYXVsdC5GZWF0dXJlcyB8fCB7fTsKICAgICAgICAgX21lanMyLmRlZmF1bHQuRmVhdHVyZXMuaXNpUGFkID0gSVNfSVBBRDsKICAgICAgICAgX21lanMyLmRlZmF1bHQuRmVhdHVyZXMuaXNpUG9kID0gSVNfSVBPRDsKICAgICAgICAgX21lanMyLmRlZmF1bHQuRmVhdHVyZXMuaXNpUGhvbmUgPSBJU19JUEhPTkU7CiAgICAgICAgIF9tZWpzMi5kZWZhdWx0LkZlYXR1cmVzLmlzaU9TID0gX21lanMyLmRlZmF1bHQuRmVhdHVyZXMuaXNpUGhvbmUgfHwgX21lanMyLmRlZmF1bHQuRmVhdHVyZXMuaXNpUGFkOwogICAgICAgICBfbWVqczIuZGVmYXVsdC5GZWF0dXJlcy5pc0FuZHJvaWQgPSBJU19BTkRST0lEOwogICAgICAgICBfbWVqczIuZGVmYXVsdC5GZWF0dXJlcy5pc0lFID0gSVNfSUU7CiAgICAgICAgIF9tZWpzMi5kZWZhdWx0LkZlYXR1cmVzLmlzRWRnZSA9IElTX0VER0U7CiAgICAgICAgIF9tZWpzMi5kZWZhdWx0LkZlYXR1cmVzLmlzQ2hyb21lID0gSVNfQ0hST01FOwogICAgICAgICBfbWVqczIuZGVmYXVsdC5GZWF0dXJlcy5pc0ZpcmVmb3ggPSBJU19GSVJFRk9YOwogICAgICAgICBfbWVqczIuZGVmYXVsdC5GZWF0dXJlcy5pc1NhZmFyaSA9IElTX1NBRkFSSTsKICAgICAgICAgX21lanMyLmRlZmF1bHQuRmVhdHVyZXMuaXNTdG9ja0FuZHJvaWQgPSBJU19TVE9DS19BTkRST0lEOwogICAgICAgICBfbWVqczIuZGVmYXVsdC5GZWF0dXJlcy5oYXNNU0UgPSBIQVNfTVNFOwogICAgICAgICBfbWVqczIuZGVmYXVsdC5GZWF0dXJlcy5zdXBwb3J0c05hdGl2ZUhMUyA9IFNVUFBPUlRTX05BVElWRV9ITFM7CiAgICAgICAgIF9tZWpzMi5kZWZhdWx0LkZlYXR1cmVzLnN1cHBvcnRzUG9pbnRlckV2ZW50cyA9IFNVUFBPUlRfUE9JTlRFUl9FVkVOVFM7CiAgICAgICAgIF9tZWpzMi5kZWZhdWx0LkZlYXR1cmVzLnN1cHBvcnRzUGFzc2l2ZUV2ZW50ID0gU1VQUE9SVF9QQVNTSVZFX0VWRU5UOwogICAgICAgICBfbWVqczIuZGVmYXVsdC5GZWF0dXJlcy5oYXNpT1NGdWxsU2NyZWVuID0gSEFTX0lPU19GVUxMU0NSRUVOOwogICAgICAgICBfbWVqczIuZGVmYXVsdC5GZWF0dXJlcy5oYXNOYXRpdmVGdWxsc2NyZWVuID0gSEFTX05BVElWRV9GVUxMU0NSRUVOOwogICAgICAgICBfbWVqczIuZGVmYXVsdC5GZWF0dXJlcy5oYXNXZWJraXROYXRpdmVGdWxsU2NyZWVuID0gSEFTX1dFQktJVF9OQVRJVkVfRlVMTFNDUkVFTjsKICAgICAgICAgX21lanMyLmRlZmF1bHQuRmVhdHVyZXMuaGFzTW96TmF0aXZlRnVsbFNjcmVlbiA9IEhBU19NT1pfTkFUSVZFX0ZVTExTQ1JFRU47CiAgICAgICAgIF9tZWpzMi5kZWZhdWx0LkZlYXR1cmVzLmhhc01zTmF0aXZlRnVsbFNjcmVlbiA9IEhBU19NU19OQVRJVkVfRlVMTFNDUkVFTjsKICAgICAgICAgX21lanMyLmRlZmF1bHQuRmVhdHVyZXMuaGFzVHJ1ZU5hdGl2ZUZ1bGxTY3JlZW4gPSBIQVNfVFJVRV9OQVRJVkVfRlVMTFNDUkVFTjsKICAgICAgICAgX21lanMyLmRlZmF1bHQuRmVhdHVyZXMubmF0aXZlRnVsbFNjcmVlbkVuYWJsZWQgPSBIQVNfTkFUSVZFX0ZVTExTQ1JFRU5fRU5BQkxFRDsKICAgICAgICAgX21lanMyLmRlZmF1bHQuRmVhdHVyZXMuZnVsbFNjcmVlbkV2ZW50TmFtZSA9IEZVTExTQ1JFRU5fRVZFTlRfTkFNRTsKICAgICAgICAgX21lanMyLmRlZmF1bHQuRmVhdHVyZXMuaXNGdWxsU2NyZWVuID0gaXNGdWxsU2NyZWVuOwogICAgICAgICBfbWVqczIuZGVmYXVsdC5GZWF0dXJlcy5yZXF1ZXN0RnVsbFNjcmVlbiA9IHJlcXVlc3RGdWxsU2NyZWVuOwogICAgICAgICBfbWVqczIuZGVmYXVsdC5GZWF0dXJlcy5jYW5jZWxGdWxsU2NyZWVuID0gY2FuY2VsRnVsbFNjcmVlbjsKCiAgICAgfSwgeyAiMiI6IDIsICIzIjogMywgIjciOiA3IH1dLCAyNjogW2Z1bmN0aW9uIChfZGVyZXFfLCBtb2R1bGUsIGV4cG9ydHMpIHsKICAgICAgICAgJ3VzZSBzdHJpY3QnOwoKICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogICAgICAgICAgICAgdmFsdWU6IHRydWUKICAgICAgICAgfSk7CiAgICAgICAgIGV4cG9ydHMucmVtb3ZlQ2xhc3MgPSBleHBvcnRzLmFkZENsYXNzID0gZXhwb3J0cy5oYXNDbGFzcyA9IHVuZGVmaW5lZDsKICAgICAgICAgZXhwb3J0cy5sb2FkU2NyaXB0ID0gbG9hZFNjcmlwdDsKICAgICAgICAgZXhwb3J0cy5vZmZzZXQgPSBvZmZzZXQ7CiAgICAgICAgIGV4cG9ydHMudG9nZ2xlQ2xhc3MgPSB0b2dnbGVDbGFzczsKICAgICAgICAgZXhwb3J0cy5mYWRlT3V0ID0gZmFkZU91dDsKICAgICAgICAgZXhwb3J0cy5mYWRlSW4gPSBmYWRlSW47CiAgICAgICAgIGV4cG9ydHMuc2libGluZ3MgPSBzaWJsaW5nczsKICAgICAgICAgZXhwb3J0cy52aXNpYmxlID0gdmlzaWJsZTsKICAgICAgICAgZXhwb3J0cy5hamF4ID0gYWpheDsKCiAgICAgICAgIHZhciBfd2luZG93ID0gX2RlcmVxXygzKTsKCiAgICAgICAgIHZhciBfd2luZG93MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dpbmRvdyk7CgogICAgICAgICB2YXIgX2RvY3VtZW50ID0gX2RlcmVxXygyKTsKCiAgICAgICAgIHZhciBfZG9jdW1lbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZG9jdW1lbnQpOwoKICAgICAgICAgdmFyIF9tZWpzID0gX2RlcmVxXyg3KTsKCiAgICAgICAgIHZhciBfbWVqczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9tZWpzKTsKCiAgICAgICAgIGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9CgogICAgICAgICBmdW5jdGlvbiBsb2FkU2NyaXB0KHVybCkgewogICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsKICAgICAgICAgICAgICAgICB2YXIgc2NyaXB0ID0gX2RvY3VtZW50Mi5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpOwogICAgICAgICAgICAgICAgIHNjcmlwdC5zcmMgPSB1cmw7CiAgICAgICAgICAgICAgICAgc2NyaXB0LmFzeW5jID0gdHJ1ZTsKICAgICAgICAgICAgICAgICBzY3JpcHQub25sb2FkID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICBzY3JpcHQucmVtb3ZlKCk7CiAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTsKICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgIHNjcmlwdC5vbmVycm9yID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICBzY3JpcHQucmVtb3ZlKCk7CiAgICAgICAgICAgICAgICAgICAgIHJlamVjdCgpOwogICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgX2RvY3VtZW50Mi5kZWZhdWx0LmhlYWQuYXBwZW5kQ2hpbGQoc2NyaXB0KTsKICAgICAgICAgICAgIH0pOwogICAgICAgICB9CgogICAgICAgICBmdW5jdGlvbiBvZmZzZXQoZWwpIHsKICAgICAgICAgICAgIHZhciByZWN0ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksCiAgICAgICAgICAgICAgICAgc2Nyb2xsTGVmdCA9IF93aW5kb3cyLmRlZmF1bHQucGFnZVhPZmZzZXQgfHwgX2RvY3VtZW50Mi5kZWZhdWx0LmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0LAogICAgICAgICAgICAgICAgIHNjcm9sbFRvcCA9IF93aW5kb3cyLmRlZmF1bHQucGFnZVlPZmZzZXQgfHwgX2RvY3VtZW50Mi5kZWZhdWx0LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3A7CiAgICAgICAgICAgICByZXR1cm4geyB0b3A6IHJlY3QudG9wICsgc2Nyb2xsVG9wLCBsZWZ0OiByZWN0LmxlZnQgKyBzY3JvbGxMZWZ0IH07CiAgICAgICAgIH0KCiAgICAgICAgIHZhciBoYXNDbGFzc01ldGhvZCA9IHZvaWQgMCwKICAgICAgICAgICAgIGFkZENsYXNzTWV0aG9kID0gdm9pZCAwLAogICAgICAgICAgICAgcmVtb3ZlQ2xhc3NNZXRob2QgPSB2b2lkIDA7CgogICAgICAgICBpZiAoJ2NsYXNzTGlzdCcgaW4gX2RvY3VtZW50Mi5kZWZhdWx0LmRvY3VtZW50RWxlbWVudCkgewogICAgICAgICAgICAgaGFzQ2xhc3NNZXRob2QgPSBmdW5jdGlvbiBoYXNDbGFzc01ldGhvZChlbCwgY2xhc3NOYW1lKSB7CiAgICAgICAgICAgICAgICAgcmV0dXJuIGVsLmNsYXNzTGlzdCAhPT0gdW5kZWZpbmVkICYmIGVsLmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpOwogICAgICAgICAgICAgfTsKICAgICAgICAgICAgIGFkZENsYXNzTWV0aG9kID0gZnVuY3Rpb24gYWRkQ2xhc3NNZXRob2QoZWwsIGNsYXNzTmFtZSkgewogICAgICAgICAgICAgICAgIHJldHVybiBlbC5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7CiAgICAgICAgICAgICB9OwogICAgICAgICAgICAgcmVtb3ZlQ2xhc3NNZXRob2QgPSBmdW5jdGlvbiByZW1vdmVDbGFzc01ldGhvZChlbCwgY2xhc3NOYW1lKSB7CiAgICAgICAgICAgICAgICAgcmV0dXJuIGVsLmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKTsKICAgICAgICAgICAgIH07CiAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICBoYXNDbGFzc01ldGhvZCA9IGZ1bmN0aW9uIGhhc0NsYXNzTWV0aG9kKGVsLCBjbGFzc05hbWUpIHsKICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cCgnXFxiJyArIGNsYXNzTmFtZSArICdcXGInKS50ZXN0KGVsLmNsYXNzTmFtZSk7CiAgICAgICAgICAgICB9OwogICAgICAgICAgICAgYWRkQ2xhc3NNZXRob2QgPSBmdW5jdGlvbiBhZGRDbGFzc01ldGhvZChlbCwgY2xhc3NOYW1lKSB7CiAgICAgICAgICAgICAgICAgaWYgKCFoYXNDbGFzcyhlbCwgY2xhc3NOYW1lKSkgewogICAgICAgICAgICAgICAgICAgICBlbC5jbGFzc05hbWUgKz0gJyAnICsgY2xhc3NOYW1lOwogICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgIH07CiAgICAgICAgICAgICByZW1vdmVDbGFzc01ldGhvZCA9IGZ1bmN0aW9uIHJlbW92ZUNsYXNzTWV0aG9kKGVsLCBjbGFzc05hbWUpIHsKICAgICAgICAgICAgICAgICBlbC5jbGFzc05hbWUgPSBlbC5jbGFzc05hbWUucmVwbGFjZShuZXcgUmVnRXhwKCdcXGInICsgY2xhc3NOYW1lICsgJ1xcYicsICdnJyksICcnKTsKICAgICAgICAgICAgIH07CiAgICAgICAgIH0KCiAgICAgICAgIHZhciBoYXNDbGFzcyA9IGV4cG9ydHMuaGFzQ2xhc3MgPSBoYXNDbGFzc01ldGhvZDsKICAgICAgICAgdmFyIGFkZENsYXNzID0gZXhwb3J0cy5hZGRDbGFzcyA9IGFkZENsYXNzTWV0aG9kOwogICAgICAgICB2YXIgcmVtb3ZlQ2xhc3MgPSBleHBvcnRzLnJlbW92ZUNsYXNzID0gcmVtb3ZlQ2xhc3NNZXRob2Q7CgogICAgICAgICBmdW5jdGlvbiB0b2dnbGVDbGFzcyhlbCwgY2xhc3NOYW1lKSB7CiAgICAgICAgICAgICBoYXNDbGFzcyhlbCwgY2xhc3NOYW1lKSA/IHJlbW92ZUNsYXNzKGVsLCBjbGFzc05hbWUpIDogYWRkQ2xhc3MoZWwsIGNsYXNzTmFtZSk7CiAgICAgICAgIH0KCiAgICAgICAgIGZ1bmN0aW9uIGZhZGVPdXQoZWwpIHsKICAgICAgICAgICAgIHZhciBkdXJhdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogNDAwOwogICAgICAgICAgICAgdmFyIGNhbGxiYWNrID0gYXJndW1lbnRzWzJdOwoKICAgICAgICAgICAgIGlmICghZWwuc3R5bGUub3BhY2l0eSkgewogICAgICAgICAgICAgICAgIGVsLnN0eWxlLm9wYWNpdHkgPSAxOwogICAgICAgICAgICAgfQoKICAgICAgICAgICAgIHZhciBzdGFydCA9IG51bGw7CiAgICAgICAgICAgICBfd2luZG93Mi5kZWZhdWx0LnJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiBhbmltYXRlKHRpbWVzdGFtcCkgewogICAgICAgICAgICAgICAgIHN0YXJ0ID0gc3RhcnQgfHwgdGltZXN0YW1wOwogICAgICAgICAgICAgICAgIHZhciBwcm9ncmVzcyA9IHRpbWVzdGFtcCAtIHN0YXJ0OwogICAgICAgICAgICAgICAgIHZhciBvcGFjaXR5ID0gcGFyc2VGbG9hdCgxIC0gcHJvZ3Jlc3MgLyBkdXJhdGlvbiwgMik7CiAgICAgICAgICAgICAgICAgZWwuc3R5bGUub3BhY2l0eSA9IG9wYWNpdHkgPCAwID8gMCA6IG9wYWNpdHk7CiAgICAgICAgICAgICAgICAgaWYgKHByb2dyZXNzID4gZHVyYXRpb24pIHsKICAgICAgICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrICYmIHR5cGVvZiBjYWxsYmFjayA9PT0gJ2Z1bmN0aW9uJykgewogICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soKTsKICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgIF93aW5kb3cyLmRlZmF1bHQucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGFuaW1hdGUpOwogICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgIH0pOwogICAgICAgICB9CgogICAgICAgICBmdW5jdGlvbiBmYWRlSW4oZWwpIHsKICAgICAgICAgICAgIHZhciBkdXJhdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogNDAwOwogICAgICAgICAgICAgdmFyIGNhbGxiYWNrID0gYXJndW1lbnRzWzJdOwoKICAgICAgICAgICAgIGlmICghZWwuc3R5bGUub3BhY2l0eSkgewogICAgICAgICAgICAgICAgIGVsLnN0eWxlLm9wYWNpdHkgPSAwOwogICAgICAgICAgICAgfQoKICAgICAgICAgICAgIHZhciBzdGFydCA9IG51bGw7CiAgICAgICAgICAgICBfd2luZG93Mi5kZWZhdWx0LnJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiBhbmltYXRlKHRpbWVzdGFtcCkgewogICAgICAgICAgICAgICAgIHN0YXJ0ID0gc3RhcnQgfHwgdGltZXN0YW1wOwogICAgICAgICAgICAgICAgIHZhciBwcm9ncmVzcyA9IHRpbWVzdGFtcCAtIHN0YXJ0OwogICAgICAgICAgICAgICAgIHZhciBvcGFjaXR5ID0gcGFyc2VGbG9hdChwcm9ncmVzcyAvIGR1cmF0aW9uLCAyKTsKICAgICAgICAgICAgICAgICBlbC5zdHlsZS5vcGFjaXR5ID0gb3BhY2l0eSA+IDEgPyAxIDogb3BhY2l0eTsKICAgICAgICAgICAgICAgICBpZiAocHJvZ3Jlc3MgPiBkdXJhdGlvbikgewogICAgICAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2sgJiYgdHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjaygpOwogICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgX3dpbmRvdzIuZGVmYXVsdC5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoYW5pbWF0ZSk7CiAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgfSk7CiAgICAgICAgIH0KCiAgICAgICAgIGZ1bmN0aW9uIHNpYmxpbmdzKGVsLCBmaWx0ZXIpIHsKICAgICAgICAgICAgIHZhciBzaWJsaW5ncyA9IFtdOwogICAgICAgICAgICAgZWwgPSBlbC5wYXJlbnROb2RlLmZpcnN0Q2hpbGQ7CiAgICAgICAgICAgICBkbyB7CiAgICAgICAgICAgICAgICAgaWYgKCFmaWx0ZXIgfHwgZmlsdGVyKGVsKSkgewogICAgICAgICAgICAgICAgICAgICBzaWJsaW5ncy5wdXNoKGVsKTsKICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICB9IHdoaWxlIChlbCA9IGVsLm5leHRTaWJsaW5nKTsKICAgICAgICAgICAgIHJldHVybiBzaWJsaW5nczsKICAgICAgICAgfQoKICAgICAgICAgZnVuY3Rpb24gdmlzaWJsZShlbGVtKSB7CiAgICAgICAgICAgICBpZiAoZWxlbS5nZXRDbGllbnRSZWN0cyAhPT0gdW5kZWZpbmVkICYmIGVsZW0uZ2V0Q2xpZW50UmVjdHMgPT09ICdmdW5jdGlvbicpIHsKICAgICAgICAgICAgICAgICByZXR1cm4gISEoZWxlbS5vZmZzZXRXaWR0aCB8fCBlbGVtLm9mZnNldEhlaWdodCB8fCBlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoKTsKICAgICAgICAgICAgIH0KICAgICAgICAgICAgIHJldHVybiAhIShlbGVtLm9mZnNldFdpZHRoIHx8IGVsZW0ub2Zmc2V0SGVpZ2h0KTsKICAgICAgICAgfQoKICAgICAgICAgZnVuY3Rpb24gYWpheCh1cmwsIGRhdGFUeXBlLCBzdWNjZXNzLCBlcnJvcikgewogICAgICAgICAgICAgdmFyIHhociA9IF93aW5kb3cyLmRlZmF1bHQuWE1MSHR0cFJlcXVlc3QgPyBuZXcgWE1MSHR0cFJlcXVlc3QoKSA6IG5ldyBBY3RpdmVYT2JqZWN0KCdNaWNyb3NvZnQuWE1MSFRUUCcpOwoKICAgICAgICAgICAgIHZhciB0eXBlID0gJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD1VVEYtOCcsCiAgICAgICAgICAgICAgICAgY29tcGxldGVkID0gZmFsc2UsCiAgICAgICAgICAgICAgICAgYWNjZXB0ID0gJyovJy5jb25jYXQoJyonKTsKCiAgICAgICAgICAgICBzd2l0Y2ggKGRhdGFUeXBlKSB7CiAgICAgICAgICAgICAgICAgY2FzZSAndGV4dCc6CiAgICAgICAgICAgICAgICAgICAgIHR5cGUgPSAndGV4dC9wbGFpbic7CiAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgIGNhc2UgJ2pzb24nOgogICAgICAgICAgICAgICAgICAgICB0eXBlID0gJ2FwcGxpY2F0aW9uL2pzb24sIHRleHQvamF2YXNjcmlwdCc7CiAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgIGNhc2UgJ2h0bWwnOgogICAgICAgICAgICAgICAgICAgICB0eXBlID0gJ3RleHQvaHRtbCc7CiAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgIGNhc2UgJ3htbCc6CiAgICAgICAgICAgICAgICAgICAgIHR5cGUgPSAnYXBwbGljYXRpb24veG1sLCB0ZXh0L3htbCc7CiAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgfQoKICAgICAgICAgICAgIGlmICh0eXBlICE9PSAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJykgewogICAgICAgICAgICAgICAgIGFjY2VwdCA9IHR5cGUgKyAnLCAqLyo7IHE9MC4wMSc7CiAgICAgICAgICAgICB9CgogICAgICAgICAgICAgaWYgKHhocikgewogICAgICAgICAgICAgICAgIHhoci5vcGVuKCdHRVQnLCB1cmwsIHRydWUpOwogICAgICAgICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKCdBY2NlcHQnLCBhY2NlcHQpOwogICAgICAgICAgICAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgIGlmIChjb21wbGV0ZWQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID09PSA0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoeGhyLnN0YXR1cyA9PT0gMjAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcGxldGVkID0gdHJ1ZTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IHZvaWQgMDsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGRhdGFUeXBlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2pzb24nOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YSA9IEpTT04ucGFyc2UoeGhyLnJlc3BvbnNlVGV4dCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAneG1sJzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSB4aHIucmVzcG9uc2VYTUw7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSB4aHIucmVzcG9uc2VUZXh0OwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3MoZGF0YSk7CiAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBlcnJvciA9PT0gJ2Z1bmN0aW9uJykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yKHhoci5zdGF0dXMpOwogICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICAgeGhyLnNlbmQoKTsKICAgICAgICAgICAgIH0KICAgICAgICAgfQoKICAgICAgICAgX21lanMyLmRlZmF1bHQuVXRpbHMgPSBfbWVqczIuZGVmYXVsdC5VdGlscyB8fCB7fTsKICAgICAgICAgX21lanMyLmRlZmF1bHQuVXRpbHMub2Zmc2V0ID0gb2Zmc2V0OwogICAgICAgICBfbWVqczIuZGVmYXVsdC5VdGlscy5oYXNDbGFzcyA9IGhhc0NsYXNzOwogICAgICAgICBfbWVqczIuZGVmYXVsdC5VdGlscy5hZGRDbGFzcyA9IGFkZENsYXNzOwogICAgICAgICBfbWVqczIuZGVmYXVsdC5VdGlscy5yZW1vdmVDbGFzcyA9IHJlbW92ZUNsYXNzOwogICAgICAgICBfbWVqczIuZGVmYXVsdC5VdGlscy50b2dnbGVDbGFzcyA9IHRvZ2dsZUNsYXNzOwogICAgICAgICBfbWVqczIuZGVmYXVsdC5VdGlscy5mYWRlSW4gPSBmYWRlSW47CiAgICAgICAgIF9tZWpzMi5kZWZhdWx0LlV0aWxzLmZhZGVPdXQgPSBmYWRlT3V0OwogICAgICAgICBfbWVqczIuZGVmYXVsdC5VdGlscy5zaWJsaW5ncyA9IHNpYmxpbmdzOwogICAgICAgICBfbWVqczIuZGVmYXVsdC5VdGlscy52aXNpYmxlID0gdmlzaWJsZTsKICAgICAgICAgX21lanMyLmRlZmF1bHQuVXRpbHMuYWpheCA9IGFqYXg7CiAgICAgICAgIF9tZWpzMi5kZWZhdWx0LlV0aWxzLmxvYWRTY3JpcHQgPSBsb2FkU2NyaXB0OwoKICAgICB9LCB7ICIyIjogMiwgIjMiOiAzLCAiNyI6IDcgfV0sIDI3OiBbZnVuY3Rpb24gKF9kZXJlcV8sIG1vZHVsZSwgZXhwb3J0cykgewogICAgICAgICAndXNlIHN0cmljdCc7CgogICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgIl9fZXNNb2R1bGUiLCB7CiAgICAgICAgICAgICB2YWx1ZTogdHJ1ZQogICAgICAgICB9KTsKICAgICAgICAgZXhwb3J0cy5lc2NhcGVIVE1MID0gZXNjYXBlSFRNTDsKICAgICAgICAgZXhwb3J0cy5kZWJvdW5jZSA9IGRlYm91bmNlOwogICAgICAgICBleHBvcnRzLmlzT2JqZWN0RW1wdHkgPSBpc09iamVjdEVtcHR5OwogICAgICAgICBleHBvcnRzLnNwbGl0RXZlbnRzID0gc3BsaXRFdmVudHM7CiAgICAgICAgIGV4cG9ydHMuY3JlYXRlRXZlbnQgPSBjcmVhdGVFdmVudDsKICAgICAgICAgZXhwb3J0cy5pc05vZGVBZnRlciA9IGlzTm9kZUFmdGVyOwogICAgICAgICBleHBvcnRzLmlzU3RyaW5nID0gaXNTdHJpbmc7CgogICAgICAgICB2YXIgX21lanMgPSBfZGVyZXFfKDcpOwoKICAgICAgICAgdmFyIF9tZWpzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21lanMpOwoKICAgICAgICAgZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCiAgICAgICAgIGZ1bmN0aW9uIGVzY2FwZUhUTUwoaW5wdXQpIHsKCiAgICAgICAgICAgICBpZiAodHlwZW9mIGlucHV0ICE9PSAnc3RyaW5nJykgewogICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQXJndW1lbnQgcGFzc2VkIG11c3QgYmUgYSBzdHJpbmcnKTsKICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICB2YXIgbWFwID0gewogICAgICAgICAgICAgICAgICcmJzogJyZhbXA7JywKICAgICAgICAgICAgICAgICAnPCc6ICcmbHQ7JywKICAgICAgICAgICAgICAgICAnPic6ICcmZ3Q7JywKICAgICAgICAgICAgICAgICAnIic6ICcmcXVvdDsnCiAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgIHJldHVybiBpbnB1dC5yZXBsYWNlKC9bJjw+Il0vZywgZnVuY3Rpb24gKGMpIHsKICAgICAgICAgICAgICAgICByZXR1cm4gbWFwW2NdOwogICAgICAgICAgICAgfSk7CiAgICAgICAgIH0KCiAgICAgICAgIGZ1bmN0aW9uIGRlYm91bmNlKGZ1bmMsIHdhaXQpIHsKICAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXMsCiAgICAgICAgICAgICAgICAgX2FyZ3VtZW50cyA9IGFyZ3VtZW50czsKCiAgICAgICAgICAgICB2YXIgaW1tZWRpYXRlID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiBmYWxzZTsKCgogICAgICAgICAgICAgaWYgKHR5cGVvZiBmdW5jICE9PSAnZnVuY3Rpb24nKSB7CiAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgZnVuY3Rpb24nKTsKICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICBpZiAodHlwZW9mIHdhaXQgIT09ICdudW1iZXInKSB7CiAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTZWNvbmQgYXJndW1lbnQgbXVzdCBiZSBhIG51bWVyaWMgdmFsdWUnKTsKICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICB2YXIgdGltZW91dCA9IHZvaWQgMDsKICAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgdmFyIGNvbnRleHQgPSBfdGhpcywKICAgICAgICAgICAgICAgICAgICAgYXJncyA9IF9hcmd1bWVudHM7CiAgICAgICAgICAgICAgICAgdmFyIGxhdGVyID0gZnVuY3Rpb24gbGF0ZXIoKSB7CiAgICAgICAgICAgICAgICAgICAgIHRpbWVvdXQgPSBudWxsOwogICAgICAgICAgICAgICAgICAgICBpZiAoIWltbWVkaWF0ZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTsKICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgdmFyIGNhbGxOb3cgPSBpbW1lZGlhdGUgJiYgIXRpbWVvdXQ7CiAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXQpOwogICAgICAgICAgICAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGxhdGVyLCB3YWl0KTsKCiAgICAgICAgICAgICAgICAgaWYgKGNhbGxOb3cpIHsKICAgICAgICAgICAgICAgICAgICAgZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTsKICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICB9OwogICAgICAgICB9CgogICAgICAgICBmdW5jdGlvbiBpc09iamVjdEVtcHR5KGluc3RhbmNlKSB7CiAgICAgICAgICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoaW5zdGFuY2UpLmxlbmd0aCA8PSAwOwogICAgICAgICB9CgogICAgICAgICBmdW5jdGlvbiBzcGxpdEV2ZW50cyhldmVudHMsIGlkKSB7CiAgICAgICAgICAgICB2YXIgcndpbmRvdyA9IC9eKChhZnRlcnxiZWZvcmUpcHJpbnR8KGJlZm9yZSk/dW5sb2FkfGhhc2hjaGFuZ2V8bWVzc2FnZXxvKGZmfG4pbGluZXxwYWdlKGhpZGV8c2hvdyl8cG9wc3RhdGV8cmVzaXplfHN0b3JhZ2UpXGIvOwoKICAgICAgICAgICAgIHZhciByZXQgPSB7IGQ6IFtdLCB3OiBbXSB9OwogICAgICAgICAgICAgKGV2ZW50cyB8fCAnJykuc3BsaXQoJyAnKS5mb3JFYWNoKGZ1bmN0aW9uICh2KSB7CiAgICAgICAgICAgICAgICAgdmFyIGV2ZW50TmFtZSA9ICcnICsgdiArIChpZCA/ICcuJyArIGlkIDogJycpOwoKICAgICAgICAgICAgICAgICBpZiAoZXZlbnROYW1lLnN0YXJ0c1dpdGgoJy4nKSkgewogICAgICAgICAgICAgICAgICAgICByZXQuZC5wdXNoKGV2ZW50TmFtZSk7CiAgICAgICAgICAgICAgICAgICAgIHJldC53LnB1c2goZXZlbnROYW1lKTsKICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICByZXRbcndpbmRvdy50ZXN0KHYpID8gJ3cnIDogJ2QnXS5wdXNoKGV2ZW50TmFtZSk7CiAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgcmV0LmQgPSByZXQuZC5qb2luKCcgJyk7CiAgICAgICAgICAgICByZXQudyA9IHJldC53LmpvaW4oJyAnKTsKICAgICAgICAgICAgIHJldHVybiByZXQ7CiAgICAgICAgIH0KCiAgICAgICAgIGZ1bmN0aW9uIGNyZWF0ZUV2ZW50KGV2ZW50TmFtZSwgdGFyZ2V0KSB7CgogICAgICAgICAgICAgaWYgKHR5cGVvZiBldmVudE5hbWUgIT09ICdzdHJpbmcnKSB7CiAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFdmVudCBuYW1lIG11c3QgYmUgYSBzdHJpbmcnKTsKICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICB2YXIgZXZlbnRGcmFncyA9IGV2ZW50TmFtZS5tYXRjaCgvKFthLXpdK1wuKFthLXpdKykpL2kpLAogICAgICAgICAgICAgICAgIGRldGFpbCA9IHsKICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiB0YXJnZXQKICAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgIGlmIChldmVudEZyYWdzICE9PSBudWxsKSB7CiAgICAgICAgICAgICAgICAgZXZlbnROYW1lID0gZXZlbnRGcmFnc1sxXTsKICAgICAgICAgICAgICAgICBkZXRhaWwubmFtZXNwYWNlID0gZXZlbnRGcmFnc1syXTsKICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICByZXR1cm4gbmV3IHdpbmRvdy5DdXN0b21FdmVudChldmVudE5hbWUsIHsKICAgICAgICAgICAgICAgICBkZXRhaWw6IGRldGFpbAogICAgICAgICAgICAgfSk7CiAgICAgICAgIH0KCiAgICAgICAgIGZ1bmN0aW9uIGlzTm9kZUFmdGVyKHNvdXJjZU5vZGUsIHRhcmdldE5vZGUpIHsKCiAgICAgICAgICAgICByZXR1cm4gISEoc291cmNlTm9kZSAmJiB0YXJnZXROb2RlICYmIHNvdXJjZU5vZGUuY29tcGFyZURvY3VtZW50UG9zaXRpb24odGFyZ2V0Tm9kZSkgJiAyKTsKICAgICAgICAgfQoKICAgICAgICAgZnVuY3Rpb24gaXNTdHJpbmcodmFsdWUpIHsKICAgICAgICAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnOwogICAgICAgICB9CgogICAgICAgICBfbWVqczIuZGVmYXVsdC5VdGlscyA9IF9tZWpzMi5kZWZhdWx0LlV0aWxzIHx8IHt9OwogICAgICAgICBfbWVqczIuZGVmYXVsdC5VdGlscy5lc2NhcGVIVE1MID0gZXNjYXBlSFRNTDsKICAgICAgICAgX21lanMyLmRlZmF1bHQuVXRpbHMuZGVib3VuY2UgPSBkZWJvdW5jZTsKICAgICAgICAgX21lanMyLmRlZmF1bHQuVXRpbHMuaXNPYmplY3RFbXB0eSA9IGlzT2JqZWN0RW1wdHk7CiAgICAgICAgIF9tZWpzMi5kZWZhdWx0LlV0aWxzLnNwbGl0RXZlbnRzID0gc3BsaXRFdmVudHM7CiAgICAgICAgIF9tZWpzMi5kZWZhdWx0LlV0aWxzLmNyZWF0ZUV2ZW50ID0gY3JlYXRlRXZlbnQ7CiAgICAgICAgIF9tZWpzMi5kZWZhdWx0LlV0aWxzLmlzTm9kZUFmdGVyID0gaXNOb2RlQWZ0ZXI7CiAgICAgICAgIF9tZWpzMi5kZWZhdWx0LlV0aWxzLmlzU3RyaW5nID0gaXNTdHJpbmc7CgogICAgIH0sIHsgIjciOiA3IH1dLCAyODogW2Z1bmN0aW9uIChfZGVyZXFfLCBtb2R1bGUsIGV4cG9ydHMpIHsKICAgICAgICAgJ3VzZSBzdHJpY3QnOwoKICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICJfX2VzTW9kdWxlIiwgewogICAgICAgICAgICAgdmFsdWU6IHRydWUKICAgICAgICAgfSk7CiAgICAgICAgIGV4cG9ydHMudHlwZUNoZWNrcyA9IHVuZGVmaW5lZDsKICAgICAgICAgZXhwb3J0cy5hYnNvbHV0aXplVXJsID0gYWJzb2x1dGl6ZVVybDsKICAgICAgICAgZXhwb3J0cy5mb3JtYXRUeXBlID0gZm9ybWF0VHlwZTsKICAgICAgICAgZXhwb3J0cy5nZXRNaW1lRnJvbVR5cGUgPSBnZXRNaW1lRnJvbVR5cGU7CiAgICAgICAgIGV4cG9ydHMuZ2V0VHlwZUZyb21GaWxlID0gZ2V0VHlwZUZyb21GaWxlOwogICAgICAgICBleHBvcnRzLmdldEV4dGVuc2lvbiA9IGdldEV4dGVuc2lvbjsKICAgICAgICAgZXhwb3J0cy5ub3JtYWxpemVFeHRlbnNpb24gPSBub3JtYWxpemVFeHRlbnNpb247CgogICAgICAgICB2YXIgX21lanMgPSBfZGVyZXFfKDcpOwoKICAgICAgICAgdmFyIF9tZWpzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21lanMpOwoKICAgICAgICAgdmFyIF9nZW5lcmFsID0gX2RlcmVxXygyNyk7CgogICAgICAgICBmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKICAgICAgICAgdmFyIHR5cGVDaGVja3MgPSBleHBvcnRzLnR5cGVDaGVja3MgPSBbXTsKCiAgICAgICAgIGZ1bmN0aW9uIGFic29sdXRpemVVcmwodXJsKSB7CgogICAgICAgICAgICAgaWYgKHR5cGVvZiB1cmwgIT09ICdzdHJpbmcnKSB7CiAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdgdXJsYCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nJyk7CiAgICAgICAgICAgICB9CgogICAgICAgICAgICAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7CiAgICAgICAgICAgICBlbC5pbm5lckhUTUwgPSAnPGEgaHJlZj0iJyArICgwLCBfZ2VuZXJhbC5lc2NhcGVIVE1MKSh1cmwpICsgJyI+eDwvYT4nOwogICAgICAgICAgICAgcmV0dXJuIGVsLmZpcnN0Q2hpbGQuaHJlZjsKICAgICAgICAgfQoKICAgICAgICAgZnVuY3Rpb24gZm9ybWF0VHlwZSh1cmwpIHsKICAgICAgICAgICAgIHZhciB0eXBlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAnJzsKCiAgICAgICAgICAgICByZXR1cm4gdXJsICYmICF0eXBlID8gZ2V0VHlwZUZyb21GaWxlKHVybCkgOiB0eXBlOwogICAgICAgICB9CgogICAgICAgICBmdW5jdGlvbiBnZXRNaW1lRnJvbVR5cGUodHlwZSkgewoKICAgICAgICAgICAgIGlmICh0eXBlb2YgdHlwZSAhPT0gJ3N0cmluZycpIHsKICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2B0eXBlYCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nJyk7CiAgICAgICAgICAgICB9CgogICAgICAgICAgICAgcmV0dXJuIHR5cGUgJiYgdHlwZS5pbmRleE9mKCc7JykgPiAtMSA/IHR5cGUuc3Vic3RyKDAsIHR5cGUuaW5kZXhPZignOycpKSA6IHR5cGU7CiAgICAgICAgIH0KCiAgICAgICAgIGZ1bmN0aW9uIGdldFR5cGVGcm9tRmlsZSh1cmwpIHsKCiAgICAgICAgICAgICBpZiAodHlwZW9mIHVybCAhPT0gJ3N0cmluZycpIHsKICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2B1cmxgIGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcnKTsKICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgdG90YWwgPSB0eXBlQ2hlY2tzLmxlbmd0aDsgaSA8IHRvdGFsOyBpKyspIHsKICAgICAgICAgICAgICAgICB2YXIgdHlwZSA9IHR5cGVDaGVja3NbaV0odXJsKTsKCiAgICAgICAgICAgICAgICAgaWYgKHR5cGUpIHsKICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHR5cGU7CiAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgfQoKICAgICAgICAgICAgIHZhciBleHQgPSBnZXRFeHRlbnNpb24odXJsKSwKICAgICAgICAgICAgICAgICBub3JtYWxpemVkRXh0ID0gbm9ybWFsaXplRXh0ZW5zaW9uKGV4dCk7CgogICAgICAgICAgICAgdmFyIG1pbWUgPSAndmlkZW8vbXA0JzsKCiAgICAgICAgICAgICBpZiAobm9ybWFsaXplZEV4dCkgewogICAgICAgICAgICAgICAgIGlmICh+WydtcDQnLCAnbTR2JywgJ29nZycsICdvZ3YnLCAnd2VibScsICdmbHYnLCAnbXBlZycsICdtb3YnXS5pbmRleE9mKG5vcm1hbGl6ZWRFeHQpKSB7CiAgICAgICAgICAgICAgICAgICAgIG1pbWUgPSAndmlkZW8vJyArIG5vcm1hbGl6ZWRFeHQ7CiAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh+WydtcDMnLCAnb2dhJywgJ3dhdicsICdtaWQnLCAnbWlkaSddLmluZGV4T2Yobm9ybWFsaXplZEV4dCkpIHsKICAgICAgICAgICAgICAgICAgICAgbWltZSA9ICdhdWRpby8nICsgbm9ybWFsaXplZEV4dDsKICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICB9CgogICAgICAgICAgICAgcmV0dXJuIG1pbWU7CiAgICAgICAgIH0KCiAgICAgICAgIGZ1bmN0aW9uIGdldEV4dGVuc2lvbih1cmwpIHsKCiAgICAgICAgICAgICBpZiAodHlwZW9mIHVybCAhPT0gJ3N0cmluZycpIHsKICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2B1cmxgIGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcnKTsKICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICB2YXIgYmFzZVVybCA9IHVybC5zcGxpdCgnPycpWzBdLAogICAgICAgICAgICAgICAgIGJhc2VOYW1lID0gYmFzZVVybC5zcGxpdCgnXFwnKS5wb3AoKS5zcGxpdCgnLycpLnBvcCgpOwogICAgICAgICAgICAgcmV0dXJuIH5iYXNlTmFtZS5pbmRleE9mKCcuJykgPyBiYXNlTmFtZS5zdWJzdHJpbmcoYmFzZU5hbWUubGFzdEluZGV4T2YoJy4nKSArIDEpIDogJyc7CiAgICAgICAgIH0KCiAgICAgICAgIGZ1bmN0aW9uIG5vcm1hbGl6ZUV4dGVuc2lvbihleHRlbnNpb24pIHsKCiAgICAgICAgICAgICBpZiAodHlwZW9mIGV4dGVuc2lvbiAhPT0gJ3N0cmluZycpIHsKICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2BleHRlbnNpb25gIGFyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcnKTsKICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICBzd2l0Y2ggKGV4dGVuc2lvbikgewogICAgICAgICAgICAgICAgIGNhc2UgJ21wNCc6CiAgICAgICAgICAgICAgICAgY2FzZSAnbTR2JzoKICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdtcDQnOwogICAgICAgICAgICAgICAgIGNhc2UgJ3dlYm0nOgogICAgICAgICAgICAgICAgIGNhc2UgJ3dlYm1hJzoKICAgICAgICAgICAgICAgICBjYXNlICd3ZWJtdic6CiAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnd2VibSc7CiAgICAgICAgICAgICAgICAgY2FzZSAnb2dnJzoKICAgICAgICAgICAgICAgICBjYXNlICdvZ2EnOgogICAgICAgICAgICAgICAgIGNhc2UgJ29ndic6CiAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnb2dnJzsKICAgICAgICAgICAgICAgICBkZWZhdWx0OgogICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXh0ZW5zaW9uOwogICAgICAgICAgICAgfQogICAgICAgICB9CgogICAgICAgICBfbWVqczIuZGVmYXVsdC5VdGlscyA9IF9tZWpzMi5kZWZhdWx0LlV0aWxzIHx8IHt9OwogICAgICAgICBfbWVqczIuZGVmYXVsdC5VdGlscy50eXBlQ2hlY2tzID0gdHlwZUNoZWNrczsKICAgICAgICAgX21lanMyLmRlZmF1bHQuVXRpbHMuYWJzb2x1dGl6ZVVybCA9IGFic29sdXRpemVVcmw7CiAgICAgICAgIF9tZWpzMi5kZWZhdWx0LlV0aWxzLmZvcm1hdFR5cGUgPSBmb3JtYXRUeXBlOwogICAgICAgICBfbWVqczIuZGVmYXVsdC5VdGlscy5nZXRNaW1lRnJvbVR5cGUgPSBnZXRNaW1lRnJvbVR5cGU7CiAgICAgICAgIF9tZWpzMi5kZWZhdWx0LlV0aWxzLmdldFR5cGVGcm9tRmlsZSA9IGdldFR5cGVGcm9tRmlsZTsKICAgICAgICAgX21lanMyLmRlZmF1bHQuVXRpbHMuZ2V0RXh0ZW5zaW9uID0gZ2V0RXh0ZW5zaW9uOwogICAgICAgICBfbWVqczIuZGVmYXVsdC5VdGlscy5ub3JtYWxpemVFeHRlbnNpb24gPSBub3JtYWxpemVFeHRlbnNpb247CgogICAgIH0sIHsgIjI3IjogMjcsICI3IjogNyB9XSwgMjk6IFtmdW5jdGlvbiAoX2RlcmVxXywgbW9kdWxlLCBleHBvcnRzKSB7CiAgICAgICAgICd1c2Ugc3RyaWN0JzsKCiAgICAgICAgIHZhciBfZG9jdW1lbnQgPSBfZGVyZXFfKDIpOwoKICAgICAgICAgdmFyIF9kb2N1bWVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kb2N1bWVudCk7CgogICAgICAgICB2YXIgX3Byb21pc2VQb2x5ZmlsbCA9IF9kZXJlcV8oNCk7CgogICAgICAgICB2YXIgX3Byb21pc2VQb2x5ZmlsbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9taXNlUG9seWZpbGwpOwoKICAgICAgICAgZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH0KCiAgICAgICAgIChmdW5jdGlvbiAoYXJyKSB7CiAgICAgICAgICAgICBhcnIuZm9yRWFjaChmdW5jdGlvbiAoaXRlbSkgewogICAgICAgICAgICAgICAgIGlmIChpdGVtLmhhc093blByb3BlcnR5KCdyZW1vdmUnKSkgewogICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShpdGVtLCAncmVtb3ZlJywgewogICAgICAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsCiAgICAgICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsCiAgICAgICAgICAgICAgICAgICAgIHdyaXRhYmxlOiB0cnVlLAogICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMpOwogICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICB9KTsKICAgICAgICAgfSkoW0VsZW1lbnQucHJvdG90eXBlLCBDaGFyYWN0ZXJEYXRhLnByb3RvdHlwZSwgRG9jdW1lbnRUeXBlLnByb3RvdHlwZV0pOwoKICAgICAgICAgKGZ1bmN0aW9uICgpIHsKCiAgICAgICAgICAgICBpZiAodHlwZW9mIHdpbmRvdy5DdXN0b21FdmVudCA9PT0gJ2Z1bmN0aW9uJykgewogICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICBmdW5jdGlvbiBDdXN0b21FdmVudChldmVudCwgcGFyYW1zKSB7CiAgICAgICAgICAgICAgICAgcGFyYW1zID0gcGFyYW1zIHx8IHsgYnViYmxlczogZmFsc2UsIGNhbmNlbGFibGU6IGZhbHNlLCBkZXRhaWw6IHVuZGVmaW5lZCB9OwogICAgICAgICAgICAgICAgIHZhciBldnQgPSBfZG9jdW1lbnQyLmRlZmF1bHQuY3JlYXRlRXZlbnQoJ0N1c3RvbUV2ZW50Jyk7CiAgICAgICAgICAgICAgICAgZXZ0LmluaXRDdXN0b21FdmVudChldmVudCwgcGFyYW1zLmJ1YmJsZXMsIHBhcmFtcy5jYW5jZWxhYmxlLCBwYXJhbXMuZGV0YWlsKTsKICAgICAgICAgICAgICAgICByZXR1cm4gZXZ0OwogICAgICAgICAgICAgfQoKICAgICAgICAgICAgIEN1c3RvbUV2ZW50LnByb3RvdHlwZSA9IHdpbmRvdy5FdmVudC5wcm90b3R5cGU7CiAgICAgICAgICAgICB3aW5kb3cuQ3VzdG9tRXZlbnQgPSBDdXN0b21FdmVudDsKICAgICAgICAgfSkoKTsKCiAgICAgICAgIGlmICh0eXBlb2YgT2JqZWN0LmFzc2lnbiAhPT0gJ2Z1bmN0aW9uJykgewogICAgICAgICAgICAgT2JqZWN0LmFzc2lnbiA9IGZ1bmN0aW9uICh0YXJnZXQpIHsKCiAgICAgICAgICAgICAgICAgaWYgKHRhcmdldCA9PT0gbnVsbCB8fCB0YXJnZXQgPT09IHVuZGVmaW5lZCkgewogICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY29udmVydCB1bmRlZmluZWQgb3IgbnVsbCB0byBvYmplY3QnKTsKICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgIHZhciB0byA9IE9iamVjdCh0YXJnZXQpOwoKICAgICAgICAgICAgICAgICBmb3IgKHZhciBpbmRleCA9IDEsIHRvdGFsID0gYXJndW1lbnRzLmxlbmd0aDsgaW5kZXggPCB0b3RhbDsgaW5kZXgrKykgewogICAgICAgICAgICAgICAgICAgICB2YXIgbmV4dFNvdXJjZSA9IGFyZ3VtZW50c1tpbmRleF07CgogICAgICAgICAgICAgICAgICAgICBpZiAobmV4dFNvdXJjZSAhPT0gbnVsbCkgewogICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbmV4dEtleSBpbiBuZXh0U291cmNlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChuZXh0U291cmNlLCBuZXh0S2V5KSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b1tuZXh0S2V5XSA9IG5leHRTb3VyY2VbbmV4dEtleV07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgIHJldHVybiB0bzsKICAgICAgICAgICAgIH07CiAgICAgICAgIH0KCiAgICAgICAgIGlmICghU3RyaW5nLnByb3RvdHlwZS5zdGFydHNXaXRoKSB7CiAgICAgICAgICAgICBTdHJpbmcucHJvdG90eXBlLnN0YXJ0c1dpdGggPSBmdW5jdGlvbiAoc2VhcmNoU3RyaW5nLCBwb3NpdGlvbikgewogICAgICAgICAgICAgICAgIHBvc2l0aW9uID0gcG9zaXRpb24gfHwgMDsKICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zdWJzdHIocG9zaXRpb24sIHNlYXJjaFN0cmluZy5sZW5ndGgpID09PSBzZWFyY2hTdHJpbmc7CiAgICAgICAgICAgICB9OwogICAgICAgICB9CgogICAgICAgICBpZiAoIUVsZW1lbnQucHJvdG90eXBlLm1hdGNoZXMpIHsKICAgICAgICAgICAgIEVsZW1lbnQucHJvdG90eXBlLm1hdGNoZXMgPSBFbGVtZW50LnByb3RvdHlwZS5tYXRjaGVzU2VsZWN0b3IgfHwgRWxlbWVudC5wcm90b3R5cGUubW96TWF0Y2hlc1NlbGVjdG9yIHx8IEVsZW1lbnQucHJvdG90eXBlLm1zTWF0Y2hlc1NlbGVjdG9yIHx8IEVsZW1lbnQucHJvdG90eXBlLm9NYXRjaGVzU2VsZWN0b3IgfHwgRWxlbWVudC5wcm90b3R5cGUud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8IGZ1bmN0aW9uIChzKSB7CiAgICAgICAgICAgICAgICAgdmFyIG1hdGNoZXMgPSAodGhpcy5kb2N1bWVudCB8fCB0aGlzLm93bmVyRG9jdW1lbnQpLnF1ZXJ5U2VsZWN0b3JBbGwocyksCiAgICAgICAgICAgICAgICAgICAgIGkgPSBtYXRjaGVzLmxlbmd0aCAtIDE7CiAgICAgICAgICAgICAgICAgd2hpbGUgKC0taSA+PSAwICYmIG1hdGNoZXMuaXRlbShpKSAhPT0gdGhpcykgeyB9CiAgICAgICAgICAgICAgICAgcmV0dXJuIGkgPiAtMTsKICAgICAgICAgICAgIH07CiAgICAgICAgIH0KCiAgICAgICAgIGlmICh3aW5kb3cuRWxlbWVudCAmJiAhRWxlbWVudC5wcm90b3R5cGUuY2xvc2VzdCkgewogICAgICAgICAgICAgRWxlbWVudC5wcm90b3R5cGUuY2xvc2VzdCA9IGZ1bmN0aW9uIChzKSB7CiAgICAgICAgICAgICAgICAgdmFyIG1hdGNoZXMgPSAodGhpcy5kb2N1bWVudCB8fCB0aGlzLm93bmVyRG9jdW1lbnQpLnF1ZXJ5U2VsZWN0b3JBbGwocyksCiAgICAgICAgICAgICAgICAgICAgIGkgPSB2b2lkIDAsCiAgICAgICAgICAgICAgICAgICAgIGVsID0gdGhpczsKICAgICAgICAgICAgICAgICBkbyB7CiAgICAgICAgICAgICAgICAgICAgIGkgPSBtYXRjaGVzLmxlbmd0aDsKICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKC0taSA+PSAwICYmIG1hdGNoZXMuaXRlbShpKSAhPT0gZWwpIHsgfQogICAgICAgICAgICAgICAgIH0gd2hpbGUgKGkgPCAwICYmIChlbCA9IGVsLnBhcmVudEVsZW1lbnQpKTsKICAgICAgICAgICAgICAgICByZXR1cm4gZWw7CiAgICAgICAgICAgICB9OwogICAgICAgICB9CgogICAgICAgICAoZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgdmFyIGxhc3RUaW1lID0gMDsKICAgICAgICAgICAgIHZhciB2ZW5kb3JzID0gWydtcycsICdtb3onLCAnd2Via2l0JywgJ28nXTsKICAgICAgICAgICAgIGZvciAodmFyIHggPSAwOyB4IDwgdmVuZG9ycy5sZW5ndGggJiYgIXdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWU7ICsreCkgewogICAgICAgICAgICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSB3aW5kb3dbdmVuZG9yc1t4XSArICdSZXF1ZXN0QW5pbWF0aW9uRnJhbWUnXTsKICAgICAgICAgICAgICAgICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUgPSB3aW5kb3dbdmVuZG9yc1t4XSArICdDYW5jZWxBbmltYXRpb25GcmFtZSddIHx8IHdpbmRvd1t2ZW5kb3JzW3hdICsgJ0NhbmNlbFJlcXVlc3RBbmltYXRpb25GcmFtZSddOwogICAgICAgICAgICAgfQoKICAgICAgICAgICAgIGlmICghd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSkgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSA9IGZ1bmN0aW9uIChjYWxsYmFjaykgewogICAgICAgICAgICAgICAgIHZhciBjdXJyVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpOwogICAgICAgICAgICAgICAgIHZhciB0aW1lVG9DYWxsID0gTWF0aC5tYXgoMCwgMTYgLSAoY3VyclRpbWUgLSBsYXN0VGltZSkpOwogICAgICAgICAgICAgICAgIHZhciBpZCA9IHdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soY3VyclRpbWUgKyB0aW1lVG9DYWxsKTsKICAgICAgICAgICAgICAgICB9LCB0aW1lVG9DYWxsKTsKICAgICAgICAgICAgICAgICBsYXN0VGltZSA9IGN1cnJUaW1lICsgdGltZVRvQ2FsbDsKICAgICAgICAgICAgICAgICByZXR1cm4gaWQ7CiAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgIGlmICghd2luZG93LmNhbmNlbEFuaW1hdGlvbkZyYW1lKSB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUgPSBmdW5jdGlvbiAoaWQpIHsKICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoaWQpOwogICAgICAgICAgICAgfTsKICAgICAgICAgfSkoKTsKCiAgICAgICAgIGlmICgvZmlyZWZveC9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkpIHsKICAgICAgICAgICAgIHZhciBnZXRDb21wdXRlZFN0eWxlID0gd2luZG93LmdldENvbXB1dGVkU3R5bGU7CiAgICAgICAgICAgICB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSA9IGZ1bmN0aW9uIChlbCwgcHNldWRvRWwpIHsKICAgICAgICAgICAgICAgICB2YXIgdCA9IGdldENvbXB1dGVkU3R5bGUoZWwsIHBzZXVkb0VsKTsKICAgICAgICAgICAgICAgICByZXR1cm4gdCA9PT0gbnVsbCA/IHsgZ2V0UHJvcGVydHlWYWx1ZTogZnVuY3Rpb24gZ2V0UHJvcGVydHlWYWx1ZSgpIHsgfSB9IDogdDsKICAgICAgICAgICAgIH07CiAgICAgICAgIH0KCiAgICAgICAgIGlmICghd2luZG93LlByb21pc2UpIHsKICAgICAgICAgICAgIHdpbmRvdy5Qcm9taXNlID0gX3Byb21pc2VQb2x5ZmlsbDIuZGVmYXVsdDsKICAgICAgICAgfQoKICAgICAgICAgKGZ1bmN0aW9uIChjb25zdHJ1Y3RvcikgewogICAgICAgICAgICAgaWYgKGNvbnN0cnVjdG9yICYmIGNvbnN0cnVjdG9yLnByb3RvdHlwZSAmJiBjb25zdHJ1Y3Rvci5wcm90b3R5cGUuY2hpbGRyZW4gPT09IG51bGwpIHsKICAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29uc3RydWN0b3IucHJvdG90eXBlLCAnY2hpbGRyZW4nLCB7CiAgICAgICAgICAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkgewogICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSAwLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUgPSB2b2lkIDAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZXMgPSB0aGlzLmNoaWxkTm9kZXMsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW4gPSBbXTsKICAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChub2RlID0gbm9kZXNbaSsrXSkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub2RlLm5vZGVUeXBlID09PSAxKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuLnB1c2gobm9kZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNoaWxkcmVuOwogICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICB9CiAgICAgICAgIH0pKHdpbmRvdy5Ob2RlIHx8IHdpbmRvdy5FbGVtZW50KTsKCiAgICAgfSwgeyAiMiI6IDIsICI0IjogNCB9XSwgMzA6IFtmdW5jdGlvbiAoX2RlcmVxXywgbW9kdWxlLCBleHBvcnRzKSB7CiAgICAgICAgICd1c2Ugc3RyaWN0JzsKCiAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAiX19lc01vZHVsZSIsIHsKICAgICAgICAgICAgIHZhbHVlOiB0cnVlCiAgICAgICAgIH0pOwogICAgICAgICBleHBvcnRzLmlzRHJvcEZyYW1lID0gaXNEcm9wRnJhbWU7CiAgICAgICAgIGV4cG9ydHMuc2Vjb25kc1RvVGltZUNvZGUgPSBzZWNvbmRzVG9UaW1lQ29kZTsKICAgICAgICAgZXhwb3J0cy50aW1lQ29kZVRvU2Vjb25kcyA9IHRpbWVDb2RlVG9TZWNvbmRzOwogICAgICAgICBleHBvcnRzLmNhbGN1bGF0ZVRpbWVGb3JtYXQgPSBjYWxjdWxhdGVUaW1lRm9ybWF0OwogICAgICAgICBleHBvcnRzLmNvbnZlcnRTTVBURXRvU2Vjb25kcyA9IGNvbnZlcnRTTVBURXRvU2Vjb25kczsKCiAgICAgICAgIHZhciBfbWVqcyA9IF9kZXJlcV8oNyk7CgogICAgICAgICB2YXIgX21lanMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbWVqcyk7CgogICAgICAgICBmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfQoKICAgICAgICAgZnVuY3Rpb24gaXNEcm9wRnJhbWUoKSB7CiAgICAgICAgICAgICB2YXIgZnBzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiAyNTsKCiAgICAgICAgICAgICByZXR1cm4gIShmcHMgJSAxID09PSAwKTsKICAgICAgICAgfQogICAgICAgICBmdW5jdGlvbiBzZWNvbmRzVG9UaW1lQ29kZSh0aW1lKSB7CiAgICAgICAgICAgICB2YXIgZm9yY2VIb3VycyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZmFsc2U7CiAgICAgICAgICAgICB2YXIgc2hvd0ZyYW1lQ291bnQgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGZhbHNlOwogICAgICAgICAgICAgdmFyIGZwcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogMjU7CiAgICAgICAgICAgICB2YXIgc2Vjb25kc0RlY2ltYWxMZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoID4gNCAmJiBhcmd1bWVudHNbNF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s0XSA6IDA7CiAgICAgICAgICAgICB2YXIgdGltZUZvcm1hdCA9IGFyZ3VtZW50cy5sZW5ndGggPiA1ICYmIGFyZ3VtZW50c1s1XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzVdIDogJ2hoOm1tOnNzJzsKCgogICAgICAgICAgICAgdGltZSA9ICF0aW1lIHx8IHR5cGVvZiB0aW1lICE9PSAnbnVtYmVyJyB8fCB0aW1lIDwgMCA/IDAgOiB0aW1lOwoKICAgICAgICAgICAgIHZhciBkcm9wRnJhbWVzID0gTWF0aC5yb3VuZChmcHMgKiAwLjA2NjY2NiksCiAgICAgICAgICAgICAgICAgdGltZUJhc2UgPSBNYXRoLnJvdW5kKGZwcyksCiAgICAgICAgICAgICAgICAgZnJhbWVzUGVyMjRIb3VycyA9IE1hdGgucm91bmQoZnBzICogMzYwMCkgKiAyNCwKICAgICAgICAgICAgICAgICBmcmFtZXNQZXIxME1pbnV0ZXMgPSBNYXRoLnJvdW5kKGZwcyAqIDYwMCksCiAgICAgICAgICAgICAgICAgZnJhbWVTZXAgPSBpc0Ryb3BGcmFtZShmcHMpID8gJzsnIDogJzonLAogICAgICAgICAgICAgICAgIGhvdXJzID0gdm9pZCAwLAogICAgICAgICAgICAgICAgIG1pbnV0ZXMgPSB2b2lkIDAsCiAgICAgICAgICAgICAgICAgc2Vjb25kcyA9IHZvaWQgMCwKICAgICAgICAgICAgICAgICBmcmFtZXMgPSB2b2lkIDAsCiAgICAgICAgICAgICAgICAgZiA9IE1hdGgucm91bmQodGltZSAqIGZwcyk7CgogICAgICAgICAgICAgaWYgKGlzRHJvcEZyYW1lKGZwcykpIHsKCiAgICAgICAgICAgICAgICAgaWYgKGYgPCAwKSB7CiAgICAgICAgICAgICAgICAgICAgIGYgPSBmcmFtZXNQZXIyNEhvdXJzICsgZjsKICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgIGYgPSBmICUgZnJhbWVzUGVyMjRIb3VyczsKCiAgICAgICAgICAgICAgICAgdmFyIGQgPSBNYXRoLmZsb29yKGYgLyBmcmFtZXNQZXIxME1pbnV0ZXMpOwogICAgICAgICAgICAgICAgIHZhciBtID0gZiAlIGZyYW1lc1BlcjEwTWludXRlczsKICAgICAgICAgICAgICAgICBmID0gZiArIGRyb3BGcmFtZXMgKiA5ICogZDsKICAgICAgICAgICAgICAgICBpZiAobSA+IGRyb3BGcmFtZXMpIHsKICAgICAgICAgICAgICAgICAgICAgZiA9IGYgKyBkcm9wRnJhbWVzICogTWF0aC5mbG9vcigobSAtIGRyb3BGcmFtZXMpIC8gTWF0aC5yb3VuZCh0aW1lQmFzZSAqIDYwIC0gZHJvcEZyYW1lcykpOwogICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgdmFyIHRpbWVCYXNlRGl2aXNpb24gPSBNYXRoLmZsb29yKGYgLyB0aW1lQmFzZSk7CgogICAgICAgICAgICAgICAgIGhvdXJzID0gTWF0aC5mbG9vcihNYXRoLmZsb29yKHRpbWVCYXNlRGl2aXNpb24gLyA2MCkgLyA2MCk7CiAgICAgICAgICAgICAgICAgbWludXRlcyA9IE1hdGguZmxvb3IodGltZUJhc2VEaXZpc2lvbiAvIDYwKSAlIDYwOwoKICAgICAgICAgICAgICAgICBpZiAoc2hvd0ZyYW1lQ291bnQpIHsKICAgICAgICAgICAgICAgICAgICAgc2Vjb25kcyA9IHRpbWVCYXNlRGl2aXNpb24gJSA2MDsKICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICBzZWNvbmRzID0gTWF0aC5mbG9vcihmIC8gdGltZUJhc2UgJSA2MCkudG9GaXhlZChzZWNvbmRzRGVjaW1hbExlbmd0aCk7CiAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICBob3VycyA9IE1hdGguZmxvb3IodGltZSAvIDM2MDApICUgMjQ7CiAgICAgICAgICAgICAgICAgbWludXRlcyA9IE1hdGguZmxvb3IodGltZSAvIDYwKSAlIDYwOwogICAgICAgICAgICAgICAgIGlmIChzaG93RnJhbWVDb3VudCkgewogICAgICAgICAgICAgICAgICAgICBzZWNvbmRzID0gTWF0aC5mbG9vcih0aW1lICUgNjApOwogICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgIHNlY29uZHMgPSBNYXRoLmZsb29yKHRpbWUgJSA2MCkudG9GaXhlZChzZWNvbmRzRGVjaW1hbExlbmd0aCk7CiAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgfQogICAgICAgICAgICAgaG91cnMgPSBob3VycyA8PSAwID8gMCA6IGhvdXJzOwogICAgICAgICAgICAgbWludXRlcyA9IG1pbnV0ZXMgPD0gMCA/IDAgOiBtaW51dGVzOwogICAgICAgICAgICAgc2Vjb25kcyA9IHNlY29uZHMgPD0gMCA/IDAgOiBzZWNvbmRzOwoKICAgICAgICAgICAgIHNlY29uZHMgPSBzZWNvbmRzID09PSA2MCA/IDAgOiBzZWNvbmRzOwogICAgICAgICAgICAgbWludXRlcyA9IG1pbnV0ZXMgPT09IDYwID8gMCA6IG1pbnV0ZXM7CgogICAgICAgICAgICAgdmFyIHRpbWVGb3JtYXRGcmFncyA9IHRpbWVGb3JtYXQuc3BsaXQoJzonKTsKICAgICAgICAgICAgIHZhciB0aW1lRm9ybWF0U2V0dGluZ3MgPSB7fTsKICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCB0b3RhbCA9IHRpbWVGb3JtYXRGcmFncy5sZW5ndGg7IGkgPCB0b3RhbDsgKytpKSB7CiAgICAgICAgICAgICAgICAgdmFyIHVuaXF1ZSA9ICcnOwogICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwLCB0ID0gdGltZUZvcm1hdEZyYWdzW2ldLmxlbmd0aDsgaiA8IHQ7IGorKykgewogICAgICAgICAgICAgICAgICAgICBpZiAodW5pcXVlLmluZGV4T2YodGltZUZvcm1hdEZyYWdzW2ldW2pdKSA8IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgIHVuaXF1ZSArPSB0aW1lRm9ybWF0RnJhZ3NbaV1bal07CiAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgaWYgKH5bJ2YnLCAncycsICdtJywgJ2gnXS5pbmRleE9mKHVuaXF1ZSkpIHsKICAgICAgICAgICAgICAgICAgICAgdGltZUZvcm1hdFNldHRpbmdzW3VuaXF1ZV0gPSB0aW1lRm9ybWF0RnJhZ3NbaV0ubGVuZ3RoOwogICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gZm9yY2VIb3VycyB8fCBob3VycyA+IDAgPyAoaG91cnMgPCAxMCAmJiB0aW1lRm9ybWF0U2V0dGluZ3MuaCA+IDEgPyAnMCcgKyBob3VycyA6IGhvdXJzKSArICc6JyA6ICcnOwogICAgICAgICAgICAgcmVzdWx0ICs9IChtaW51dGVzIDwgMTAgJiYgdGltZUZvcm1hdFNldHRpbmdzLm0gPiAxID8gJzAnICsgbWludXRlcyA6IG1pbnV0ZXMpICsgJzonOwogICAgICAgICAgICAgcmVzdWx0ICs9ICcnICsgKHNlY29uZHMgPCAxMCAmJiB0aW1lRm9ybWF0U2V0dGluZ3MucyA+IDEgPyAnMCcgKyBzZWNvbmRzIDogc2Vjb25kcyk7CgogICAgICAgICAgICAgaWYgKHNob3dGcmFtZUNvdW50KSB7CiAgICAgICAgICAgICAgICAgZnJhbWVzID0gKGYgJSB0aW1lQmFzZSkudG9GaXhlZCgwKTsKICAgICAgICAgICAgICAgICBmcmFtZXMgPSBmcmFtZXMgPD0gMCA/IDAgOiBmcmFtZXM7CiAgICAgICAgICAgICAgICAgcmVzdWx0ICs9IGZyYW1lcyA8IDEwICYmIHRpbWVGb3JtYXRTZXR0aW5ncy5mID8gZnJhbWVTZXAgKyAnMCcgKyBmcmFtZXMgOiAnJyArIGZyYW1lU2VwICsgZnJhbWVzOwogICAgICAgICAgICAgfQoKICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7CiAgICAgICAgIH0KCiAgICAgICAgIGZ1bmN0aW9uIHRpbWVDb2RlVG9TZWNvbmRzKHRpbWUpIHsKICAgICAgICAgICAgIHZhciBmcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IDI1OwoKCiAgICAgICAgICAgICBpZiAodHlwZW9mIHRpbWUgIT09ICdzdHJpbmcnKSB7CiAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGltZSBtdXN0IGJlIGEgc3RyaW5nJyk7CiAgICAgICAgICAgICB9CgogICAgICAgICAgICAgaWYgKHRpbWUuaW5kZXhPZignOycpID4gMCkgewogICAgICAgICAgICAgICAgIHRpbWUgPSB0aW1lLnJlcGxhY2UoJzsnLCAnOicpOwogICAgICAgICAgICAgfQoKICAgICAgICAgICAgIGlmICghL1xkezJ9KFw6XGR7Mn0pezAsM30vaS50ZXN0KHRpbWUpKSB7CiAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGltZSBjb2RlIG11c3QgaGF2ZSB0aGUgZm9ybWF0IGAwMDowMDowMGAnKTsKICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICB2YXIgcGFydHMgPSB0aW1lLnNwbGl0KCc6Jyk7CgogICAgICAgICAgICAgdmFyIG91dHB1dCA9IHZvaWQgMCwKICAgICAgICAgICAgICAgICBob3VycyA9IDAsCiAgICAgICAgICAgICAgICAgbWludXRlcyA9IDAsCiAgICAgICAgICAgICAgICAgc2Vjb25kcyA9IDAsCiAgICAgICAgICAgICAgICAgZnJhbWVzID0gMCwKICAgICAgICAgICAgICAgICB0b3RhbE1pbnV0ZXMgPSAwLAogICAgICAgICAgICAgICAgIGRyb3BGcmFtZXMgPSBNYXRoLnJvdW5kKGZwcyAqIDAuMDY2NjY2KSwKICAgICAgICAgICAgICAgICB0aW1lQmFzZSA9IE1hdGgucm91bmQoZnBzKSwKICAgICAgICAgICAgICAgICBoRnJhbWVzID0gdGltZUJhc2UgKiAzNjAwLAogICAgICAgICAgICAgICAgIG1GcmFtZXMgPSB0aW1lQmFzZSAqIDYwOwoKICAgICAgICAgICAgIHN3aXRjaCAocGFydHMubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgZGVmYXVsdDoKICAgICAgICAgICAgICAgICBjYXNlIDE6CiAgICAgICAgICAgICAgICAgICAgIHNlY29uZHMgPSBwYXJzZUludChwYXJ0c1swXSwgMTApOwogICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgICAgICAgIG1pbnV0ZXMgPSBwYXJzZUludChwYXJ0c1swXSwgMTApOwogICAgICAgICAgICAgICAgICAgICBzZWNvbmRzID0gcGFyc2VJbnQocGFydHNbMV0sIDEwKTsKICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICAgICAgICAgICBob3VycyA9IHBhcnNlSW50KHBhcnRzWzBdLCAxMCk7CiAgICAgICAgICAgICAgICAgICAgIG1pbnV0ZXMgPSBwYXJzZUludChwYXJ0c1sxXSwgMTApOwogICAgICAgICAgICAgICAgICAgICBzZWNvbmRzID0gcGFyc2VJbnQocGFydHNbMl0sIDEwKTsKICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgICAgICAgICBob3VycyA9IHBhcnNlSW50KHBhcnRzWzBdLCAxMCk7CiAgICAgICAgICAgICAgICAgICAgIG1pbnV0ZXMgPSBwYXJzZUludChwYXJ0c1sxXSwgMTApOwogICAgICAgICAgICAgICAgICAgICBzZWNvbmRzID0gcGFyc2VJbnQocGFydHNbMl0sIDEwKTsKICAgICAgICAgICAgICAgICAgICAgZnJhbWVzID0gcGFyc2VJbnQocGFydHNbM10sIDEwKTsKICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICB9CgogICAgICAgICAgICAgaWYgKGlzRHJvcEZyYW1lKGZwcykpIHsKICAgICAgICAgICAgICAgICB0b3RhbE1pbnV0ZXMgPSA2MCAqIGhvdXJzICsgbWludXRlczsKICAgICAgICAgICAgICAgICBvdXRwdXQgPSBoRnJhbWVzICogaG91cnMgKyBtRnJhbWVzICogbWludXRlcyArIHRpbWVCYXNlICogc2Vjb25kcyArIGZyYW1lcyAtIGRyb3BGcmFtZXMgKiAodG90YWxNaW51dGVzIC0gTWF0aC5mbG9vcih0b3RhbE1pbnV0ZXMgLyAxMCkpOwogICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICBvdXRwdXQgPSAoaEZyYW1lcyAqIGhvdXJzICsgbUZyYW1lcyAqIG1pbnV0ZXMgKyBmcHMgKiBzZWNvbmRzICsgZnJhbWVzKSAvIGZwczsKICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICByZXR1cm4gcGFyc2VGbG9hdChvdXRwdXQudG9GaXhlZCgzKSk7CiAgICAgICAgIH0KCiAgICAgICAgIGZ1bmN0aW9uIGNhbGN1bGF0ZVRpbWVGb3JtYXQodGltZSwgb3B0aW9ucykgewogICAgICAgICAgICAgdmFyIGZwcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogMjU7CgoKICAgICAgICAgICAgIHRpbWUgPSAhdGltZSB8fCB0eXBlb2YgdGltZSAhPT0gJ251bWJlcicgfHwgdGltZSA8IDAgPyAwIDogdGltZTsKCiAgICAgICAgICAgICB2YXIgaG91cnMgPSBNYXRoLmZsb29yKHRpbWUgLyAzNjAwKSAlIDI0LAogICAgICAgICAgICAgICAgIG1pbnV0ZXMgPSBNYXRoLmZsb29yKHRpbWUgLyA2MCkgJSA2MCwKICAgICAgICAgICAgICAgICBzZWNvbmRzID0gTWF0aC5mbG9vcih0aW1lICUgNjApLAogICAgICAgICAgICAgICAgIGZyYW1lcyA9IE1hdGguZmxvb3IoKHRpbWUgJSAxICogZnBzKS50b0ZpeGVkKDMpKSwKICAgICAgICAgICAgICAgICBsaXMgPSBbW2ZyYW1lcywgJ2YnXSwgW3NlY29uZHMsICdzJ10sIFttaW51dGVzLCAnbSddLCBbaG91cnMsICdoJ11dOwoKICAgICAgICAgICAgIHZhciBmb3JtYXQgPSBvcHRpb25zLnRpbWVGb3JtYXQsCiAgICAgICAgICAgICAgICAgZmlyc3RUd29QbGFjZXMgPSBmb3JtYXRbMV0gPT09IGZvcm1hdFswXSwKICAgICAgICAgICAgICAgICBzZXBhcmF0b3JJbmRleCA9IGZpcnN0VHdvUGxhY2VzID8gMiA6IDEsCiAgICAgICAgICAgICAgICAgc2VwYXJhdG9yID0gZm9ybWF0Lmxlbmd0aCA8IHNlcGFyYXRvckluZGV4ID8gZm9ybWF0W3NlcGFyYXRvckluZGV4XSA6ICc6JywKICAgICAgICAgICAgICAgICBmaXJzdENoYXIgPSBmb3JtYXRbMF0sCiAgICAgICAgICAgICAgICAgcmVxdWlyZWQgPSBmYWxzZTsKCiAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gbGlzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7CiAgICAgICAgICAgICAgICAgaWYgKH5mb3JtYXQuaW5kZXhPZihsaXNbaV1bMV0pKSB7CiAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkID0gdHJ1ZTsKICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHJlcXVpcmVkKSB7CiAgICAgICAgICAgICAgICAgICAgIHZhciBoYXNOZXh0VmFsdWUgPSBmYWxzZTsKICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IGk7IGogPCBsZW47IGorKykgewogICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxpc1tqXVswXSA+IDApIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNOZXh0VmFsdWUgPSB0cnVlOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgICBpZiAoIWhhc05leHRWYWx1ZSkgewogICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgIGlmICghZmlyc3RUd29QbGFjZXMpIHsKICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdCA9IGZpcnN0Q2hhciArIGZvcm1hdDsKICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICBmb3JtYXQgPSBsaXNbaV1bMV0gKyBzZXBhcmF0b3IgKyBmb3JtYXQ7CiAgICAgICAgICAgICAgICAgICAgIGlmIChmaXJzdFR3b1BsYWNlcykgewogICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0ID0gbGlzW2ldWzFdICsgZm9ybWF0OwogICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgIGZpcnN0Q2hhciA9IGxpc1tpXVsxXTsKICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICB9CgogICAgICAgICAgICAgb3B0aW9ucy50aW1lRm9ybWF0ID0gZm9ybWF0OwogICAgICAgICB9CgogICAgICAgICBmdW5jdGlvbiBjb252ZXJ0U01QVEV0b1NlY29uZHMoU01QVEUpIHsKCiAgICAgICAgICAgICBpZiAodHlwZW9mIFNNUFRFICE9PSAnc3RyaW5nJykgewogICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FyZ3VtZW50IG11c3QgYmUgYSBzdHJpbmcgdmFsdWUnKTsKICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICBTTVBURSA9IFNNUFRFLnJlcGxhY2UoJywnLCAnLicpOwoKICAgICAgICAgICAgIHZhciBkZWNpbWFsTGVuID0gflNNUFRFLmluZGV4T2YoJy4nKSA/IFNNUFRFLnNwbGl0KCcuJylbMV0ubGVuZ3RoIDogMDsKCiAgICAgICAgICAgICB2YXIgc2VjcyA9IDAsCiAgICAgICAgICAgICAgICAgbXVsdGlwbGllciA9IDE7CgogICAgICAgICAgICAgU01QVEUgPSBTTVBURS5zcGxpdCgnOicpLnJldmVyc2UoKTsKCiAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgdG90YWwgPSBTTVBURS5sZW5ndGg7IGkgPCB0b3RhbDsgaSsrKSB7CiAgICAgICAgICAgICAgICAgbXVsdGlwbGllciA9IDE7CiAgICAgICAgICAgICAgICAgaWYgKGkgPiAwKSB7CiAgICAgICAgICAgICAgICAgICAgIG11bHRpcGxpZXIgPSBNYXRoLnBvdyg2MCwgaSk7CiAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgIHNlY3MgKz0gTnVtYmVyKFNNUFRFW2ldKSAqIG11bHRpcGxpZXI7CiAgICAgICAgICAgICB9CiAgICAgICAgICAgICByZXR1cm4gTnVtYmVyKHNlY3MudG9GaXhlZChkZWNpbWFsTGVuKSk7CiAgICAgICAgIH0KCiAgICAgICAgIF9tZWpzMi5kZWZhdWx0LlV0aWxzID0gX21lanMyLmRlZmF1bHQuVXRpbHMgfHwge307CiAgICAgICAgIF9tZWpzMi5kZWZhdWx0LlV0aWxzLnNlY29uZHNUb1RpbWVDb2RlID0gc2Vjb25kc1RvVGltZUNvZGU7CiAgICAgICAgIF9tZWpzMi5kZWZhdWx0LlV0aWxzLnRpbWVDb2RlVG9TZWNvbmRzID0gdGltZUNvZGVUb1NlY29uZHM7CiAgICAgICAgIF9tZWpzMi5kZWZhdWx0LlV0aWxzLmNhbGN1bGF0ZVRpbWVGb3JtYXQgPSBjYWxjdWxhdGVUaW1lRm9ybWF0OwogICAgICAgICBfbWVqczIuZGVmYXVsdC5VdGlscy5jb252ZXJ0U01QVEV0b1NlY29uZHMgPSBjb252ZXJ0U01QVEV0b1NlY29uZHM7CgogICAgIH0sIHsgIjciOiA3IH1dDQogfSwge30sIFsyOSwgNiwgNSwgMTUsIDIzLCAyMCwgMTksIDIxLCAyMiwgMjQsIDE2LCAxOCwgMTcsIDksIDEwLCAxMSwgMTIsIDEzLCAxNF0pOwo=
- ID: "6954b7c7-2487-423f-8600-436cb3b6dc0e"
  Hint: Size
  Value: 394229
- ID: "6f47a0a5-9c94-4b48-abeb-42d38def6054"
  Hint: Mime Type
  Value: "application/x-javascript"
- ID: "c06867fe-9a43-4c7d-b739-48780492d06f"
  Hint: Extension
  Value: js
Languages:
- Language: en
  Versions:
  - Version: 1
    Fields:
    - ID: "25bed78c-4957-4165-998a-ca1b52f67497"
      Hint: __Created
      Value: 20220630T091634Z
    - ID: "52807595-0f8f-4b20-8d2a-cb71d28c6103"
      Hint: __Owner
      Value: |
        sitecore\Admin
    - ID: "5dd74568-4d4b-44c1-b513-0af5f4cda34f"
      Hint: __Created by
      Value: |
        sitecore\Admin
    - ID: "8cdc337e-a112-42fb-bbb4-4143751e123f"
      Hint: __Revision
      Value: "c6af2c52-99c9-4a39-a2df-5951e0de9a2b"
    - ID: "badd9cf9-53e0-4d0c-bcc0-2d784c282f6a"
      Hint: __Updated by
      Value: |
        sitecore\Admin
    - ID: "d9cf14b1-fa16-4ba6-9288-e8a174d4d522"
      Hint: __Updated
      Value: 20220630T091634Z
